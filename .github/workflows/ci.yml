name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  CACHE_NAME: "node-modules-v1"

jobs:
  # Job 1: Quality Checks (Lint, Format, Security)
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🎯 ESLint check
        run: |
          echo "## 🎯 ESLint Code Quality Check" >> $GITHUB_STEP_SUMMARY
          echo "Running ESLint analysis..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if npm run lint; then
            echo "✅ **ESLint**: No linting errors found" >> $GITHUB_STEP_SUMMARY
            echo "- **Configuration**: ESLint 9+ flat config" >> $GITHUB_STEP_SUMMARY
            echo "- **Rules**: TypeScript recommended + custom rules" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **ESLint**: Linting errors detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Quick Fixes" >> $GITHUB_STEP_SUMMARY
            echo "- Run \`npm run lint:fix\` to auto-fix issues" >> $GITHUB_STEP_SUMMARY
            echo "- Check [ESLint docs](https://eslint.org/docs/rules/) for rule details" >> $GITHUB_STEP_SUMMARY
            echo "- Review unused variables and \`any\` types" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: 📊 TypeScript compilation check
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 TypeScript Compilation" >> $GITHUB_STEP_SUMMARY
          echo "Checking TypeScript compilation..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if npx tsc --noEmit; then
            echo "✅ **TypeScript**: Compilation successful" >> $GITHUB_STEP_SUMMARY
            echo "- **Target**: ES2020" >> $GITHUB_STEP_SUMMARY
            echo "- **Strict mode**: Enabled" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **TypeScript**: Compilation errors detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Troubleshooting" >> $GITHUB_STEP_SUMMARY
            echo "- Check type definitions and imports" >> $GITHUB_STEP_SUMMARY
            echo "- Verify tsconfig.json configuration" >> $GITHUB_STEP_SUMMARY
            echo "- Run \`npx tsc --noEmit\` locally for details" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: 🔐 Security audit
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔐 Security Audit" >> $GITHUB_STEP_SUMMARY

          if npm audit --audit-level=moderate; then
            echo "✅ **Security**: No moderate or high vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security**: Vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
            echo "- Run \`npm audit fix\` to address issues" >> $GITHUB_STEP_SUMMARY
            echo "- Review [npm audit docs](https://docs.npmjs.com/cli/v7/commands/npm-audit)" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

  # Job 2: Tests
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: ["20", "22"]

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: |
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "Running client-side tests with coverage..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if npm test -- --coverage --watchAll=false --maxWorkers=2; then
            echo "✅ **Tests**: All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "- **Environment**: Client-side JavaScript/TypeScript" >> $GITHUB_STEP_SUMMARY
            echo "- **Test Runner**: Jest with JSDOM" >> $GITHUB_STEP_SUMMARY
            echo "- **Coverage**: Generated and uploaded to Codecov" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Tests**: Some tests failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Common Issues & Fixes" >> $GITHUB_STEP_SUMMARY
            echo "- **LoggerFactory Migration**: Test assertions may need updates for new logging format" >> $GITHUB_STEP_SUMMARY
            echo "- **Expected**: \`TestComponent: Message\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Actual**: \`2025-XX-XX [DEBUG] ComponentName: Message\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🛠️ Troubleshooting Steps" >> $GITHUB_STEP_SUMMARY
            echo "1. Run \`npm test\` locally to see detailed test output" >> $GITHUB_STEP_SUMMARY
            echo "2. Update test assertions to match new LoggerFactory format" >> $GITHUB_STEP_SUMMARY
            echo "3. Check for async timing issues in component tests" >> $GITHUB_STEP_SUMMARY
            echo "4. Verify mock setups are compatible with structured logging" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: 📊 Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        if: matrix.node-version == '20'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job 3: Build
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [quality, test]

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏧 Build application
        run: npm run build
        env:
          SASS_SILENCE_DEPRECATIONS: legacy-js-api
          BUILD_CONFIG: production

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 30

      - name: 📏 Bundle size check
        run: |
          echo "## 📊 Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          find dist -name "*.js" -o -name "*.css" | head -10 | while read file; do
            size=$(du -h "$file" | cut -f1)
            echo "| $file | $size |" >> $GITHUB_STEP_SUMMARY
          done

  # Job 4: Preview Deployment (for PRs)
  preview:
    name: 🚀 Preview Deploy
    needs: build
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    uses: ./.github/workflows/publish-pages.yml
    with:
      deployment_type: "preview"
      pr_number: ${{ github.event.number }}
      base_url: "/${{ github.event.repository.name }}/pr-${{ github.event.number }}"
      build_config: "github-pages-pr"
      node_version: ${{ env.NODE_VERSION }}
      discord_webhook: false
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

  # Job 5: Production Deployment (DISABLED - Use release-driven deployment)
  deploy:
    name: 🚀 Production Deploy
    runs-on: ubuntu-latest
    needs: build
    # DISABLED: Production deployment now handled by release-driven workflow
    # Use 'Production Deployment' workflow with specific releases instead
    if: false  # github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-files
          path: dist/

      - name: 🌍 Deploy to Production
        run: |
          echo "🚀 Production deployment would happen here"
          echo "## 🎉 Production Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "🌟 Your application has been deployed to production!" >> $GITHUB_STEP_SUMMARY
          echo "🔗 Live URL: https://your-domain.com" >> $GITHUB_STEP_SUMMARY

  # Job 6: Cleanup Preview (when PR is closed)
  cleanup-preview:
    name: 🧹 Cleanup Preview
    runs-on: ubuntu-latest
    if: github.event.action == 'closed' && github.event_name == 'pull_request'

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 🔧 Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 🧹 Remove PR preview
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Clone repository and switch to gh-pages
          git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git temp-repo
          cd temp-repo

          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            git checkout gh-pages

            # Remove PR preview directory
            PR_DIR="pr-${{ github.event.number }}"
            if [ -d "$PR_DIR" ]; then
              rm -rf "$PR_DIR"
              git add .
              git commit -m "Remove preview for closed PR #${{ github.event.number }}" || echo "No changes to commit"
              git push origin gh-pages
              echo "Removed preview directory: $PR_DIR"
            else
              echo "Preview directory $PR_DIR not found - may already be cleaned up"
            fi
          else
            echo "No gh-pages branch found"
          fi

          cd ..
          rm -rf temp-repo

      - name: 💬 Update PR comment
        uses: actions/github-script@v8
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // Find and update preview comment
            const previewComment = comments.find(comment =>
              comment.body.includes('🚀 Preview Deployment') &&
              comment.user.login === 'github-actions[bot]'
            );

            if (previewComment) {
              const updatedBody = previewComment.body +
                '\n\n---\n☠️ **Preview Cleaned Up**: This preview has been removed since the PR was closed.';

              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: previewComment.id,
                body: updatedBody
              });
            }

  # Job 7: Discord Success Notifications  
  notify:
    name: 🎮 Discord Success Notifications
    runs-on: ubuntu-latest
    needs: [quality, test, build, preview, deploy]
    # Always run to debug - we'll check success condition inside  
    # Note: preview and deploy might be skipped based on conditions
    if: always()
    
    steps:
      - name: 🔍 Debug Job Results
        run: |
          echo "## 🔍 Job Results Debug" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality Result:** '${{ needs.quality.result }}'" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Result:** '${{ needs.test.result }}'" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Result:** '${{ needs.build.result }}'" >> $GITHUB_STEP_SUMMARY
          echo "- **Preview Result:** '${{ needs.preview.result }}'" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Result:** '${{ needs.deploy.result }}'" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if all core jobs succeeded
          QUALITY="${{ needs.quality.result }}"
          TEST="${{ needs.test.result }}"
          BUILD="${{ needs.build.result }}"
          
          echo "Debug values:"
          echo "Quality: '$QUALITY' (success check: $([ "$QUALITY" = "success" ] && echo "true" || echo "false"))"
          echo "Test: '$TEST' (success check: $([ "$TEST" = "success" ] && echo "true" || echo "false"))"
          echo "Build: '$BUILD' (success check: $([ "$BUILD" = "success" ] && echo "true" || echo "false"))"
          
          if [[ "$QUALITY" == "success" && "$TEST" == "success" && "$BUILD" == "success" ]]; then
            echo "\n✅ **SUCCESS CONDITION MET** - Discord notification will be sent" >> $GITHUB_STEP_SUMMARY
            echo "SUCCESS_CONDITION=true" >> $GITHUB_ENV
          else
            echo "\n❌ **SUCCESS CONDITION NOT MET** - Discord notification will be skipped" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** One or more core jobs did not succeed" >> $GITHUB_STEP_SUMMARY
            echo "SUCCESS_CONDITION=false" >> $GITHUB_ENV
          fi
      - name: 🎮 Determine notification type and content
        id: notification
        run: |
          # Collect all job statuses
          QUALITY_STATUS="${{ needs.quality.result }}"
          TEST_STATUS="${{ needs.test.result }}"
          BUILD_STATUS="${{ needs.build.result }}"
          PREVIEW_STATUS="${{ needs.preview.result }}"
          DEPLOY_STATUS="${{ needs.deploy.result }}"

          # Determine overall status
          if [[ "$QUALITY_STATUS" == "success" && "$TEST_STATUS" == "success" && "$BUILD_STATUS" == "success" ]]; then
            if [[ "${{ github.event_name }}" == "pull_request" && "$PREVIEW_STATUS" == "success" ]]; then
              OVERALL_STATUS="✅ Success with Preview"
              EMBED_COLOR="3066993"  # Green
            elif [[ "${{ github.ref }}" == "refs/heads/main" && "$DEPLOY_STATUS" == "success" ]]; then
              OVERALL_STATUS="🚀 Success with Deployment"
              EMBED_COLOR="3066993"  # Green
            else
              OVERALL_STATUS="✅ Success"
              EMBED_COLOR="3066993"  # Green
            fi
          else
            OVERALL_STATUS="❌ Failed"
            EMBED_COLOR="15158332"  # Red
          fi

          echo "overall_status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          echo "embed_color=$EMBED_COLOR" >> $GITHUB_OUTPUT
          echo "quality_status=$QUALITY_STATUS" >> $GITHUB_OUTPUT
          echo "test_status=$TEST_STATUS" >> $GITHUB_OUTPUT
          echo "build_status=$BUILD_STATUS" >> $GITHUB_OUTPUT
          echo "preview_status=$PREVIEW_STATUS" >> $GITHUB_OUTPUT
          echo "deploy_status=$DEPLOY_STATUS" >> $GITHUB_OUTPUT

          # Generate preview URL if applicable
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PREVIEW_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ github.event.number }}"
            echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          fi

      - name: 🎮 Generate preview URL if applicable
        id: preview_info
        if: env.SUCCESS_CONDITION == 'true'
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ steps.notification.outputs.preview_status }}" == "success" ]]; then
            PREVIEW_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ github.event.number }}"
            echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
            echo "has_preview=true" >> $GITHUB_OUTPUT
            echo "description=CI Pipeline completed successfully with preview deployment" >> $GITHUB_OUTPUT
            echo "title=🚀 Success with Preview - PR #${{ github.event.number }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" && "${{ steps.notification.outputs.deploy_status }}" == "success" ]]; then
            echo "has_preview=false" >> $GITHUB_OUTPUT
            echo "description=CI Pipeline completed successfully with production deployment" >> $GITHUB_OUTPUT
            echo "title=🚀 Success with Production Deploy" >> $GITHUB_OUTPUT
          else
            echo "has_preview=false" >> $GITHUB_OUTPUT
            echo "description=All CI checks passed successfully: Quality ✅ Tests ✅ Build ✅" >> $GITHUB_OUTPUT
            echo "title=✅ CI Pipeline Success" >> $GITHUB_OUTPUT
          fi

      - name: 🎮 Discord Success Notification
        if: env.SUCCESS_CONDITION == 'true' && vars.WEBHOOK_URL != ''
        uses: sarisia/actions-status-discord@v1
        with:
          nodetail: true
          webhook: "${{ vars.WEBHOOK_URL }}"
          avatar_url: "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png"
          username: "Opinion Front UI CI"
          content: "${{ steps.preview_info.outputs.has_preview == 'true' && format('Preview available: {0}', steps.preview_info.outputs.preview_url) || format('Success on {0}', github.ref_name) }}"
          description: "${{ steps.preview_info.outputs.description }}"
          title: "${{ steps.preview_info.outputs.title }}"
          color: 5763719

      - name: 📊 Success Summary
        if: env.SUCCESS_CONDITION == 'true'
        run: |
          echo "## ✅ CI Pipeline Success" >> $GITHUB_STEP_SUMMARY
          echo "All checks passed! Your code is ready." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Quality checks passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Build successful" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ needs.preview.result }}" == "success" ]]; then
            PREVIEW_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ github.event.number }}"
            echo "- 🚀 Preview deployed: [$PREVIEW_URL]($PREVIEW_URL)" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "${{ github.ref }}" == "refs/heads/main" && "${{ needs.deploy.result }}" == "success" ]]; then
            echo "- 🚀 Production deployed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎮 **Discord success notification sent!**" >> $GITHUB_STEP_SUMMARY
