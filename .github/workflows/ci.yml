name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, closed ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  CACHE_NAME: 'node-modules-v1'

jobs:
  # Job 1: Quality Checks (Lint, Format, Security)
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🎯 ESLint check
        run: |
          echo "## 🎯 ESLint Code Quality Check" >> $GITHUB_STEP_SUMMARY
          echo "Running ESLint analysis..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if npm run lint; then
            echo "✅ **ESLint**: No linting errors found" >> $GITHUB_STEP_SUMMARY
            echo "- **Configuration**: ESLint 9+ flat config" >> $GITHUB_STEP_SUMMARY
            echo "- **Rules**: TypeScript recommended + custom rules" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **ESLint**: Linting errors detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Quick Fixes" >> $GITHUB_STEP_SUMMARY
            echo "- Run \`npm run lint:fix\` to auto-fix issues" >> $GITHUB_STEP_SUMMARY
            echo "- Check [ESLint docs](https://eslint.org/docs/rules/) for rule details" >> $GITHUB_STEP_SUMMARY
            echo "- Review unused variables and \`any\` types" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: 📊 TypeScript compilation check
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 TypeScript Compilation" >> $GITHUB_STEP_SUMMARY
          echo "Checking TypeScript compilation..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if npx tsc --noEmit; then
            echo "✅ **TypeScript**: Compilation successful" >> $GITHUB_STEP_SUMMARY
            echo "- **Target**: ES2020" >> $GITHUB_STEP_SUMMARY
            echo "- **Strict mode**: Enabled" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **TypeScript**: Compilation errors detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Troubleshooting" >> $GITHUB_STEP_SUMMARY
            echo "- Check type definitions and imports" >> $GITHUB_STEP_SUMMARY
            echo "- Verify tsconfig.json configuration" >> $GITHUB_STEP_SUMMARY
            echo "- Run \`npx tsc --noEmit\` locally for details" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: 🔐 Security audit
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔐 Security Audit" >> $GITHUB_STEP_SUMMARY
          
          if npm audit --audit-level=moderate; then
            echo "✅ **Security**: No moderate or high vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security**: Vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
            echo "- Run \`npm audit fix\` to address issues" >> $GITHUB_STEP_SUMMARY
            echo "- Review [npm audit docs](https://docs.npmjs.com/cli/v7/commands/npm-audit)" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

  # Job 2: Tests
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['20', '22']
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: |
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "Running client-side tests with coverage..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if npm test -- --coverage --watchAll=false --maxWorkers=2; then
            echo "✅ **Tests**: All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "- **Environment**: Client-side JavaScript/TypeScript" >> $GITHUB_STEP_SUMMARY
            echo "- **Test Runner**: Jest with JSDOM" >> $GITHUB_STEP_SUMMARY
            echo "- **Coverage**: Generated and uploaded to Codecov" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Tests**: Some tests failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Common Issues & Fixes" >> $GITHUB_STEP_SUMMARY
            echo "- **LoggerFactory Migration**: Test assertions may need updates for new logging format" >> $GITHUB_STEP_SUMMARY
            echo "- **Expected**: \`TestComponent: Message\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Actual**: \`2025-XX-XX [DEBUG] ComponentName: Message\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🛠️ Troubleshooting Steps" >> $GITHUB_STEP_SUMMARY
            echo "1. Run \`npm test\` locally to see detailed test output" >> $GITHUB_STEP_SUMMARY
            echo "2. Update test assertions to match new LoggerFactory format" >> $GITHUB_STEP_SUMMARY
            echo "3. Check for async timing issues in component tests" >> $GITHUB_STEP_SUMMARY
            echo "4. Verify mock setups are compatible with structured logging" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: matrix.node-version == '20'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job 3: Build
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build
        env:
          SASS_SILENCE_DEPRECATIONS: legacy-js-api

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 30

      - name: 📏 Bundle size check
        run: |
          echo "## 📊 Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          find dist -name "*.js" -o -name "*.css" | head -10 | while read file; do
            size=$(du -h "$file" | cut -f1)
            echo "| $file | $size |" >> $GITHUB_STEP_SUMMARY
          done

  # Job 4: Preview Deployment (for PRs)
  preview:
    name: 🚀 Preview Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    permissions:
      contents: write
      pages: write
      pull-requests: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-files
          path: dist/

      - name: 🔧 Setup Git for deployment
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 🌍 Deploy to GitHub Pages Preview
        run: |
          # Clone the current repository into a temporary directory
          git clone https://github.com/${{ github.repository }}.git temp-repo
          cd temp-repo
          
          # Switch to or create gh-pages branch
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            git checkout gh-pages
          else
            git checkout --orphan gh-pages
            git rm -rf .
          fi
          
          # Create PR preview directory
          PR_DIR="pr-${{ github.event.number }}"
          mkdir -p $PR_DIR
          
          # Copy build files to PR directory
          cp -r ../dist/* $PR_DIR/
          
          # Create or update index.html for PR listing if it doesn't exist
          if [ ! -f "index.html" ]; then
            cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Opinion Front UI - Preview Deployments</title>
            <style>
              body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 40px; }
              .header { color: #0366d6; margin-bottom: 30px; }
              .pr-list { list-style: none; padding: 0; }
              .pr-item { background: #f6f8fa; margin: 10px 0; padding: 15px; border-radius: 6px; border: 1px solid #d1d5da; }
              .pr-link { text-decoration: none; color: #0366d6; font-weight: 600; }
              .pr-link:hover { text-decoration: underline; }
            </style>
          </head>
          <body>
            <h1 class="header">🚀 Opinion Front UI - PR Previews</h1>
            <p>Available preview deployments:</p>
            <ul class="pr-list" id="pr-list">
              <!-- PR links will be added here by deployment script -->
            </ul>
            <script>
              // Auto-discover PR directories
              fetch('.').then(r => r.text()).then(html => {
                const dirs = html.match(/href="pr-\\d+\\//g) || [];
                const list = document.getElementById('pr-list');
                dirs.forEach(dir => {
                  const prNum = dir.match(/pr-(\\d+)/)[1];
                  const li = document.createElement('li');
                  li.className = 'pr-item';
                  li.innerHTML = `<a href="pr-${prNum}/" class="pr-link">PR #${prNum} Preview</a>`;
                  list.appendChild(li);
                });
              });
            </script>
          </body>
          </html>
          EOF
          fi
          
          # Add and commit changes
          git add .
          git commit -m "Deploy PR #${{ github.event.number }} preview" || echo "No changes to commit"
          
          # Push to gh-pages branch
          git push origin gh-pages
          
          cd ..
          rm -rf temp-repo
          
          # Generate preview URL
          REPO_NAME="${{ github.event.repository.name }}"
          OWNER_NAME="${{ github.repository_owner }}"
          PREVIEW_URL="https://${OWNER_NAME}.github.io/${REPO_NAME}/pr-${{ github.event.number }}"
          
          echo "## 🚀 GitHub Pages Preview Deployment" >> $GITHUB_STEP_SUMMARY
          echo "✅ Preview successfully deployed to GitHub Pages!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Preview URL**: [$PREVIEW_URL]($PREVIEW_URL)" >> $GITHUB_STEP_SUMMARY
          echo "⏱️ **Deployed at**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Preview Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.head_ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: [`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- **PR**: [#${{ github.event.number }}](https://github.com/${{ github.repository }}/pull/${{ github.event.number }})" >> $GITHUB_STEP_SUMMARY
          echo "- **All Previews**: [Preview Index](https://${OWNER_NAME}.github.io/${REPO_NAME}/)" >> $GITHUB_STEP_SUMMARY
          
          echo "Preview deployed to: $PREVIEW_URL"
          echo "PREVIEW_URL=$PREVIEW_URL" >> $GITHUB_ENV

      - name: 💬 Comment on PR with preview link
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Check if we already commented
            const existingComment = comments.find(comment => 
              comment.body.includes('🚀 Preview Deployment') && 
              comment.user.login === 'github-actions[bot]'
            );
            
            const previewUrl = process.env.PREVIEW_URL;
            const commentBody = `## 🚀 Preview Deployment
            
            ✅ **Preview is ready!** Your changes have been deployed to GitHub Pages.
            
            🔗 **[View Preview](${previewUrl})**
            
            ---
            <details>
            <summary>📋 Deployment Details</summary>
            
            - **Branch**: \`${{ github.head_ref }}\`
            - **Commit**: ${{ github.sha }}
            - **Deployed at**: ${new Date().toISOString()}
            - **All Previews**: [Preview Index](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)
            
            </details>`;
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  # Job 5: Production Deployment (main branch only)
  deploy:
    name: 🚀 Production Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-files
          path: dist/

      - name: 🌍 Deploy to Production
        run: |
          echo "🚀 Production deployment would happen here"
          echo "## 🎉 Production Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "🌟 Your application has been deployed to production!" >> $GITHUB_STEP_SUMMARY
          echo "🔗 Live URL: https://your-domain.com" >> $GITHUB_STEP_SUMMARY

  # Job 6: Cleanup Preview (when PR is closed)
  cleanup-preview:
    name: 🧹 Cleanup Preview
    runs-on: ubuntu-latest
    if: github.event.action == 'closed' && github.event_name == 'pull_request'
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 🔧 Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: 🧹 Remove PR preview
        run: |
          # Clone repository and switch to gh-pages
          git clone https://github.com/${{ github.repository }}.git temp-repo
          cd temp-repo
          
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            git checkout gh-pages
            
            # Remove PR preview directory
            PR_DIR="pr-${{ github.event.number }}"
            if [ -d "$PR_DIR" ]; then
              rm -rf "$PR_DIR"
              git add .
              git commit -m "Remove preview for closed PR #${{ github.event.number }}" || echo "No changes to commit"
              git push origin gh-pages
              echo "Removed preview directory: $PR_DIR"
            else
              echo "Preview directory $PR_DIR not found - may already be cleaned up"
            fi
          else
            echo "No gh-pages branch found"
          fi
          
          cd ..
          rm -rf temp-repo
      
      - name: 💬 Update PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Find and update preview comment
            const previewComment = comments.find(comment => 
              comment.body.includes('🚀 Preview Deployment') && 
              comment.user.login === 'github-actions[bot]'
            );
            
            if (previewComment) {
              const updatedBody = previewComment.body + 
                '\n\n---\n☠️ **Preview Cleaned Up**: This preview has been removed since the PR was closed.';
              
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: previewComment.id,
                body: updatedBody
              });
            }

  # Job 7: Notification
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [quality, test, build]
    if: always()
    
    steps:
      - name: 📊 Pipeline Status
        run: |
          if [ "${{ needs.quality.result }}" == "success" ] && [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ Pipeline completed successfully!"
            echo "## ✅ CI Pipeline Success" >> $GITHUB_STEP_SUMMARY
            echo "All checks passed! Your code is ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Pipeline failed!"
            echo "## ❌ CI Pipeline Failed" >> $GITHUB_STEP_SUMMARY
            echo "Some checks failed. Please review the logs above." >> $GITHUB_STEP_SUMMARY
          fi