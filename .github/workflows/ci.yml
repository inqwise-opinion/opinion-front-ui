name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  CACHE_NAME: 'node-modules-v1'

jobs:
  # Job 1: Quality Checks (Lint, Format, Security)
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🎯 ESLint check
        run: |
          echo "## 🎯 ESLint Code Quality Check" >> $GITHUB_STEP_SUMMARY
          echo "Running ESLint analysis..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if npm run lint; then
            echo "✅ **ESLint**: No linting errors found" >> $GITHUB_STEP_SUMMARY
            echo "- **Configuration**: ESLint 9+ flat config" >> $GITHUB_STEP_SUMMARY
            echo "- **Rules**: TypeScript recommended + custom rules" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **ESLint**: Linting errors detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Quick Fixes" >> $GITHUB_STEP_SUMMARY
            echo "- Run \`npm run lint:fix\` to auto-fix issues" >> $GITHUB_STEP_SUMMARY
            echo "- Check [ESLint docs](https://eslint.org/docs/rules/) for rule details" >> $GITHUB_STEP_SUMMARY
            echo "- Review unused variables and \`any\` types" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: 📊 TypeScript compilation check
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 TypeScript Compilation" >> $GITHUB_STEP_SUMMARY
          echo "Checking TypeScript compilation..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if npx tsc --noEmit; then
            echo "✅ **TypeScript**: Compilation successful" >> $GITHUB_STEP_SUMMARY
            echo "- **Target**: ES2020" >> $GITHUB_STEP_SUMMARY
            echo "- **Strict mode**: Enabled" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **TypeScript**: Compilation errors detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Troubleshooting" >> $GITHUB_STEP_SUMMARY
            echo "- Check type definitions and imports" >> $GITHUB_STEP_SUMMARY
            echo "- Verify tsconfig.json configuration" >> $GITHUB_STEP_SUMMARY
            echo "- Run \`npx tsc --noEmit\` locally for details" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: 🔐 Security audit
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔐 Security Audit" >> $GITHUB_STEP_SUMMARY
          
          if npm audit --audit-level=moderate; then
            echo "✅ **Security**: No moderate or high vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security**: Vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
            echo "- Run \`npm audit fix\` to address issues" >> $GITHUB_STEP_SUMMARY
            echo "- Review [npm audit docs](https://docs.npmjs.com/cli/v7/commands/npm-audit)" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

  # Job 2: Tests
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['20', '22']
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: |
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "Running client-side tests with coverage..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if npm test -- --coverage --watchAll=false --maxWorkers=2; then
            echo "✅ **Tests**: All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "- **Environment**: Client-side JavaScript/TypeScript" >> $GITHUB_STEP_SUMMARY
            echo "- **Test Runner**: Jest with JSDOM" >> $GITHUB_STEP_SUMMARY
            echo "- **Coverage**: Generated and uploaded to Codecov" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Tests**: Some tests failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Common Issues & Fixes" >> $GITHUB_STEP_SUMMARY
            echo "- **LoggerFactory Migration**: Test assertions may need updates for new logging format" >> $GITHUB_STEP_SUMMARY
            echo "- **Expected**: \`TestComponent: Message\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Actual**: \`2025-XX-XX [DEBUG] ComponentName: Message\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🛠️ Troubleshooting Steps" >> $GITHUB_STEP_SUMMARY
            echo "1. Run \`npm test\` locally to see detailed test output" >> $GITHUB_STEP_SUMMARY
            echo "2. Update test assertions to match new LoggerFactory format" >> $GITHUB_STEP_SUMMARY
            echo "3. Check for async timing issues in component tests" >> $GITHUB_STEP_SUMMARY
            echo "4. Verify mock setups are compatible with structured logging" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: matrix.node-version == '20'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job 3: Build
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build
        env:
          SASS_SILENCE_DEPRECATIONS: legacy-js-api

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 30

      - name: 📏 Bundle size check
        run: |
          echo "## 📊 Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          find dist -name "*.js" -o -name "*.css" | head -10 | while read file; do
            size=$(du -h "$file" | cut -f1)
            echo "| $file | $size |" >> $GITHUB_STEP_SUMMARY
          done

  # Job 4: Preview Deployment (for PRs)
  preview:
    name: 🚀 Preview Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-files
          path: dist/

      - name: 🌍 Deploy to Preview
        run: |
          echo "🚀 Preview deployment would happen here"
          echo "Preview URL: https://preview-pr-${{ github.event.number }}.your-domain.com"
          echo "## 🚀 Preview Deployment" >> $GITHUB_STEP_SUMMARY
          echo "Your preview is ready at: https://preview-pr-${{ github.event.number }}.your-domain.com" >> $GITHUB_STEP_SUMMARY

  # Job 5: Production Deployment (main branch only)
  deploy:
    name: 🚀 Production Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-files
          path: dist/

      - name: 🌍 Deploy to Production
        run: |
          echo "🚀 Production deployment would happen here"
          echo "## 🎉 Production Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "🌟 Your application has been deployed to production!" >> $GITHUB_STEP_SUMMARY
          echo "🔗 Live URL: https://your-domain.com" >> $GITHUB_STEP_SUMMARY

  # Job 6: Notification
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [quality, test, build]
    if: always()
    
    steps:
      - name: 📊 Pipeline Status
        run: |
          if [ "${{ needs.quality.result }}" == "success" ] && [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ Pipeline completed successfully!"
            echo "## ✅ CI Pipeline Success" >> $GITHUB_STEP_SUMMARY
            echo "All checks passed! Your code is ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Pipeline failed!"
            echo "## ❌ CI Pipeline Failed" >> $GITHUB_STEP_SUMMARY
            echo "Some checks failed. Please review the logs above." >> $GITHUB_STEP_SUMMARY
          fi