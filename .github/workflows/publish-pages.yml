name: 📄 Publish to GitHub Pages

on:
  workflow_call:
    inputs:
      deployment_type:
        description: 'Type of deployment: preview, staging, production'
        required: true
        type: string
      pr_number:
        description: 'PR number for preview deployments'
        required: false
        type: string
      base_url:
        description: 'Base URL for the deployment'
        required: false
        type: string
        default: ''
      build_config:
        description: 'Build configuration to use'
        required: false
        type: string
        default: 'production'
      node_version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '20'
      discord_webhook:
        description: 'Send Discord notification'
        required: false
        type: boolean
        default: false
    outputs:
      deployment_url:
        description: 'The URL where the deployment is available'
        value: ${{ jobs.publish.outputs.deployment_url }}
      deployment_status:
        description: 'Status of the deployment'
        value: ${{ jobs.publish.outputs.deployment_status }}

env:
  NODE_VERSION: ${{ inputs.node_version }}

jobs:
  publish:
    name: 🚀 Publish to Pages
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pages: write
      pull-requests: write
    
    outputs:
      deployment_url: ${{ steps.deploy.outputs.deployment_url }}
      deployment_status: ${{ steps.deploy.outputs.deployment_status }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏧 Build application
        run: npm run build
        env:
          SASS_SILENCE_DEPRECATIONS: legacy-js-api
          BUILD_CONFIG: ${{ inputs.build_config }}
          RUNTIME_BASE_URL: ${{ inputs.base_url }}

      - name: 🔧 Setup Git for deployment
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 🚀 Deploy to GitHub Pages
        id: deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEPLOYMENT_TYPE: ${{ inputs.deployment_type }}
          PR_NUMBER: ${{ inputs.pr_number }}
        run: |
          # Clone the current repository into a temporary directory
          git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git temp-repo
          cd temp-repo

          # Switch to or create gh-pages branch
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            git checkout gh-pages
          else
            git checkout --orphan gh-pages
            git rm -rf .
          fi

          # Determine deployment directory and URL based on type
          case "$DEPLOYMENT_TYPE" in
            "preview")
              if [ -z "$PR_NUMBER" ]; then
                echo "Error: PR number required for preview deployments"
                exit 1
              fi
              DEPLOY_DIR="pr-$PR_NUMBER"
              DEPLOYMENT_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-$PR_NUMBER"
              COMMIT_MESSAGE="Deploy PR #$PR_NUMBER preview"
              ;;
            "staging")
              DEPLOY_DIR="staging"
              DEPLOYMENT_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/staging"
              COMMIT_MESSAGE="Deploy staging environment"
              ;;
            "production")
              DEPLOY_DIR="."
              DEPLOYMENT_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
              COMMIT_MESSAGE="Deploy production release"
              ;;
            *)
              echo "Error: Unknown deployment type: $DEPLOYMENT_TYPE"
              exit 1
              ;;
          esac

          echo "Deploying to directory: $DEPLOY_DIR"
          echo "Deployment URL: $DEPLOYMENT_URL"

          # Create deployment directory if needed
          if [ "$DEPLOY_DIR" != "." ]; then
            mkdir -p "$DEPLOY_DIR"
            # Copy build files to deployment directory
            cp -r ../dist/* "$DEPLOY_DIR/"
          else
            # For production, copy to root
            cp -r ../dist/* ./
          fi

          # Copy global 404.html from .github folder to gh-pages root (if not production root)
          if [ "$DEPLOYMENT_TYPE" != "production" ] && [ -f "../.github/404.html" ]; then
            cp ../.github/404.html ./404.html
          fi

          # Create or update index.html for deployment listing (only for preview/staging)
          if [ "$DEPLOYMENT_TYPE" = "preview" ] || [ "$DEPLOYMENT_TYPE" = "staging" ]; then
            if [ ! -f "index.html" ] || [ "$DEPLOYMENT_TYPE" = "preview" ]; then
              cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Opinion Front UI - Deployments</title>
            <style>
              body { 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; 
                margin: 40px; 
                background: #f6f8fa; 
              }
              .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
              .header { color: #0366d6; margin-bottom: 30px; border-bottom: 2px solid #e1e4e8; padding-bottom: 20px; }
              .deployment-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 30px 0; }
              .deployment-card { 
                background: #f6f8fa; 
                padding: 20px; 
                border-radius: 8px; 
                border: 1px solid #d1d5da; 
                transition: all 0.2s;
              }
              .deployment-card:hover { transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.1); }
              .deployment-link { text-decoration: none; color: #0366d6; font-weight: 600; font-size: 18px; }
              .deployment-link:hover { text-decoration: underline; }
              .deployment-type { 
                display: inline-block; 
                padding: 4px 8px; 
                border-radius: 12px; 
                font-size: 12px; 
                font-weight: 600; 
                margin-bottom: 10px; 
              }
              .preview { background: #fff3cd; color: #856404; }
              .staging { background: #d4edda; color: #155724; }
              .production { background: #d1ecf1; color: #0c5460; }
              .description { color: #586069; margin-top: 8px; font-size: 14px; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1 class="header">🚀 Opinion Front UI - Deployments</h1>
              <p>Available deployment environments:</p>
              
              <div class="deployment-grid">
                <!-- Production -->
                <div class="deployment-card">
                  <div class="deployment-type production">PRODUCTION</div>
                  <a href="./" class="deployment-link">Production Site</a>
                  <div class="description">Live production environment</div>
                </div>
                
                <!-- Staging -->
                <div class="deployment-card">
                  <div class="deployment-type staging">STAGING</div>
                  <a href="./staging/" class="deployment-link">Staging Environment</a>
                  <div class="description">Pre-production testing environment</div>
                </div>
              </div>
              
              <h2>🔬 PR Previews</h2>
              <div class="deployment-grid" id="pr-list">
                <!-- PR links will be added here by deployment script -->
              </div>
              
              <script>
                // Auto-discover PR directories
                fetch('.').then(r => r.text()).then(html => {
                  const dirs = html.match(/href="pr-\\d+\\//g) || [];
                  const list = document.getElementById('pr-list');
                  
                  if (dirs.length === 0) {
                    list.innerHTML = '<p style="color: #586069; grid-column: 1/-1;">No PR previews available</p>';
                    return;
                  }
                  
                  dirs.forEach(dir => {
                    const prNum = dir.match(/pr-(\\d+)/)[1];
                    const card = document.createElement('div');
                    card.className = 'deployment-card';
                    card.innerHTML = `
                      <div class="deployment-type preview">PREVIEW</div>
                      <a href="pr-${prNum}/" class="deployment-link">PR #${prNum}</a>
                      <div class="description">Preview deployment for pull request #${prNum}</div>
                    `;
                    list.appendChild(card);
                  });
                }).catch(() => {
                  document.getElementById('pr-list').innerHTML = '<p style="color: #586069; grid-column: 1/-1;">Unable to load PR previews</p>';
                });
              </script>
            </div>
          </body>
          </html>
          EOF
            fi
          fi

          # Add and commit changes
          git add .
          if git commit -m "$COMMIT_MESSAGE" 2>/dev/null; then
            echo "Changes committed successfully"
          else
            echo "No changes to commit"
          fi

          # Push to gh-pages branch
          git push origin gh-pages

          # Cleanup
          cd ..
          rm -rf temp-repo

          # Output deployment info
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "deployment_status=success" >> $GITHUB_OUTPUT
          
          echo "## 🚀 GitHub Pages Deployment" >> $GITHUB_STEP_SUMMARY
          echo "✅ Successfully deployed to GitHub Pages!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Deployment URL**: [$DEPLOYMENT_URL]($DEPLOYMENT_URL)" >> $GITHUB_STEP_SUMMARY
          echo "📁 **Deployment Type**: $DEPLOYMENT_TYPE" >> $GITHUB_STEP_SUMMARY
          echo "⏱️ **Deployed at**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$DEPLOYMENT_TYPE" = "preview" ]; then
            echo "### 📋 Preview Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch**: ${{ github.head_ref }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit**: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
            echo "- **PR**: [#$PR_NUMBER](https://github.com/${{ github.repository }}/pull/$PR_NUMBER)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **All Deployments**: [Deployment Index](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)" >> $GITHUB_STEP_SUMMARY

      - name: 💬 Comment on PR (for previews)
        if: inputs.deployment_type == 'preview' && inputs.pr_number
        uses: actions/github-script@v8
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.pr_number }},
            });

            // Check if we already commented
            const existingComment = comments.find(comment =>
              comment.body.includes('🚀 Preview Deployment') &&
              comment.user.login === 'github-actions[bot]'
            );

            const previewUrl = '${{ steps.deploy.outputs.deployment_url }}';
            const commentBody = `## 🚀 Preview Deployment

            ✅ **Preview is ready!** Your changes have been deployed to GitHub Pages.

            🔗 **[View Preview](${previewUrl})**

            ---
            <details>
            <summary>📋 Deployment Details</summary>

            - **Branch**: \`${{ github.head_ref }}\`
            - **Commit**: ${{ github.sha }}
            - **Deployed at**: ${new Date().toISOString()}
            - **All Deployments**: [Deployment Index](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)

            </details>`;

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ inputs.pr_number }},
                body: commentBody
              });
            }

      - name: 📢 Send Discord notification
        if: inputs.discord_webhook == true
        run: |
          # Check if Discord webhook URL is available
          if [ -z "${{ vars.WEBHOOK_URL }}" ]; then
            echo "Discord webhook requested but WEBHOOK_URL variable not set. Skipping notification."
            exit 0
          fi
          
          # Determine emoji and color based on deployment type
          case "${{ inputs.deployment_type }}" in
            "preview")
              EMOJI="🔬"
              COLOR="3447003"  # Blue
              TITLE="Preview Deployment"
              ;;
            "staging")
              EMOJI="🧪"
              COLOR="16776960"  # Yellow
              TITLE="Staging Deployment"
              ;;
            "production")
              EMOJI="🚀"
              COLOR="65280"  # Green
              TITLE="Production Deployment"
              ;;
            *)
              EMOJI="📦"
              COLOR="8421504"  # Gray
              TITLE="Deployment"
              ;;
          esac

          # Create Discord webhook payload
          DISCORD_PAYLOAD=$(cat << EOF
          {
            "embeds": [{
              "title": "${EMOJI} ${TITLE}",
              "description": "Deployment completed successfully!",
              "color": ${COLOR},
              "url": "${{ steps.deploy.outputs.deployment_url }}",
              "fields": [
                {
                  "name": "🔗 URL",
                  "value": "[${{ steps.deploy.outputs.deployment_url }}](${{ steps.deploy.outputs.deployment_url }})",
                  "inline": false
                },
                {
                  "name": "📁 Type",
                  "value": "${{ inputs.deployment_type }}",
                  "inline": true
                },
                {
                  "name": "🌿 Branch",
                  "value": "${{ github.head_ref || github.ref_name }}",
                  "inline": true
                },
                {
                  "name": "⏱️ Time",
                  "value": "$(date -u +"%Y-%m-%d %H:%M UTC")",
                  "inline": true
                }
              ],
              "footer": {
                "text": "GitHub Actions • Opinion Front UI"
              }
            }]
          }
          EOF
          )

          # Send to Discord
          curl -H "Content-Type: application/json" \
               -d "$DISCORD_PAYLOAD" \
               "${{ vars.WEBHOOK_URL }}"
