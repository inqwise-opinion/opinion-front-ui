name: 🧪 Staging Deployment

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      discord_notification:
        description: 'Send Discord notification'
        required: false
        type: boolean
        default: true

env:
  NODE_VERSION: "20"

jobs:
  # Quality checks and tests
  validate:
    name: 🔍 Validate Code
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🎯 ESLint check
        run: npm run lint

      - name: 🧪 Run tests
        run: npm test -- --watchAll=false --coverage --maxWorkers=2

      - name: 📊 TypeScript compilation check
        run: npx tsc --noEmit

  # Staging deployment using centralized workflow
  deploy-staging:
    name: 🧪 Deploy to Staging
    needs: validate
    uses: ./.github/workflows/publish-pages.yml
    with:
      deployment_type: "staging"
      base_url: "/${{ github.event.repository.name }}/staging"
      build_config: "github-pages-staging" 
      node_version: "20"
      discord_webhook: ${{ github.event_name == 'workflow_dispatch' && inputs.discord_notification || github.event_name == 'push' }}
    secrets: inherit

  # Post-deployment validation
  validate-deployment:
    name: ✅ Validate Deployment
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: needs.deploy-staging.outputs.deployment_status == 'success'
    
    steps:
      - name: 🌐 Check deployment availability
        run: |
          STAGING_URL="${{ needs.deploy-staging.outputs.deployment_url }}"
          echo "Testing deployment at: $STAGING_URL"
          
          # Wait a moment for deployment to be available
          sleep 10
          
          # Check if the site is accessible
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$STAGING_URL" || echo "000")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ Staging deployment is accessible!"
            echo "## 🎉 Staging Deployment Successful" >> $GITHUB_STEP_SUMMARY
            echo "✅ Staging environment is live and accessible at [$STAGING_URL]($STAGING_URL)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Staging deployment returned HTTP $HTTP_STATUS"
            echo "## ❌ Staging Deployment Issue" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ Staging environment returned HTTP status: $HTTP_STATUS" >> $GITHUB_STEP_SUMMARY
            echo "🔗 URL checked: [$STAGING_URL]($STAGING_URL)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi