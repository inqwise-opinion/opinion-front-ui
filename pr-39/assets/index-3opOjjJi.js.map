{"version":3,"mappings":"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","names":["UserRole","OpinionStatus","key","computer","newValue","currentValue","InternalLogLevel","getInternalLogger","name","provider","INTERNAL_LOGGING_SETTINGS","level","fnOutput","InternalLoggerImpl$1","msg","error","InternalProviderImpl$1","InternalProviderImpl","EnhancedMap","InternalLoggerImpl","logger","_fnOutput","InternalLogger","LogLevel","toLogLevel","val","CoreLoggerImpl","runtime","message","args","logMessageType","nowMillis","errorAndArgs","value","errorResult","dateFormatted","levelAsStr","names","argsFormatted","arg","actualArgs","value0","errorOrArgs","padStart","length","fillChar","padInternal","padEnd","maxLengthStringValueInArray","arr","v","previous","current","padType","charsNeeded","padding","i","formatArgument","formatDate","millisSinceEpoch","date","year","month","day","hours","minutes","seconds","millis","ConsoleLogChannel$1","DefaultChannels","createConsoleChannel","ConsoleLogChannel","LogProviderImpl","settings","log","currentKey","result","currentSettings","createLogProvider","index","log4TSGroupConfigDebug","config","log4TSConfigDebug","groupLog","g","Log4TSProviderImpl","defaultConfig","groupConfigs","updatedConfig","groupProvLog","e","identifier","groupConfig","cfg","runtimeSettings","Log4TSControlProviderImpl","messageChannel","maxWidthIndex","maxWidthIdentifier","maxWidthLevel","providerLines","index$1","groupId","newLevel","groups","expectedGroup","data","logRestoreFailures","finalLogRestoreFailures","savedData","saveData","logCannotRestore","group","Log4TSProviderService","mainConfig","mergeLog4TSConfigs","createDefaultLog4TSConfig","validateLog4TSConfig","defaultExpression","defaultGroupConfig","fnValue","fnMessageChannel","id","maxWidthName","lines","entry","providers","LOG4TS_PROVIDER_SERVICE","lhs","rhs","mergeLog4TSGroupConfigs","Log4TSProvider","createProvider","clear","Logger","log4tsLogger","errorOrFirstArg","remainingArgs","errorObj","allArgs","ChannelType","LogFormatPresets","interpolatePlaceholders","argsArray","argIndex","processedMessage","formatRemainingArgs","ChannelFactory","format","logMessage","logMsg","timestamp","now","time","preFormattedMatch","formattedArgs","interpolatedMessage","formattedOutput","loggerName","actualMessage","channel","libMsg","exception","errorMatch","ourMsg","formatArg","_config","_logMessage","nonMultiChannels","ch","channels","channelConfig","rawMessage","AsyncConsumerLogChannel","consumer","item","consumerPromises","err","onErrorErr","parseLogLevel","mapLogLevel","LibLogLevel","_LoggerFactory","loadedConfig","nameOrClass","channelName","consumersSet","consumers","parsedConfig","appender","parsedAppender","parsedGroup","fs","configPath","configData","tsConfig","processedGroups","processedGroup","finalConfig","appenders","multiAppenderChannel","allGroups","groupPattern","logName","appenderChannel","formattedMessage","messageLevel","appenderLevelValue","logLevel","ourLogMessage","formatted","LoggerFactory","_MockApiService","resolve","days","completed","partial","dateStr","completedCount","partialCount","totalCompleted","sum","count","totalPartial","params","surveys","a","b","MockApiService","LayoutEventFactory","context","viewport","modeType","previousModeType","compactMode","previousCompactMode","blockedReason","requestedAction","trigger","isVisible","previousVisibility","type","event","readyData","modeData","sidebarData","mobileMenuRequestData","sidebarRequestData","mobileMenuData","userMenuRequestData","userMenuData","mobileNote","previousNote","blockedNote","changeNote","requestIcon","requestTriggerNote","actionIcon","toggleTriggerNote","stateChange","userActionIcon","userTriggerNote","userStateChange","eventType","UserMenu","parentContainer","layoutContext","style","userMenuHtml","eventData","closeButton","target","arrow","mobileDropdown","wasOpen","targetState","user","existingMobileDropdown","username","email","computedStyles","existingBackdrop","backdrop","items","menuItemsContainer","menuItemsHTML","href","action","className","color","hasClickHandler","hasHref","getBreadcrumbItemAction","BreadcrumbsComponent","clickHandler","breadcrumbElement","breadcrumbId","breadcrumbItem","existing","initialLength","updates","breadcrumbsList","breadcrumbsHTML","isLast","isClickable","content","listener","element","handler","ServiceError","serviceName","operation","EventBusError","code","eventName","EventBusImpl","options","firstConsumer","c","timeout","reject","timeoutMs","timeoutId","response","active","events","HotkeyExecutionContextImpl","currentProvider","chainIndex","chainLength","providerChain","providerId","ChainHotkeyManagerImpl","modifiers","callStack","providersWithHandlers","enabledHandlers","h","logEntry","enabled","hotkeys","handlers","p","ChainHotkeyMigration","AuthenticationError","cause","ServiceReference","service","lastError","attempt","availableServices","ms","LayoutContextImpl","isMobile","isTablet","layoutModeType","oldModeType","newViewPort","newModeType","layoutModeTypeChanged","wrappedListener","sidebar","header","footer","mainContent","messages","unregister","_timeout","component","unregisteredCount","eventNames","componentConsumers","page","previousPage","activePage","_previousPage","serviceId","existingService","wasRegistered","initPromises","errors","destroyPromises","servicesArray","errorMessage","isCritical","errorStack","totalUnregistered","layoutContextInstance","getLayoutContext","AppHeaderImpl","headerContainer","appLayout","mobileToggleHtml","breadcrumbsHtml","brandLogoHtml","breadcrumbsContainer","userMenuContainer","actionElement","_event","requestEvent","mobileMenuToggle","_element","AppHeaderBinderService","__vitePreload","AppHeaderBinderService$1","binderService","title","finalTitle","finalHref","logo","brandText","brandLogo","titleParts","visible","selector","observer","ctx","isCompact","layoutModeChangeUnsubscribe","compactModeChangeUnsubscribe","unsubscribe","containerDimensions","issues","warnings","currentTime","uptime","AppFooterImpl","el","footerContainer","navigationHtml","copyrightHtml","link","layoutData","cls","hasNavigationLinks","BaseComponent","MainContentImpl","loading","loadingIndicator","errorElement","sidebarDimensionsUnsubscribe","sidebarCompactMode","layoutMobile","activeContentElement","hasContent","BUILD_CONFIGS","getBuildConfig","define_BUILD_CONFIG_default","buildConfig","appConfig","getFullPath","path","normalizedPath","getRoutePath","fullPath","isHomepage","pageId","SidebarComponent","sidebarHeader","navigationContainer","isActive","ariaCurrent","badge","child","captionHtml","expandableButton","navLink","button","navId","isExpanded","submenu","navItem","targetLink","navList","text","copyrightText","show","footerEl","compact","callback","toggleButton","toggleIcon","computedStyle","transitionProperty","transitionDuration","handleTransitionEnd","isCurrentlyVisible","newVisibility","width","currentModeType","requestData","isDesktop","canToggle","currentWidth","isMobileMenuVisible","MessagesComponent","prefix","counter","pixelOffset","messageId","messageElement","effectiveIndex","offsetX","offsetY","zIndex","overflowValue","messageWithDefaults","timer","includesPersistent","messagesToRemove","messageEl","unsafe","description","domMessages","cleanedCount","activeMessages","messagesByType","m","persistentErrors","isLifecycleHandler","Layout","sidebarConfig","sidebarCopyright","layoutReadyUnsubscribe","layoutModeUnsubscribe","layoutMode","components","modeClasses","stateClasses","body","root","position","navService","contextHandler","_priority","services","priority","lifecycleHandler","factory","_dependencies","registration","handlerType","startTime","errorHandlerError","fn","sortedRegistrations","priorityA","registered","AUTH_EVENTS","createAuthEvent","payload","AuthEventFactory","BaseService","initTime","serviceError","emoji","eventBus","AuthenticatedUser","accountId","authenticatedAt","authResponse","obj","registerService","ServiceClass","instance","validateServiceIdentity","serviceClass","_MockSessionAuthProvider","mockApiService","authInfo","authError","wasAuthenticated","previousUser","targetAccount","acc","customDelay","delay","ServiceReference$1","MockSessionAuthProvider","_AuthService","authenticatedUser","authProviderServiceId","AuthService","ComponentReference","componentName","resolver","_AppHeaderRef","AppHeaderRef","_AppHeaderBinderService","authServiceRef","force","authService","appHeader","headerUser","_userMenu","_UserService","accounts","authServiceId","sessionAuthProviderServiceId","sessionAuthProviderService","UserService","DEFAULT_DELIMITER","NOOP_VALUE","ID_START","ID_CONTINUE","DEBUG_URL","SIMPLE_TOKENS","escape","str","lexer","chars","pos","Iter","tokens","next","token","nextType","TokenData","parse","encodePath","it","consume","endType","param","wildcard","match","decode","delimiter","regexp","keys","pathToRegexp","decoders","input","decoder","end","sensitive","trailing","sources","flags","seq","flatten","sequenceToRegExp","pattern","init","fork","backtrack","isSafeSegmentParam","negate","matchRoute","route","baseUrl","pathname","parentParams","matchResult","childMatches","childIndex","routeToSkip","rt","childRoute","childMatch","resolveRoute","isChildRoute","parentRoute","UniversalRouter","routes","pathnameOrContext","matches","nextMatches","currentContext","resume","parent","prevResult","RouteContextImpl","basePath","HierarchicalBreadcrumbsManagerImpl","enableLogging","pageIdLower","fallbackIndex","allItems","scopeIndex","parentItems","scopedItems","newScopedItems","scopeData","newFullTrail","itemIndex","isFallbackMode","scopeType","PageContextImpl","routeContext","pageInfo","pageProvider","PageComponent","pageContext","container","methodName","dropdown","titleElement","loadingMessage","required","DashboardPage","auth","surveySelect","statusButton","createSurveyButton","cookieAccountId","account","chartData","surveysSelect","survey","option","tableBody","row","today","dateRangeValue","welcomeContainer","total","completionRate","chartContainer","num","parts","returnUrl","DebugPage","targetElement","testCompactMode","testUserMenu","isToggling","testViewportInfo","testMobileToggle","clearConsole","console","testHotkeysManual","msgError","alternativeMessages","msgWarning","msgInfo","msgSuccess","msgWithAction","msgPersistent","msgAutoHide","msgSequence","clearAllMessages","clearErrorsOnly","clearPersistent","step","steps","runNextStep","isSidebarCompact","isSidebarVisible","viewportInfo","sidebarDimensions","getBreakpointStatus","pixelRatio","actualPixels","modeColor","compactInfo","hotkeyStatus","ourHotkeys","hotkeyCount","chainManagerStatus","totalProviders","globalListenerStatus","hasUnsubscriber","isInitialized","debugPageRegistered","hotkeyBreakdown","categories","k","layoutStatus","subscriberCount","eventBusEventCount","debugInfo","headerProvider","sidebarProvider","messagesProvider","mainProvider","footerProvider","footerDetails","sidebarFunctional","messagesFunctional","eventBusStatus","statusContainer","statusHtml","formatComponentStatus","status","lastAction","bgColor","borderColor","statusColor","componentId","quickStatus","quickStatusText","html","listeners","state","stateInfo","types","_","issue","perf","perfInfo","totalComponents","componentsWithStatus","refreshBtn","detailsEl","toggleEl","componentBoxes","expand","toggleAllBtn","anyCollapsed","testConsole","logElement","startBtn","stopBtn","clearBtn","triggerBtn","refreshStatusBtn","layoutCtx","subscribe","dataPreview","typedEvent","consoleEl","statsEl","counts","_ctx","handled","debugListener","normalizedKey","registeredKeys","registeredShiftKeys","breadcrumbSingle","breadcrumbMulti","breadcrumbLinks","breadcrumbActions","breadcrumbClear","breadcrumbAdd","breadcrumbRemove","breadcrumbUpdate","breadcrumbStatus","headerBasic","headerComplex","headerInteractive","headerComponentStatus","headerDirectAdd","headerDirectRemove","headerDirectUpdate","headerDirectClear","breadcrumbsManager","newItem","currentItems","itemToRemove","itemToUpdate","breadcrumbsComponent","breadcrumb","lastItem","firstItem","AccountRootPage","mainElement","profileInfo","usageStats","billingInfo","teamList","AccountSettingsPage","form","nameInput","emailInput","emailNotifications","timezoneSelect","formData","LoginPage","EntityRouter","entityName","matchingRoute","routePattern","SurveyListPage","listContainer","SurveyDetailPage","contentContainer","_SurveysRouter","SurveysRouter","RouteContextWrapper","originalContext","wrappedPath","wrappedBasePath","PUBLIC_ROUTES","FEATURE_ROUTES","surveysRouter","subPath","wrappedContext","ErrorPage","__vite_default__","errorPage","ACCOUNT_ROUTES","ALL_ROUTES","authMiddleware","_RouterService","routePath","currentPath","normalizedRoutes","processRoute","stringParams","processedRoutes","newPage","routeError","url","urlObj","originalPush","delta","segments","segment","breadcrumbs","errorCode","errorDetails","errorParams","RouterService","DEFAULT_NAVIGATION_ITEMS","_SidebarRef","SidebarRef","_NavigationServiceImpl","initialItems","currentActivePage","structure","rootItem","childItem","navigationItemId","pageToNavMap","pageName","validIds","NavigationServiceImpl","_LinkInterceptionService","mouseEvent","router","routerService","LinkInterceptionService","MessagesLogAdapter","messageType","fallbackError","levelUpper","cleanName","l","argsStr","_OpinionApp","ex","adapter","mockAuthProvider","userService","appHeaderBinderService","navigationService","linkInterceptionService","messageData","OpinionApp","globalErrorHandler","globalRejectionHandler","waitForResourcesAndInit","initApp","app","appErrorHandler"],"ignoreList":[1,2,42,43],"sources":["../../src/types/index.ts","../../node_modules/typescript-logging-log4ts-style/dist/bundle/typescript-logging-log4ts.esm.js","../../node_modules/typescript-logging/dist/bundle/typescript-logging.esm.js","../../src/logging/Logger.ts","../../src/logging/types.ts","../../src/logging/ChannelTypes.ts","../../src/logging/ChannelFactory.ts","../../src/logging/AsyncConsumerLogChannel.ts","../../src/logging/LoggerFactory.ts","../../src/services/MockApiService.ts","../../src/contexts/LayoutEventFactory.ts","../../src/components/UserMenu.ts","../../src/interfaces/BreadcrumbItem.ts","../../src/components/BreadcrumbsComponent.ts","../../src/interfaces/Service.ts","../../src/lib/EventBus.ts","../../src/lib/EventBusImpl.ts","../../src/hotkeys/ChainHotkeyManagerImpl.ts","../../src/auth/exceptions/AuthenticationExceptions.ts","../../src/services/ServiceReference.ts","../../src/contexts/LayoutContextImpl.ts","../../src/contexts/index.ts","../../src/components/AppHeaderImpl.ts","../../src/components/AppFooterImpl.ts","../../src/components/BaseComponent.ts","../../src/components/MainContentImpl.ts","../../src/config/build.config.ts","../../src/config/app.ts","../../src/components/SidebarComponent.ts","../../src/components/MessagesComponent.ts","../../src/types/LayoutHandlers.ts","../../src/components/Layout.ts","../../src/auth/AuthEvents.ts","../../src/services/BaseService.ts","../../src/auth/AuthenticatedUser.ts","../../src/core/ServiceIdentity.ts","../../src/auth/MockSessionAuthProvider.ts","../../src/auth/AuthService.ts","../../src/components/ComponentReference.ts","../../src/components/AppHeader.ts","../../src/services/AppHeaderBinderService.ts","../../src/services/UserService.ts","../../node_modules/universal-router/path-to-regexp.js","../../node_modules/universal-router/universal-router.js","../../src/router/RouteContextImpl.ts","../../src/contexts/HierarchicalBreadcrumbsManagerImpl.ts","../../src/contexts/PageContextImpl.ts","../../src/components/PageComponent.ts","../../src/pages/DashboardPage.ts","../../src/pages/DebugPage.ts","../../src/pages/account/AccountRootPage.ts","../../src/pages/account/AccountSettingsPage.ts","../../src/pages/auth/LoginPage.ts","../../src/router/EntityRouter.ts","../../src/pages/surveys/SurveyListPage.ts","../../src/pages/surveys/SurveyDetailPage.ts","../../src/router/SurveysRouter.ts","../../src/router/RouteContextWrapper.ts","../../src/router/routes.ts","../../src/router/middleware/auth.ts","../../src/router/RouterService.ts","../../src/config/navigation.ts","../../src/components/Sidebar.ts","../../src/services/navigation/NavigationServiceImpl.ts","../../src/services/LinkInterceptionService.ts","../../src/adapters/MessagesLogAdapter.ts","../../src/app.ts","../../src/main.ts"],"sourcesContent":["/**\n * Type definitions for Opinion Front UI\n * Migration from servlet-based application types\n */\n\n// Base API response structure\nexport interface ApiResponse<T = unknown> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  message?: string;\n}\n\n// User types (migrated from servlet session)\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  role: UserRole;\n  created: Date;\n  lastLogin?: Date;\n}\n\nexport enum UserRole {\n  ADMIN = 'admin',\n  USER = 'user',\n  MODERATOR = 'moderator'\n}\n\n// Opinion/Content types\nexport interface Opinion {\n  id: number;\n  title: string;\n  content: string;\n  author: User;\n  created: Date;\n  updated?: Date;\n  status: OpinionStatus;\n  tags: string[];\n}\n\n// Survey types (for MockApiService compatibility)\nexport interface Survey {\n  id: number;\n  title: string;\n  description: string;\n  status: OpinionStatus;\n  created: Date;\n  updated?: Date;\n  responses: number;\n  completionRate: number;\n}\n\nexport enum OpinionStatus {\n  DRAFT = 'draft',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n  PUBLISHED = 'published',\n  ARCHIVED = 'archived'\n}\n\n// Application state types\nexport interface AppState {\n  user: User | null;\n  loading: boolean;\n  error: string | null;\n}\n\n// Event types for application events\nexport interface AppEvent {\n  type: string;\n  payload?: unknown;\n  timestamp: Date;\n}\n\n// API endpoint configuration\nexport interface ApiConfig {\n  baseUrl: string;\n  timeout: number;\n  headers: Record<string, string>;\n}\n","/**\n * Extends Map and adds a few convenient functions.\n */\nclass EnhancedMap extends Map {\n    /**\n     * If key has a mapping already returns the currently associated value. If\n     * there is no mapping, calls the computer which must return a value V.\n     * The value is then stored for given key and returned.\n     * @param key Key\n     * @param computer Computer which is called only if key has no mapping yet.\n     * @return Existing value if the key already existed, or the newly computed value.\n     */\n    computeIfAbsent(key, computer) {\n        if (this.has(key)) {\n            return this.get(key);\n        }\n        const newValue = computer(key);\n        this.set(key, newValue);\n        return newValue;\n    }\n    /**\n     * If the key exists already calls given computer, if the key does not exist\n     * this method does nothing.\n     *\n     * The computer is called with current key and current value associated. The\n     * computer can return a (new) value V or undefined. When undefined is returned\n     * the key is removed from this map, when a V is returned the key is updated\n     * with the new value V.\n     * @param key Key\n     * @param computer Computer which is called only if the key has a mapping already\n     * @return Undefined if the key has no mapping, otherwise the value returned from computer\n     */\n    computeIfPresent(key, computer) {\n        const currentValue = this.get(key);\n        if (currentValue === undefined) {\n            return undefined;\n        }\n        const newValue = computer(key, currentValue);\n        if (newValue !== undefined) {\n            this.set(key, newValue);\n        }\n        else {\n            this.delete(key);\n        }\n        return newValue;\n    }\n    /**\n     * Computes a value for given key, the computer can return a value V (in which case the map\n     * will set the value for given key), if it returns undefined the mapping for key K will be\n     * removed.\n     * @param key Key to compute\n     * @param computer Computer which is called, note that the currentValue argument contains the existing\n     *                 value or is undefined when no mapping exists for the key.\n     * @return The newly computed value\n     */\n    compute(key, computer) {\n        const currentValue = this.get(key);\n        const newValue = computer(key, currentValue);\n        if (newValue) {\n            this.set(key, newValue);\n        }\n        else {\n            this.delete(key);\n        }\n        return newValue;\n    }\n}\n\n/**\n * Internal log level (note: do NOT use LogLevel, or we get circular loading issues!)\n */\nvar InternalLogLevel;\n(function (InternalLogLevel) {\n    InternalLogLevel[InternalLogLevel[\"Trace\"] = 0] = \"Trace\";\n    InternalLogLevel[InternalLogLevel[\"Debug\"] = 1] = \"Debug\";\n    InternalLogLevel[InternalLogLevel[\"Info\"] = 2] = \"Info\";\n    InternalLogLevel[InternalLogLevel[\"Warn\"] = 3] = \"Warn\";\n    InternalLogLevel[InternalLogLevel[\"Error\"] = 4] = \"Error\";\n})(InternalLogLevel || (InternalLogLevel = {}));\n/**\n * Internal logger, this is NOT for end users. Instead this is used to enable logging for typescript-logging itself in case of problems.\n *\n * @param name Name of logger\n */\nfunction getInternalLogger(name) {\n    return provider.getLogger(name);\n}\n/**\n * Can be used to change the *internal* logging of the library.\n * Has no effect on end user logging.\n *\n * As such should normally not be used by end users.\n */\nconst INTERNAL_LOGGING_SETTINGS = {\n    /**\n     * Changes the log level for the internal logging (for all new and existing loggers)\n     * @param level New log level\n     */\n    setInternalLogLevel: (level) => provider.changeLogLevel(level),\n    /**\n     * Changes where messages are written to for all new and existing loggers),\n     * by default they are written to the console.\n     * @param fnOutput Function to write messages to\n     */\n    setOutput: (fnOutput) => provider.changeOutput(fnOutput),\n    /**\n     * Resets the log level and output back to defaults (level to error and writing to console)\n     * for all new and existing loggers.\n     */\n    reset: () => provider.reset(),\n};\nclass InternalLoggerImpl {\n    constructor(name, level, fnOutput) {\n        this._name = name;\n        this._level = level;\n        this._fnOutput = fnOutput;\n    }\n    trace(msg) {\n        this.log(InternalLogLevel.Trace, msg);\n    }\n    debug(msg) {\n        this.log(InternalLogLevel.Debug, msg);\n    }\n    error(msg, error) {\n        this.log(InternalLogLevel.Error, msg, error);\n    }\n    info(msg) {\n        this.log(InternalLogLevel.Info, msg);\n    }\n    warn(msg, error) {\n        this.log(InternalLogLevel.Warn, msg, error);\n    }\n    setLevel(level) {\n        this._level = level;\n    }\n    setOutput(fnOutput) {\n        this._fnOutput = fnOutput;\n    }\n    log(level, msg, error) {\n        if (this._level > level) {\n            return;\n        }\n        // tslint:disable-next-line:no-console\n        this._fnOutput(`${InternalLogLevel[this._level].toString()} <INTERNAL LOGGER> ${this._name} ${msg()}${error ? \"\\n\" + error.stack : \"\"}`);\n    }\n}\nclass InternalProviderImpl {\n    constructor() {\n        this._loggers = new EnhancedMap();\n        this._logLevel = InternalLogLevel.Error;\n        this._fnOutput = InternalProviderImpl.logConsole;\n    }\n    getLogger(name) {\n        return this._loggers.computeIfAbsent(name, key => new InternalLoggerImpl(key, this._logLevel, this._fnOutput));\n    }\n    changeLogLevel(level) {\n        this._logLevel = level;\n        this._loggers.forEach(logger => logger.setLevel(level));\n    }\n    changeOutput(_fnOutput) {\n        this._fnOutput = _fnOutput;\n        this._loggers.forEach(logger => logger.setOutput(this._fnOutput));\n    }\n    reset() {\n        this.changeLogLevel(InternalLogLevel.Error);\n        this._fnOutput = InternalProviderImpl.logConsole;\n        this._loggers.forEach(logger => logger.setOutput(this._fnOutput));\n    }\n    static logConsole(msg) {\n        // tslint:disable-next-line:no-console\n        if (console && console.log) {\n            // tslint:disable-next-line:no-console\n            console.log(msg);\n        }\n    }\n}\nconst provider = new InternalProviderImpl();\n\nvar InternalLogger = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  INTERNAL_LOGGING_SETTINGS: INTERNAL_LOGGING_SETTINGS,\n  get InternalLogLevel () { return InternalLogLevel; },\n  getInternalLogger: getInternalLogger\n});\n\n/**\n * Log level for a logger.\n */\nvar LogLevel;\n(function (LogLevel) {\n    // Do not change values/order. Logging a message relies on this.\n    LogLevel[LogLevel[\"Trace\"] = 0] = \"Trace\";\n    LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n    LogLevel[LogLevel[\"Warn\"] = 3] = \"Warn\";\n    LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\n    LogLevel[LogLevel[\"Fatal\"] = 5] = \"Fatal\";\n    LogLevel[LogLevel[\"Off\"] = 6] = \"Off\";\n})(LogLevel || (LogLevel = {}));\n/* tslint:disable:no-namespace */\n(function (LogLevel) {\n    /**\n     * Convert given value to LogLevel, if not matching returns undefined.\n     * @param val Value to convert\n     */\n    function toLogLevel(val) {\n        switch (val.toLowerCase()) {\n            case \"trace\":\n                return LogLevel.Trace;\n            case \"debug\":\n                return LogLevel.Debug;\n            case \"info\":\n                return LogLevel.Info;\n            case \"warn\":\n                return LogLevel.Warn;\n            case \"error\":\n                return LogLevel.Error;\n            case \"fatal\":\n                return LogLevel.Fatal;\n            case \"off\":\n                return LogLevel.Off;\n            default:\n                return undefined;\n        }\n    }\n    LogLevel.toLogLevel = toLogLevel;\n})(LogLevel || (LogLevel = {}));\n/* tslint:disable:enable-namespace */\n\n/**\n * Standard logger implementation that provides the basis for all loggers.\n */\nclass CoreLoggerImpl {\n    constructor(runtime) {\n        this._runtime = runtime;\n    }\n    get id() {\n        return this._runtime.id;\n    }\n    get logLevel() {\n        return this._runtime.level;\n    }\n    get runtimeSettings() {\n        /* Return it as new literal, we don't want people to play with our internal state */\n        return Object.assign({}, this._runtime);\n    }\n    set runtimeSettings(runtime) {\n        this._runtime = runtime;\n    }\n    trace(message, ...args) {\n        this.logMessage(LogLevel.Trace, message, args);\n    }\n    debug(message, ...args) {\n        this.logMessage(LogLevel.Debug, message, args);\n    }\n    info(message, ...args) {\n        this.logMessage(LogLevel.Info, message, args);\n    }\n    warn(message, ...args) {\n        this.logMessage(LogLevel.Warn, message, args);\n    }\n    error(message, ...args) {\n        this.logMessage(LogLevel.Error, message, args);\n    }\n    fatal(message, ...args) {\n        this.logMessage(LogLevel.Fatal, message, args);\n    }\n    logMessage(level, logMessageType, args) {\n        if (this._runtime.level > level) {\n            return;\n        }\n        const nowMillis = Date.now();\n        const message = typeof logMessageType === \"string\" ? logMessageType : logMessageType();\n        const errorAndArgs = CoreLoggerImpl.getErrorAndArgs(args);\n        /*\n         * Deal with raw message here.\n         */\n        switch (this._runtime.channel.type) {\n            case \"RawLogChannel\":\n                this._runtime.channel.write({\n                    message,\n                    exception: errorAndArgs.error,\n                    args: errorAndArgs.args,\n                    timeInMillis: nowMillis,\n                    level,\n                    logNames: this._runtime.name,\n                }, this._runtime.argumentFormatter);\n                return;\n            case \"LogChannel\":\n                this._runtime.channel.write(this.createLogMessage(message, level, errorAndArgs, nowMillis));\n                break;\n        }\n    }\n    formatArgValue(value) {\n        try {\n            return this._runtime.argumentFormatter(value);\n        }\n        catch (e) {\n            // We don't really care what failed, except that the convert function failed.\n            return `>>ARG CONVERT FAILED: '${value !== undefined ? value.toString() : \"undefined\"}'<<`;\n        }\n    }\n    createLogMessage(message, level, errorAndArgs, nowMillis) {\n        let errorResult;\n        const error = errorAndArgs.error;\n        const args = errorAndArgs.args;\n        if (error) {\n            errorResult = `${error.name}: ${error.message}`;\n            if (error.stack) {\n                errorResult += `@\\n${error.stack}`;\n            }\n        }\n        /*\n         * We need to add the date, and log names (in front of the now formatted message).\n         * Finally we also need to format any additional arguments and append after the message.\n         */\n        const dateFormatted = this._runtime.dateFormatter(nowMillis);\n        let levelAsStr = LogLevel[level].toUpperCase();\n        if (levelAsStr.length < 5) {\n            levelAsStr += \" \";\n        }\n        const names = typeof this._runtime.name === \"string\" ? this._runtime.name : this._runtime.name.join(\", \");\n        const argsFormatted = typeof args !== \"undefined\" && args.length > 0 ? (\" [\" + (args.map(arg => this.formatArgValue(arg))).join(\", \") + \"]\") : \"\";\n        const completedMessage = dateFormatted + \" \" + levelAsStr + \" [\" + names + \"] \" + message + argsFormatted;\n        return {\n            message: completedMessage,\n            error: errorResult,\n        };\n    }\n    static getErrorAndArgs(args) {\n        /*\n          The args are optional, but the first entry may be an Error or a function to an Error, or finally be a function to extra arguments.\n          The last is only true, if the length of args === 1, otherwise we expect args starting at pos 1 and further to be just that - args.\n         */\n        if (args.length === 0) {\n            return {};\n        }\n        let error;\n        let actualArgs;\n        const value0 = args[0];\n        /* If the first argument is an Error, we can stop straight away, the rest are additional arguments then if any */\n        if (value0 instanceof Error) {\n            error = value0;\n            actualArgs = args.length > 1 ? args.slice(1) : undefined;\n            return { error, args: actualArgs };\n        }\n        /* If the first argument is a function, it means either it will return the Error, or if the array length === 1 a function, returning the arguments */\n        if (typeof value0 === \"function\") {\n            const errorOrArgs = value0();\n            if (errorOrArgs instanceof Error) {\n                error = errorOrArgs;\n                actualArgs = args.length > 1 ? args.slice(1) : undefined;\n                return { error, args: actualArgs };\n            }\n            if (args.length === 1) {\n                /* The first argument was a function, we assume it returned the extra argument(s) */\n                if (Array.isArray(errorOrArgs)) {\n                    return { args: errorOrArgs.length > 0 ? errorOrArgs : undefined };\n                }\n                else {\n                    /* No idea what was returned we just assume a single value */\n                    return { args: errorOrArgs };\n                }\n            }\n            else {\n                /*\n                  This is a weird situation but there's no way to avoid it, the first argument was a function but did not return an Error and the args are > 1,\n                  so just add the args returned, as well as any remaining.\n                */\n                if (Array.isArray(errorOrArgs)) {\n                    return { args: [...errorOrArgs, ...args.slice(1)] };\n                }\n                return { args: [errorOrArgs, ...args.slice(1)] };\n            }\n        }\n        /* All args are ordinary arguments, or at least the first arg was not an Error or a Function, so we add all as args */\n        return { args };\n    }\n}\n\n/**\n * Pad given value with given fillChar from the beginning (default is an empty space)\n * @param value Value to pad\n * @param length The length the string must be\n * @param fillChar The padding char (1 char length allowed only)\n * @return Padded string or the same string if it is already of given length (or larger).\n */\nfunction padStart(value, length, fillChar = \" \") {\n    return padInternal(value, length, \"start\", fillChar);\n}\n/**\n * Pad given value with given fillChar from the end (default is an empty space)\n * @param value Value to pad\n * @param length The length the string must be\n * @param fillChar The padding char (1 char length allowed only)\n * @return Padded string or the same string if it is already of given length (or larger).\n */\nfunction padEnd(value, length, fillChar = \" \") {\n    return padInternal(value, length, \"end\", fillChar);\n}\n/**\n * Returns the max length of a string value in given array\n * @param arr Array to check\n * @return Max length, 0 if array is empty\n */\nfunction maxLengthStringValueInArray(arr) {\n    return arr\n        .map(v => v.length)\n        .reduce((previous, current) => {\n        if (current > previous) {\n            return current;\n        }\n        return previous;\n    }, 0);\n}\nfunction padInternal(value, length, padType, fillChar = \" \") {\n    if (length <= value.length) {\n        return value;\n    }\n    if (fillChar.length > 1) {\n        throw new Error(`Fill char must be one char exactly, it is: ${fillChar.length}`);\n    }\n    const charsNeeded = length - value.length;\n    let padding = \"\";\n    for (let i = 0; i < charsNeeded; i++) {\n        padding += fillChar;\n    }\n    if (padType === \"start\") {\n        return padding + value;\n    }\n    return value + padding;\n}\n\n/**\n * Default argument formatter function, used by the library, see {@link ArgumentFormatterType}.\n * Can be used by an end user as well if needed.\n * @param arg The argument to format\n * @returns argument stringified to string (JSON.stringify), if arg is undefined returns \"undefined\" (without quotes).\n */\nfunction formatArgument(arg) {\n    if (arg === undefined) {\n        return \"undefined\";\n    }\n    return JSON.stringify(arg);\n}\n/**\n * Default date formatter function, used by the library, see {@link DateFormatterType}.\n * Can be used by an end user as well if needed.\n * @param millisSinceEpoch Milliseconds since epoch\n * @returns The date in format: yyyy-MM-dd HH:mm:ss,SSS (example: 2021-02-26 09:06:28,123)\n */\nfunction formatDate(millisSinceEpoch) {\n    const date = new Date(millisSinceEpoch);\n    const year = date.getFullYear();\n    const month = padStart((date.getMonth() + 1).toString(), 2, \"0\");\n    const day = padStart(date.getDate().toString(), 2, \"0\");\n    const hours = padStart(date.getHours().toString(), 2, \"0\");\n    const minutes = padStart(date.getMinutes().toString(), 2, \"0\");\n    const seconds = padStart(date.getSeconds().toString(), 2, \"0\");\n    const millis = padStart(date.getMilliseconds().toString(), 3, \"0\");\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds},${millis}`;\n}\n\n/* tslint:disable:no-console */\n/**\n * Default standard LogChannel which logs to console.\n */\nclass ConsoleLogChannel {\n    constructor() {\n        this.type = \"LogChannel\";\n    }\n    write(msg) {\n        if (console && console.log) {\n            console.log(msg.message + (msg.error ? `\\n${msg.error}` : \"\"));\n        }\n    }\n}\n\n/* tslint:disable:no-namespace */\n/**\n * Provides access to various default channels provided by typescript logging.\n */\nvar DefaultChannels;\n(function (DefaultChannels) {\n    /**\n     * Create a new standard LogChannel that logs to the console.\n     */\n    function createConsoleChannel() {\n        return new ConsoleLogChannel();\n    }\n    DefaultChannels.createConsoleChannel = createConsoleChannel;\n})(DefaultChannels || (DefaultChannels = {}));\n\n/**\n * Implementation for {@link LogProvider}\n */\nclass LogProviderImpl {\n    constructor(name, settings) {\n        this._log = getInternalLogger(\"core.impl.LogProviderImpl\");\n        this._name = name;\n        this._settings = settings;\n        this._loggers = new EnhancedMap();\n        this._idToKeyMap = new EnhancedMap();\n        this._globalRuntimeSettings = { level: settings.level, channel: settings.channel };\n        this._nextLoggerId = 1;\n        this._log.trace(() => `Created LogProviderImpl with settings: ${JSON.stringify(this._settings)}`);\n    }\n    get runtimeSettings() {\n        return Object.assign(Object.assign({}, this._settings), { level: this._globalRuntimeSettings.level, channel: this._globalRuntimeSettings.channel });\n    }\n    getLogger(name) {\n        return this.getOrCreateLogger(name);\n    }\n    updateLoggerRuntime(log, settings) {\n        this._log.debug(() => `Updating logger ${log.id} runtime settings using: '${JSON.stringify(settings)}'`);\n        const key = this._idToKeyMap.get(log.id);\n        if (key === undefined) {\n            this._log.warn(() => `Cannot update logger with id: ${log.id}, it was not found.`);\n            return false;\n        }\n        this._loggers.computeIfPresent(key, (currentKey, currentValue) => {\n            currentValue.runtimeSettings = LogProviderImpl.mergeRuntimeSettingsIntoLogRuntime(currentValue.runtimeSettings, settings);\n            return currentValue;\n        });\n        return true;\n    }\n    updateRuntimeSettings(settings) {\n        this._log.debug(() => `Updating global runtime settings and updating existing loggers runtime settings using: '${JSON.stringify(settings)}'`);\n        this._globalRuntimeSettings = {\n            /*\n             * Undefined check is necessary, as level is a number (and LogLevel.Trace = 0), a ternary check otherwise results in the annoying \"truthy/falsy\"\n             * behavior of javascript where 0 is seen as false.\n             */\n            level: settings.level !== undefined ? settings.level : this._globalRuntimeSettings.level,\n            channel: settings.channel !== undefined ? settings.channel : this._globalRuntimeSettings.channel,\n        };\n        this._loggers.forEach(logger => logger.runtimeSettings = LogProviderImpl.mergeRuntimeSettingsIntoLogRuntime(logger.runtimeSettings, settings));\n    }\n    /**\n     * Removes all state and loggers, it reverts back to as it was after initial construction.\n     */\n    clear() {\n        this._loggers.clear();\n        this._idToKeyMap.clear();\n        this._globalRuntimeSettings = Object.assign({}, this._settings);\n        this._nextLoggerId = 1;\n    }\n    getOrCreateLogger(name) {\n        const key = LogProviderImpl.createKey(name);\n        const logger = this._loggers.computeIfAbsent(key, () => {\n            const runtime = {\n                level: this._globalRuntimeSettings.level,\n                channel: this._globalRuntimeSettings.channel,\n                id: this.nextLoggerId(),\n                name,\n                argumentFormatter: this._settings.argumentFormatter,\n                dateFormatter: this._settings.dateFormatter,\n            };\n            return new CoreLoggerImpl(runtime);\n        });\n        this._idToKeyMap.computeIfAbsent(logger.id, () => key);\n        return logger;\n    }\n    nextLoggerId() {\n        const result = this._name + \"_\" + this._nextLoggerId;\n        this._nextLoggerId++;\n        return result;\n    }\n    static mergeRuntimeSettingsIntoLogRuntime(currentSettings, settings) {\n        return Object.assign(Object.assign({}, currentSettings), { \n            /*\n             * Undefined check is necessary, as level is a number (and LogLevel.Trace = 0), a ternary check otherwise results in the annoying \"truthy/falsy\"\n             * behavior of javascript where 0 is seen as false.\n             */\n            level: settings.level !== undefined ? settings.level : currentSettings.level, channel: settings.channel !== undefined ? settings.channel : currentSettings.channel });\n    }\n    static createKey(name) {\n        if (typeof name === \"string\") {\n            return name;\n        }\n        return name.join(\",\");\n    }\n}\n\n/**\n * Create a new LogProvider, this is for flavor usage only. End users should not\n * use this and instead use whatever the flavor offers to build some config and\n * get loggers from there.\n */\nfunction createLogProvider(name, settings) {\n    return new LogProviderImpl(name, settings);\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  EnhancedMap: EnhancedMap,\n  maxLengthStringValueInArray: maxLengthStringValueInArray,\n  padEnd: padEnd,\n  padStart: padStart\n});\n\nfunction log4TSGroupConfigDebug(config) {\n    return `Log4TSGroupConfig=level: ${LogLevel[config.level].toString()}, expression: ${config.expression.toString()}, (omitted functions/channel)`;\n}\nfunction log4TSConfigDebug(config) {\n    const groupLog = config.groups.map(g => log4TSGroupConfigDebug(g)).join(\", \");\n    return `Log4TSGroupConfig=level: ${LogLevel[config.level].toString()}, groups: ${groupLog}, (omitted functions/channel)`;\n}\n\n/**\n * Implementation class for Log4TSProvider.\n */\nclass Log4TSProviderImpl {\n    constructor(name, defaultConfig, groupConfigs) {\n        this._log = InternalLogger.getInternalLogger(\"log4ts.impl.Log4TSProviderImpl\");\n        this._name = name;\n        /* The default config, used as fallback if a logger does not match any group */\n        this._defaultConfig = [Object.assign(Object.assign({}, defaultConfig), { identifier: defaultConfig.identifier }), createLogProvider(\"log4ts_\" + name + \"_\" + defaultConfig.identifier, defaultConfig)];\n        /* Create various providers for the different groups so each will have the correct config */\n        this._logProviders = new Map(groupConfigs.map(config => {\n            const updatedConfig = Object.assign({}, config);\n            const provider = createLogProvider(\"log4ts_\" + name + \"_\" + config.identifier, config);\n            return [config.identifier, { groupConfig: updatedConfig, provider }];\n        }));\n        this._log.trace(() => {\n            const groupProvLog = [...this._logProviders.values()].map(e => log4TSGroupConfigDebug(e.groupConfig)).join(\", \");\n            return `Creating Log4TSProviderImpl '${this._name}', defaultConfig: ${log4TSGroupConfigDebug(this._defaultConfig[0])}, groupConfigs: ${groupProvLog}`;\n        });\n    }\n    get name() {\n        return this._name;\n    }\n    get config() {\n        /* We create the settings to return anew, to prevent people change the content in any way */\n        return Object.assign({}, this._defaultConfig[0]);\n    }\n    get groupConfigs() {\n        /* We create the settings to return anew, to prevent people change the content in any way */\n        return [...this._logProviders.values()].map(v => (Object.assign({}, v.groupConfig)));\n    }\n    getLogger(name) {\n        /* Walk them in insertion order, that is the order we must match for */\n        for (const value of this._logProviders.values()) {\n            if (value.groupConfig.expression.test(name)) {\n                return value.provider.getLogger(name);\n            }\n        }\n        /* Fallback to the default we don't care if it matches in this case */\n        return this._defaultConfig[1].getLogger(name);\n    }\n    updateRuntimeSettingsGroup(identifier, config) {\n        const value = this._logProviders.get(identifier);\n        if (value === undefined) {\n            throw new Error(`Cannot update group with identifier '${identifier}', it does not exist.`);\n        }\n        this._log.debug(() => `Will update ${log4TSGroupConfigDebug(value.groupConfig)}, associated LogProvider '${value.provider}' - applying runtime change: ${JSON.stringify(config)}.`);\n        Log4TSProviderImpl.updateLog4TGroupConfig(value.groupConfig, value.provider, config);\n    }\n    updateRuntimeSettings(settings) {\n        this._log.debug(() => `Will update settings for all groups and existing loggers - will apply runtime change: ${JSON.stringify(settings)}.`);\n        this._logProviders.forEach(value => {\n            const groupConfig = value.groupConfig;\n            const provider = value.provider;\n            this._log.debug(() => `Will update ${log4TSGroupConfigDebug(groupConfig)}, associated LogProvider '${provider}' - applying runtime change: ${JSON.stringify(settings)}.`);\n            Log4TSProviderImpl.updateLog4TGroupConfig(groupConfig, provider, settings);\n        });\n    }\n    static updateLog4TGroupConfig(cfg, provider, runtimeSettings) {\n        if (runtimeSettings.level) {\n            cfg.level = runtimeSettings.level;\n        }\n        if (runtimeSettings.channel) {\n            cfg.channel = runtimeSettings.channel;\n        }\n        provider.updateRuntimeSettings(runtimeSettings);\n    }\n}\n\n/**\n * Implementation for Log4TSControlProvider.\n */\nclass Log4TSControlProviderImpl {\n    constructor(provider, messageChannel) {\n        this._provider = provider;\n        this._messageChannel = messageChannel;\n        // Identifier is guaranteed to be set internally.\n        this._originalLogLevels = Log4TSControlProviderImpl.loadCurrentGroupLogLevels(provider);\n    }\n    get name() {\n        return this._provider.name;\n    }\n    showSettings() {\n        let result = `Available group configs (Log4TSProvider '${this._provider.name}'):\\n`;\n        /*\n         * Make the identifier always set, similar on how to update a group.\n         */\n        const groupConfigs = this._provider.groupConfigs.map(cfg => ({\n            level: LogLevel[cfg.level],\n            channelDescription: cfg.channel.toString ? cfg.channel.toString() : JSON.stringify(cfg.channel),\n            identifier: cfg.identifier,\n        }));\n        const maxWidthIndex = groupConfigs.length.toString().length;\n        const maxWidthIdentifier = index.maxLengthStringValueInArray(groupConfigs.map(cfg => cfg.identifier));\n        const maxWidthLevel = 5;\n        /*\n          We create this kind of output:\n    \n          Available group configs (Log4TSProvider 'test'):\n            [0, /model.+/:             level=Error]\n            [1, /advanced.+/:          level=Warn ]\n            [2, my awesome identifier: level=Error]\n            [3, /blaat.blaat.+/:       level=Error]\n         */\n        const providerLines = groupConfigs\n            .map((cfg, index$1) => `  [${index.padStart(index$1.toString(), maxWidthIndex)}, ${index.padEnd(cfg.identifier, maxWidthIdentifier)} (level=${index.padEnd(cfg.level, maxWidthLevel)})]`)\n            .join(\"\\n\");\n        result += providerLines + \"\\n\";\n        this._messageChannel(result);\n    }\n    update(level, groupId) {\n        const newLevel = LogLevel.toLogLevel(level);\n        if (newLevel === undefined) {\n            throw new Error(`Cannot update log provider, log level '${level}' is invalid.`);\n        }\n        const settings = {\n            level: newLevel,\n        };\n        /*\n         * Update all groups.\n         */\n        if (groupId === undefined) {\n            this._provider.updateRuntimeSettings(settings);\n            this._messageChannel(\"Updated all group configs successfully.\");\n            return;\n        }\n        /*\n         * Find the group by index and update it using its identifier.\n         */\n        if (typeof groupId === \"number\") {\n            const groups = this._provider.groupConfigs;\n            if (groupId < 0 || groupId >= groups.length) {\n                throw new Error(`Group config with index '${groupId}' does not exist (outside of range).`);\n            }\n            const expectedGroup = groups[groupId];\n            this._provider.updateRuntimeSettingsGroup(expectedGroup.identifier, settings);\n            this._messageChannel(`Updated group config with index '${groupId}' successfully.`);\n            return;\n        }\n        /* Update the group by its identifier directly */\n        this._provider.updateRuntimeSettingsGroup(groupId, settings);\n        this._messageChannel(`Updated group config with id '${groupId}' successfully.`);\n    }\n    reset() {\n        this._originalLogLevels.forEach((value, key) => {\n            this._provider.updateRuntimeSettingsGroup(key, { level: value });\n        });\n        this._messageChannel(\"Successfully reset log levels back to original state (from when this Log4TSControlProvider was created).\");\n    }\n    save() {\n        if (!localStorage) {\n            this._messageChannel(\"Cannot save state, localStorage is not available.\");\n            return;\n        }\n        const data = {\n            name: this._provider.name,\n            groups: this._provider.groupConfigs.map(cfg => ({ identifier: cfg.identifier, level: LogLevel[cfg.level] })),\n        };\n        localStorage.setItem(this.createKey(), JSON.stringify(data));\n        this._messageChannel(`Successfully saved state for Log4TSControlProvider '${this._provider.name}'.`);\n    }\n    restore(logRestoreFailures) {\n        const finalLogRestoreFailures = logRestoreFailures !== undefined ? logRestoreFailures : true;\n        if (!localStorage) {\n            if (finalLogRestoreFailures) {\n                this._messageChannel(`Will not attempt to restore state for Log4TSControlProvider '${this._provider.name}', localStorage is not available.`);\n            }\n            return;\n        }\n        const key = this.createKey();\n        const value = localStorage.getItem(key);\n        if (value === null) {\n            if (finalLogRestoreFailures) {\n                this._messageChannel(`Cannot restore state for Log4TSControlProvider '${this._provider.name}', no data available.`);\n            }\n            return;\n        }\n        try {\n            const savedData = JSON.parse(value);\n            if (this._provider.name !== savedData.name) {\n                if (finalLogRestoreFailures) {\n                    this._messageChannel(`Cannot restore state for Log4TSControlProvider '${this._provider.name}', data is not for provider - found name '${savedData.name}'.`);\n                }\n                return;\n            }\n            this.restoreGroups(savedData, finalLogRestoreFailures);\n            this._originalLogLevels = Log4TSControlProviderImpl.loadCurrentGroupLogLevels(this._provider);\n        }\n        catch (e) {\n            localStorage.removeItem(key);\n            this._messageChannel(`Cannot restore state for Log4TSControlProvider '${this._provider.name}', data is not valid. Invalid data removed from localStorage.`);\n        }\n    }\n    help() {\n        const msg = `You can use the following commands (Log4TSProvider ${this._provider.name}):\\n` +\n            \"  showSettings()\\n\" +\n            \"    Shows the current configuration settings.\\n\" +\n            \"  update(logLevel: Log4TSControlProviderLogLevel, groupId?: number | string)\\n\" +\n            \"    Change the log level for one or all config groups.\\n\" +\n            \"      @param level   The log level to set - must be one of 'trace', 'debug', 'info', 'warn', 'error' or 'fatal'\\n\" +\n            \"      @param groupId Optional group config to update by either index or identifier, when omitted updates all groups.\\n\" +\n            \"                     Use showSettings() to find details about index and/or identifier.\\n\" +\n            \"  reset()\\n\" +\n            \"    Resets the log levels of the config groups back to when this control provider was created.\\n\" +\n            \"  save()\\n\" +\n            \"    Saves the current log levels for all config groups of this provider. Use restore() to load last saved state.\\n\" +\n            \"  restore()\\n\" +\n            \"    Restore stored saved state, if any. Log levels will be set according to saved state.\\n\" +\n            \"  help()\\n\" +\n            \"    Shows this help.\\n\";\n        this._messageChannel(msg);\n    }\n    restoreGroups(saveData, logCannotRestore) {\n        saveData.groups.forEach(group => {\n            try {\n                const newLevel = LogLevel.toLogLevel(group.level);\n                if (newLevel !== undefined) {\n                    this._provider.updateRuntimeSettingsGroup(group.identifier, { level: newLevel });\n                    this._messageChannel(`Log4TSControlProvider '${this._provider.name}' - restored log level of group '${group.identifier}' to '${LogLevel[newLevel]}'.`);\n                }\n                else {\n                    if (logCannotRestore) {\n                        this._messageChannel(`Log4TSControlProvider '${this._provider.name}' - failed to restore log level of group '${group.identifier}', invalid log level was specified.`);\n                    }\n                }\n            }\n            catch (e) {\n                if (logCannotRestore) {\n                    this._messageChannel(`Log4TSControlProvider '${this._provider.name}' - failed to restore log level of group '${group.identifier}'.`);\n                }\n            }\n        });\n    }\n    createKey() {\n        return `Log4TSProvider-${this._provider.name}`;\n    }\n    static loadCurrentGroupLogLevels(provider) {\n        return new Map(provider.groupConfigs.map(cfg => [cfg.identifier, cfg.level]));\n    }\n}\n\n/**\n * Provider for the Log4TS flavor, each provider is a unique instance that can be used to\n * get loggers from.\n */\nclass Log4TSProviderService {\n    constructor() {\n        this._log = InternalLogger.getInternalLogger(\"log4ts.impl.Log4TSProviderService\");\n        this._providers = new index.EnhancedMap();\n    }\n    createLogProvider(name, config) {\n        const result = this._providers.compute(name, (key, currentValue) => {\n            if (currentValue) {\n                throw new Error(`Log4TSProvider with name '${name}' already exists, cannot create another.`);\n            }\n            const mainConfig = mergeLog4TSConfigs(createDefaultLog4TSConfig(), config);\n            validateLog4TSConfig(mainConfig);\n            this._log.debug(() => `Creating new Log4TSProvider with name '${name}', using main config settings '${log4TSConfigDebug(mainConfig)}'.`);\n            const defaultExpression = new RegExp(\".+\");\n            const defaultGroupConfig = {\n                channel: mainConfig.channel,\n                level: mainConfig.level,\n                expression: defaultExpression,\n                dateFormatter: mainConfig.dateFormatter,\n                argumentFormatter: mainConfig.argumentFormatter,\n                identifier: defaultExpression.toString(),\n            };\n            return new Log4TSProviderImpl(key, defaultGroupConfig, mainConfig.groups);\n        });\n        // Cannot be undefined we do not allow it.\n        return result;\n    }\n    /**\n     * Clears all providers and configuration, the service reverts back to initial state.\n     */\n    clear() {\n        this._providers.clear();\n    }\n    getLog4TSControl(fnValue) {\n        const fnMessageChannel = fnValue ? fnValue : (value) => {\n            // tslint:disable-next-line:no-console\n            if (console && console.log) {\n                // tslint:disable-next-line:no-console\n                console.log(value);\n            }\n            else {\n                throw new Error(\"Cannot use console (it is not present), please specify a custom function to write to.\");\n            }\n        };\n        return {\n            help: () => fnMessageChannel(Log4TSProviderService.help()),\n            showSettings: () => fnMessageChannel(this.showSettings()),\n            getProvider: (id) => this.getLog4TSControlProviderByIdOrName(id, fnMessageChannel),\n        };\n    }\n    showSettings() {\n        let result = \"Available Log4TSProviders:\\n\";\n        const maxWidthIndex = this._providers.size.toString().length;\n        const maxWidthName = index.maxLengthStringValueInArray([...this._providers.keys()]);\n        const lines = [...this._providers.entries()].map((entry, index$1) => {\n            const name = entry[0];\n            /* [idx, name] */\n            return `  [${index.padStart(index$1.toString(), maxWidthIndex)}, ${index.padEnd(name, maxWidthName)}]`;\n        });\n        result += lines.join(\"\\n\") + (lines.length > 0 ? \"\\n\" : \"\");\n        return result;\n    }\n    getLog4TSControlProviderByIdOrName(id, messageChannel) {\n        if (typeof id === \"string\") {\n            const provider = this._providers.get(id);\n            if (provider === undefined) {\n                throw new Error(`Provider with name '${id}' does not exist.`);\n            }\n            return new Log4TSControlProviderImpl(provider, messageChannel);\n        }\n        const providers = [...this._providers.values()];\n        if (id < 0 || id >= providers.length) {\n            throw new Error(`Provider with index '${id}' does not exist (outside of range).`);\n        }\n        return new Log4TSControlProviderImpl(providers[id], messageChannel);\n    }\n    static help() {\n        return \"You can use the following commands:\\n\" +\n            \"  showSettings()\\n\" +\n            \"    Shows the current configuration settings.\\n\" +\n            \"  getProvider: (id: number | string): Log4TSControlProvider\\n\" +\n            \"    Get access to a Log4TSControlProvider to change log levels.\\n\" +\n            \"      @param id The id (use showSettings to see) or name of the provider\\n\" +\n            \"  help()\\n\" +\n            \"    Shows this help.\\n\";\n    }\n}\n/**\n * Singleton instance to the service, for internal usage only. Must NOT be exported to end user.\n */\nconst LOG4TS_PROVIDER_SERVICE = new Log4TSProviderService();\nconst LOG4TS_LOG_CONTROL = fnValue => LOG4TS_PROVIDER_SERVICE.getLog4TSControl(fnValue);\nfunction createDefaultLog4TSConfig() {\n    return {\n        argumentFormatter: formatArgument,\n        channel: DefaultChannels.createConsoleChannel(),\n        dateFormatter: formatDate,\n        groups: [],\n        level: LogLevel.Error,\n    };\n}\nfunction mergeLog4TSConfigs(lhs, rhs) {\n    const value = {\n        argumentFormatter: rhs.argumentFormatter ? rhs.argumentFormatter : lhs.argumentFormatter,\n        channel: rhs.channel ? rhs.channel : lhs.channel,\n        dateFormatter: rhs.dateFormatter ? rhs.dateFormatter : lhs.dateFormatter,\n        groups: [],\n        level: rhs.level !== undefined ? rhs.level : lhs.level,\n    };\n    /*\n     * Groups must take over the defaults from the main config when they don't specify config themselves.\n     */\n    value.groups = rhs.groups.map(groupConfig => mergeLog4TSGroupConfigs(value, groupConfig));\n    return value;\n}\nfunction mergeLog4TSGroupConfigs(lhs, rhs) {\n    return {\n        argumentFormatter: rhs.argumentFormatter ? rhs.argumentFormatter : lhs.argumentFormatter,\n        channel: lhs.channel,\n        dateFormatter: rhs.dateFormatter ? rhs.dateFormatter : lhs.dateFormatter,\n        expression: rhs.expression,\n        level: rhs.level !== undefined ? rhs.level : lhs.level,\n        identifier: rhs.identifier ? rhs.identifier : rhs.expression.toString(),\n    };\n}\nfunction validateLog4TSConfig(config) {\n    if (config.groups.length === 0) {\n        throw new Error(\"Invalid configuration, 'groups' on configuration is empty, at least 1 group config must be specified.\");\n    }\n}\n\n// tslint:disable-next-line:no-namespace\nvar Log4TSProvider;\n(function (Log4TSProvider) {\n    /**\n     * Creates a new log provider with given name and configuration. If a provider\n     * with such name already exists, an Error will be thrown.\n     * @param name Name for provider, must be unique\n     * @param config The config for the provider\n     */\n    function createProvider(name, config) {\n        return LOG4TS_PROVIDER_SERVICE.createLogProvider(name, config);\n    }\n    Log4TSProvider.createProvider = createProvider;\n    /**\n     * Resets and clears *all* created Log4TSProviders, every logger that was retrieved previously\n     * through any of them will be invalid afterwards.\n     *\n     * This call essentially reverts the created Log4TSProviders back to their initial state. This should normally not be used\n     * unless absolutely necessary.\n     */\n    function clear() {\n        LOG4TS_PROVIDER_SERVICE.clear();\n    }\n    Log4TSProvider.clear = clear;\n})(Log4TSProvider || (Log4TSProvider = {}));\n\nexport { LOG4TS_LOG_CONTROL, Log4TSProvider };\n//# sourceMappingURL=typescript-logging-log4ts.esm.js.map\n","/**\n * Extends Map and adds a few convenient functions.\n */\nclass EnhancedMap extends Map {\n    /**\n     * If key has a mapping already returns the currently associated value. If\n     * there is no mapping, calls the computer which must return a value V.\n     * The value is then stored for given key and returned.\n     * @param key Key\n     * @param computer Computer which is called only if key has no mapping yet.\n     * @return Existing value if the key already existed, or the newly computed value.\n     */\n    computeIfAbsent(key, computer) {\n        if (this.has(key)) {\n            return this.get(key);\n        }\n        const newValue = computer(key);\n        this.set(key, newValue);\n        return newValue;\n    }\n    /**\n     * If the key exists already calls given computer, if the key does not exist\n     * this method does nothing.\n     *\n     * The computer is called with current key and current value associated. The\n     * computer can return a (new) value V or undefined. When undefined is returned\n     * the key is removed from this map, when a V is returned the key is updated\n     * with the new value V.\n     * @param key Key\n     * @param computer Computer which is called only if the key has a mapping already\n     * @return Undefined if the key has no mapping, otherwise the value returned from computer\n     */\n    computeIfPresent(key, computer) {\n        const currentValue = this.get(key);\n        if (currentValue === undefined) {\n            return undefined;\n        }\n        const newValue = computer(key, currentValue);\n        if (newValue !== undefined) {\n            this.set(key, newValue);\n        }\n        else {\n            this.delete(key);\n        }\n        return newValue;\n    }\n    /**\n     * Computes a value for given key, the computer can return a value V (in which case the map\n     * will set the value for given key), if it returns undefined the mapping for key K will be\n     * removed.\n     * @param key Key to compute\n     * @param computer Computer which is called, note that the currentValue argument contains the existing\n     *                 value or is undefined when no mapping exists for the key.\n     * @return The newly computed value\n     */\n    compute(key, computer) {\n        const currentValue = this.get(key);\n        const newValue = computer(key, currentValue);\n        if (newValue) {\n            this.set(key, newValue);\n        }\n        else {\n            this.delete(key);\n        }\n        return newValue;\n    }\n}\n\n/**\n * Internal log level (note: do NOT use LogLevel, or we get circular loading issues!)\n */\nvar InternalLogLevel;\n(function (InternalLogLevel) {\n    InternalLogLevel[InternalLogLevel[\"Trace\"] = 0] = \"Trace\";\n    InternalLogLevel[InternalLogLevel[\"Debug\"] = 1] = \"Debug\";\n    InternalLogLevel[InternalLogLevel[\"Info\"] = 2] = \"Info\";\n    InternalLogLevel[InternalLogLevel[\"Warn\"] = 3] = \"Warn\";\n    InternalLogLevel[InternalLogLevel[\"Error\"] = 4] = \"Error\";\n})(InternalLogLevel || (InternalLogLevel = {}));\n/**\n * Internal logger, this is NOT for end users. Instead this is used to enable logging for typescript-logging itself in case of problems.\n *\n * @param name Name of logger\n */\nfunction getInternalLogger(name) {\n    return provider.getLogger(name);\n}\n/**\n * Can be used to change the *internal* logging of the library.\n * Has no effect on end user logging.\n *\n * As such should normally not be used by end users.\n */\nconst INTERNAL_LOGGING_SETTINGS = {\n    /**\n     * Changes the log level for the internal logging (for all new and existing loggers)\n     * @param level New log level\n     */\n    setInternalLogLevel: (level) => provider.changeLogLevel(level),\n    /**\n     * Changes where messages are written to for all new and existing loggers),\n     * by default they are written to the console.\n     * @param fnOutput Function to write messages to\n     */\n    setOutput: (fnOutput) => provider.changeOutput(fnOutput),\n    /**\n     * Resets the log level and output back to defaults (level to error and writing to console)\n     * for all new and existing loggers.\n     */\n    reset: () => provider.reset(),\n};\nclass InternalLoggerImpl {\n    constructor(name, level, fnOutput) {\n        this._name = name;\n        this._level = level;\n        this._fnOutput = fnOutput;\n    }\n    trace(msg) {\n        this.log(InternalLogLevel.Trace, msg);\n    }\n    debug(msg) {\n        this.log(InternalLogLevel.Debug, msg);\n    }\n    error(msg, error) {\n        this.log(InternalLogLevel.Error, msg, error);\n    }\n    info(msg) {\n        this.log(InternalLogLevel.Info, msg);\n    }\n    warn(msg, error) {\n        this.log(InternalLogLevel.Warn, msg, error);\n    }\n    setLevel(level) {\n        this._level = level;\n    }\n    setOutput(fnOutput) {\n        this._fnOutput = fnOutput;\n    }\n    log(level, msg, error) {\n        if (this._level > level) {\n            return;\n        }\n        // tslint:disable-next-line:no-console\n        this._fnOutput(`${InternalLogLevel[this._level].toString()} <INTERNAL LOGGER> ${this._name} ${msg()}${error ? \"\\n\" + error.stack : \"\"}`);\n    }\n}\nclass InternalProviderImpl {\n    constructor() {\n        this._loggers = new EnhancedMap();\n        this._logLevel = InternalLogLevel.Error;\n        this._fnOutput = InternalProviderImpl.logConsole;\n    }\n    getLogger(name) {\n        return this._loggers.computeIfAbsent(name, key => new InternalLoggerImpl(key, this._logLevel, this._fnOutput));\n    }\n    changeLogLevel(level) {\n        this._logLevel = level;\n        this._loggers.forEach(logger => logger.setLevel(level));\n    }\n    changeOutput(_fnOutput) {\n        this._fnOutput = _fnOutput;\n        this._loggers.forEach(logger => logger.setOutput(this._fnOutput));\n    }\n    reset() {\n        this.changeLogLevel(InternalLogLevel.Error);\n        this._fnOutput = InternalProviderImpl.logConsole;\n        this._loggers.forEach(logger => logger.setOutput(this._fnOutput));\n    }\n    static logConsole(msg) {\n        // tslint:disable-next-line:no-console\n        if (console && console.log) {\n            // tslint:disable-next-line:no-console\n            console.log(msg);\n        }\n    }\n}\nconst provider = new InternalProviderImpl();\n\nvar InternalLogger = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  INTERNAL_LOGGING_SETTINGS: INTERNAL_LOGGING_SETTINGS,\n  get InternalLogLevel () { return InternalLogLevel; },\n  getInternalLogger: getInternalLogger\n});\n\n/**\n * Log level for a logger.\n */\nvar LogLevel;\n(function (LogLevel) {\n    // Do not change values/order. Logging a message relies on this.\n    LogLevel[LogLevel[\"Trace\"] = 0] = \"Trace\";\n    LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n    LogLevel[LogLevel[\"Warn\"] = 3] = \"Warn\";\n    LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\n    LogLevel[LogLevel[\"Fatal\"] = 5] = \"Fatal\";\n    LogLevel[LogLevel[\"Off\"] = 6] = \"Off\";\n})(LogLevel || (LogLevel = {}));\n/* tslint:disable:no-namespace */\n(function (LogLevel) {\n    /**\n     * Convert given value to LogLevel, if not matching returns undefined.\n     * @param val Value to convert\n     */\n    function toLogLevel(val) {\n        switch (val.toLowerCase()) {\n            case \"trace\":\n                return LogLevel.Trace;\n            case \"debug\":\n                return LogLevel.Debug;\n            case \"info\":\n                return LogLevel.Info;\n            case \"warn\":\n                return LogLevel.Warn;\n            case \"error\":\n                return LogLevel.Error;\n            case \"fatal\":\n                return LogLevel.Fatal;\n            case \"off\":\n                return LogLevel.Off;\n            default:\n                return undefined;\n        }\n    }\n    LogLevel.toLogLevel = toLogLevel;\n})(LogLevel || (LogLevel = {}));\n/* tslint:disable:enable-namespace */\n\n/**\n * Standard logger implementation that provides the basis for all loggers.\n */\nclass CoreLoggerImpl {\n    constructor(runtime) {\n        this._runtime = runtime;\n    }\n    get id() {\n        return this._runtime.id;\n    }\n    get logLevel() {\n        return this._runtime.level;\n    }\n    get runtimeSettings() {\n        /* Return it as new literal, we don't want people to play with our internal state */\n        return Object.assign({}, this._runtime);\n    }\n    set runtimeSettings(runtime) {\n        this._runtime = runtime;\n    }\n    trace(message, ...args) {\n        this.logMessage(LogLevel.Trace, message, args);\n    }\n    debug(message, ...args) {\n        this.logMessage(LogLevel.Debug, message, args);\n    }\n    info(message, ...args) {\n        this.logMessage(LogLevel.Info, message, args);\n    }\n    warn(message, ...args) {\n        this.logMessage(LogLevel.Warn, message, args);\n    }\n    error(message, ...args) {\n        this.logMessage(LogLevel.Error, message, args);\n    }\n    fatal(message, ...args) {\n        this.logMessage(LogLevel.Fatal, message, args);\n    }\n    logMessage(level, logMessageType, args) {\n        if (this._runtime.level > level) {\n            return;\n        }\n        const nowMillis = Date.now();\n        const message = typeof logMessageType === \"string\" ? logMessageType : logMessageType();\n        const errorAndArgs = CoreLoggerImpl.getErrorAndArgs(args);\n        /*\n         * Deal with raw message here.\n         */\n        switch (this._runtime.channel.type) {\n            case \"RawLogChannel\":\n                this._runtime.channel.write({\n                    message,\n                    exception: errorAndArgs.error,\n                    args: errorAndArgs.args,\n                    timeInMillis: nowMillis,\n                    level,\n                    logNames: this._runtime.name,\n                }, this._runtime.argumentFormatter);\n                return;\n            case \"LogChannel\":\n                this._runtime.channel.write(this.createLogMessage(message, level, errorAndArgs, nowMillis));\n                break;\n        }\n    }\n    formatArgValue(value) {\n        try {\n            return this._runtime.argumentFormatter(value);\n        }\n        catch (e) {\n            // We don't really care what failed, except that the convert function failed.\n            return `>>ARG CONVERT FAILED: '${value !== undefined ? value.toString() : \"undefined\"}'<<`;\n        }\n    }\n    createLogMessage(message, level, errorAndArgs, nowMillis) {\n        let errorResult;\n        const error = errorAndArgs.error;\n        const args = errorAndArgs.args;\n        if (error) {\n            errorResult = `${error.name}: ${error.message}`;\n            if (error.stack) {\n                errorResult += `@\\n${error.stack}`;\n            }\n        }\n        /*\n         * We need to add the date, and log names (in front of the now formatted message).\n         * Finally we also need to format any additional arguments and append after the message.\n         */\n        const dateFormatted = this._runtime.dateFormatter(nowMillis);\n        let levelAsStr = LogLevel[level].toUpperCase();\n        if (levelAsStr.length < 5) {\n            levelAsStr += \" \";\n        }\n        const names = typeof this._runtime.name === \"string\" ? this._runtime.name : this._runtime.name.join(\", \");\n        const argsFormatted = typeof args !== \"undefined\" && args.length > 0 ? (\" [\" + (args.map(arg => this.formatArgValue(arg))).join(\", \") + \"]\") : \"\";\n        const completedMessage = dateFormatted + \" \" + levelAsStr + \" [\" + names + \"] \" + message + argsFormatted;\n        return {\n            message: completedMessage,\n            error: errorResult,\n        };\n    }\n    static getErrorAndArgs(args) {\n        /*\n          The args are optional, but the first entry may be an Error or a function to an Error, or finally be a function to extra arguments.\n          The last is only true, if the length of args === 1, otherwise we expect args starting at pos 1 and further to be just that - args.\n         */\n        if (args.length === 0) {\n            return {};\n        }\n        let error;\n        let actualArgs;\n        const value0 = args[0];\n        /* If the first argument is an Error, we can stop straight away, the rest are additional arguments then if any */\n        if (value0 instanceof Error) {\n            error = value0;\n            actualArgs = args.length > 1 ? args.slice(1) : undefined;\n            return { error, args: actualArgs };\n        }\n        /* If the first argument is a function, it means either it will return the Error, or if the array length === 1 a function, returning the arguments */\n        if (typeof value0 === \"function\") {\n            const errorOrArgs = value0();\n            if (errorOrArgs instanceof Error) {\n                error = errorOrArgs;\n                actualArgs = args.length > 1 ? args.slice(1) : undefined;\n                return { error, args: actualArgs };\n            }\n            if (args.length === 1) {\n                /* The first argument was a function, we assume it returned the extra argument(s) */\n                if (Array.isArray(errorOrArgs)) {\n                    return { args: errorOrArgs.length > 0 ? errorOrArgs : undefined };\n                }\n                else {\n                    /* No idea what was returned we just assume a single value */\n                    return { args: errorOrArgs };\n                }\n            }\n            else {\n                /*\n                  This is a weird situation but there's no way to avoid it, the first argument was a function but did not return an Error and the args are > 1,\n                  so just add the args returned, as well as any remaining.\n                */\n                if (Array.isArray(errorOrArgs)) {\n                    return { args: [...errorOrArgs, ...args.slice(1)] };\n                }\n                return { args: [errorOrArgs, ...args.slice(1)] };\n            }\n        }\n        /* All args are ordinary arguments, or at least the first arg was not an Error or a Function, so we add all as args */\n        return { args };\n    }\n}\n\n/**\n * Pad given value with given fillChar from the beginning (default is an empty space)\n * @param value Value to pad\n * @param length The length the string must be\n * @param fillChar The padding char (1 char length allowed only)\n * @return Padded string or the same string if it is already of given length (or larger).\n */\nfunction padStart(value, length, fillChar = \" \") {\n    return padInternal(value, length, \"start\", fillChar);\n}\n/**\n * Pad given value with given fillChar from the end (default is an empty space)\n * @param value Value to pad\n * @param length The length the string must be\n * @param fillChar The padding char (1 char length allowed only)\n * @return Padded string or the same string if it is already of given length (or larger).\n */\nfunction padEnd(value, length, fillChar = \" \") {\n    return padInternal(value, length, \"end\", fillChar);\n}\n/**\n * Returns the max length of a string value in given array\n * @param arr Array to check\n * @return Max length, 0 if array is empty\n */\nfunction maxLengthStringValueInArray(arr) {\n    return arr\n        .map(v => v.length)\n        .reduce((previous, current) => {\n        if (current > previous) {\n            return current;\n        }\n        return previous;\n    }, 0);\n}\nfunction padInternal(value, length, padType, fillChar = \" \") {\n    if (length <= value.length) {\n        return value;\n    }\n    if (fillChar.length > 1) {\n        throw new Error(`Fill char must be one char exactly, it is: ${fillChar.length}`);\n    }\n    const charsNeeded = length - value.length;\n    let padding = \"\";\n    for (let i = 0; i < charsNeeded; i++) {\n        padding += fillChar;\n    }\n    if (padType === \"start\") {\n        return padding + value;\n    }\n    return value + padding;\n}\n\n/**\n * Default argument formatter function, used by the library, see {@link ArgumentFormatterType}.\n * Can be used by an end user as well if needed.\n * @param arg The argument to format\n * @returns argument stringified to string (JSON.stringify), if arg is undefined returns \"undefined\" (without quotes).\n */\nfunction formatArgument(arg) {\n    if (arg === undefined) {\n        return \"undefined\";\n    }\n    return JSON.stringify(arg);\n}\n/**\n * Default date formatter function, used by the library, see {@link DateFormatterType}.\n * Can be used by an end user as well if needed.\n * @param millisSinceEpoch Milliseconds since epoch\n * @returns The date in format: yyyy-MM-dd HH:mm:ss,SSS (example: 2021-02-26 09:06:28,123)\n */\nfunction formatDate(millisSinceEpoch) {\n    const date = new Date(millisSinceEpoch);\n    const year = date.getFullYear();\n    const month = padStart((date.getMonth() + 1).toString(), 2, \"0\");\n    const day = padStart(date.getDate().toString(), 2, \"0\");\n    const hours = padStart(date.getHours().toString(), 2, \"0\");\n    const minutes = padStart(date.getMinutes().toString(), 2, \"0\");\n    const seconds = padStart(date.getSeconds().toString(), 2, \"0\");\n    const millis = padStart(date.getMilliseconds().toString(), 3, \"0\");\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds},${millis}`;\n}\n\n/* tslint:disable:no-console */\n/**\n * Default standard LogChannel which logs to console.\n */\nclass ConsoleLogChannel {\n    constructor() {\n        this.type = \"LogChannel\";\n    }\n    write(msg) {\n        if (console && console.log) {\n            console.log(msg.message + (msg.error ? `\\n${msg.error}` : \"\"));\n        }\n    }\n}\n\n/* tslint:disable:no-namespace */\n/**\n * Provides access to various default channels provided by typescript logging.\n */\nvar DefaultChannels;\n(function (DefaultChannels) {\n    /**\n     * Create a new standard LogChannel that logs to the console.\n     */\n    function createConsoleChannel() {\n        return new ConsoleLogChannel();\n    }\n    DefaultChannels.createConsoleChannel = createConsoleChannel;\n})(DefaultChannels || (DefaultChannels = {}));\n\n/**\n * Implementation for {@link LogProvider}\n */\nclass LogProviderImpl {\n    constructor(name, settings) {\n        this._log = getInternalLogger(\"core.impl.LogProviderImpl\");\n        this._name = name;\n        this._settings = settings;\n        this._loggers = new EnhancedMap();\n        this._idToKeyMap = new EnhancedMap();\n        this._globalRuntimeSettings = { level: settings.level, channel: settings.channel };\n        this._nextLoggerId = 1;\n        this._log.trace(() => `Created LogProviderImpl with settings: ${JSON.stringify(this._settings)}`);\n    }\n    get runtimeSettings() {\n        return Object.assign(Object.assign({}, this._settings), { level: this._globalRuntimeSettings.level, channel: this._globalRuntimeSettings.channel });\n    }\n    getLogger(name) {\n        return this.getOrCreateLogger(name);\n    }\n    updateLoggerRuntime(log, settings) {\n        this._log.debug(() => `Updating logger ${log.id} runtime settings using: '${JSON.stringify(settings)}'`);\n        const key = this._idToKeyMap.get(log.id);\n        if (key === undefined) {\n            this._log.warn(() => `Cannot update logger with id: ${log.id}, it was not found.`);\n            return false;\n        }\n        this._loggers.computeIfPresent(key, (currentKey, currentValue) => {\n            currentValue.runtimeSettings = LogProviderImpl.mergeRuntimeSettingsIntoLogRuntime(currentValue.runtimeSettings, settings);\n            return currentValue;\n        });\n        return true;\n    }\n    updateRuntimeSettings(settings) {\n        this._log.debug(() => `Updating global runtime settings and updating existing loggers runtime settings using: '${JSON.stringify(settings)}'`);\n        this._globalRuntimeSettings = {\n            /*\n             * Undefined check is necessary, as level is a number (and LogLevel.Trace = 0), a ternary check otherwise results in the annoying \"truthy/falsy\"\n             * behavior of javascript where 0 is seen as false.\n             */\n            level: settings.level !== undefined ? settings.level : this._globalRuntimeSettings.level,\n            channel: settings.channel !== undefined ? settings.channel : this._globalRuntimeSettings.channel,\n        };\n        this._loggers.forEach(logger => logger.runtimeSettings = LogProviderImpl.mergeRuntimeSettingsIntoLogRuntime(logger.runtimeSettings, settings));\n    }\n    /**\n     * Removes all state and loggers, it reverts back to as it was after initial construction.\n     */\n    clear() {\n        this._loggers.clear();\n        this._idToKeyMap.clear();\n        this._globalRuntimeSettings = Object.assign({}, this._settings);\n        this._nextLoggerId = 1;\n    }\n    getOrCreateLogger(name) {\n        const key = LogProviderImpl.createKey(name);\n        const logger = this._loggers.computeIfAbsent(key, () => {\n            const runtime = {\n                level: this._globalRuntimeSettings.level,\n                channel: this._globalRuntimeSettings.channel,\n                id: this.nextLoggerId(),\n                name,\n                argumentFormatter: this._settings.argumentFormatter,\n                dateFormatter: this._settings.dateFormatter,\n            };\n            return new CoreLoggerImpl(runtime);\n        });\n        this._idToKeyMap.computeIfAbsent(logger.id, () => key);\n        return logger;\n    }\n    nextLoggerId() {\n        const result = this._name + \"_\" + this._nextLoggerId;\n        this._nextLoggerId++;\n        return result;\n    }\n    static mergeRuntimeSettingsIntoLogRuntime(currentSettings, settings) {\n        return Object.assign(Object.assign({}, currentSettings), { \n            /*\n             * Undefined check is necessary, as level is a number (and LogLevel.Trace = 0), a ternary check otherwise results in the annoying \"truthy/falsy\"\n             * behavior of javascript where 0 is seen as false.\n             */\n            level: settings.level !== undefined ? settings.level : currentSettings.level, channel: settings.channel !== undefined ? settings.channel : currentSettings.channel });\n    }\n    static createKey(name) {\n        if (typeof name === \"string\") {\n            return name;\n        }\n        return name.join(\",\");\n    }\n}\n\n/**\n * Create a new LogProvider, this is for flavor usage only. End users should not\n * use this and instead use whatever the flavor offers to build some config and\n * get loggers from there.\n */\nfunction createLogProvider(name, settings) {\n    return new LogProviderImpl(name, settings);\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  EnhancedMap: EnhancedMap,\n  maxLengthStringValueInArray: maxLengthStringValueInArray,\n  padEnd: padEnd,\n  padStart: padStart\n});\n\n/**\n * LogChannel that pushes log messages to a buffer.\n */\nclass ArrayLogChannel {\n    constructor() {\n        this._buffer = [];\n        this.type = \"LogChannel\";\n    }\n    write(msg) {\n        this._buffer.push(msg);\n    }\n    get logMessages() {\n        return this._buffer;\n    }\n    get messages() {\n        return this._buffer.map(msg => msg.message);\n    }\n}\n/**\n * RawLogChannel that pushes raw log messages to a buffer.\n */\nclass ArrayRawLogChannel {\n    constructor() {\n        this._buffer = [];\n        this.type = \"RawLogChannel\";\n    }\n    write(msg, _) {\n        this._buffer.push(msg);\n    }\n    get messages() {\n        return this._buffer.map(m => m.message);\n    }\n    get errors() {\n        return this._buffer.map(m => m.exception);\n    }\n    get size() {\n        return this._buffer.length;\n    }\n    get rawMessages() {\n        return this._buffer;\n    }\n    clear() {\n        this._buffer = [];\n    }\n}\n/**\n * Test class to help test the log control.\n */\nclass TestControlMessage {\n    constructor() {\n        this._messages = [];\n        this.write = this.write.bind(this);\n    }\n    get messages() {\n        return this._messages;\n    }\n    write(msg) {\n        this._messages.push(msg);\n    }\n    clear() {\n        this._messages = [];\n    }\n}\n\nvar TestClasses = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArrayLogChannel: ArrayLogChannel,\n  ArrayRawLogChannel: ArrayRawLogChannel,\n  TestControlMessage: TestControlMessage\n});\n\nexport { InternalLogger as $internal, TestClasses as $test, DefaultChannels, LogLevel, createLogProvider, formatArgument, formatDate, index as util };\n//# sourceMappingURL=typescript-logging.esm.js.map\n","import { Logger as Log4TSLogger } from 'typescript-logging-log4ts-style';\nimport { LogErrorType } from './types';\n\n/**\n * Wrapper Logger class that provides simplified logging interface\n * Built on top of typescript-logging log4ts-style library\n */\nexport class Logger {\n    private readonly log4tsLogger: Log4TSLogger;\n\n    constructor(log4tsLogger: Log4TSLogger) {\n        this.log4tsLogger = log4tsLogger;\n    }\n\n    /**\n     * Log debug messages\n     */\n    debug(message: string): void;\n    debug(message: string, ...args: unknown[]): void;\n    debug(message: string, ...args: unknown[]): void {\n        this.log4tsLogger.debug(() => message, ...args);\n    }\n\n    /**\n     * Log info messages\n     */\n    info(message: string): void;\n    info(message: string, ...args: unknown[]): void;\n    info(message: string, ...args: unknown[]): void {\n        this.log4tsLogger.info(() => message, ...args);\n    }\n\n    /**\n     * Log warning messages\n     */\n    warn(message: string): void;\n    warn(message: string, ...args: unknown[]): void;\n    warn(message: string, ...args: unknown[]): void {\n        this.log4tsLogger.warn(() => message, ...args);\n    }\n\n    /**\n     * Log error messages with optional error object\n     */\n    error(message: string): void;\n    error(message: string, ...args: unknown[]): void;\n    error(message: string, error: LogErrorType): void;\n    error(message: string, error: LogErrorType, ...args: unknown[]): void;\n    error(message: string, errorOrFirstArg?: LogErrorType | unknown, ...remainingArgs: unknown[]): void {\n        if (this.isLogErrorType(errorOrFirstArg)) {\n            // Called with error parameter\n            const error = errorOrFirstArg;\n            if (typeof error === 'string') {\n                // Convert string error to Error object for consistent handling\n                const errorObj = new Error(error);\n                this.log4tsLogger.error(() => message, errorObj, ...remainingArgs);\n            } else {\n                this.log4tsLogger.error(() => message, error, ...remainingArgs);\n            }\n        } else {\n            // Called without error parameter (standard args)\n            const allArgs = errorOrFirstArg !== undefined ? [errorOrFirstArg, ...remainingArgs] : remainingArgs;\n            this.log4tsLogger.error(() => message, ...allArgs);\n        }\n    }\n\n    /**\n     * Log fatal messages with optional error object\n     */\n    fatal(message: string): void;\n    fatal(message: string, ...args: unknown[]): void;\n    fatal(message: string, error: LogErrorType): void;\n    fatal(message: string, error: LogErrorType, ...args: unknown[]): void;\n    fatal(message: string, errorOrFirstArg?: LogErrorType | unknown, ...remainingArgs: unknown[]): void {\n        if (this.isLogErrorType(errorOrFirstArg)) {\n            // Called with error parameter\n            const error = errorOrFirstArg;\n            if (typeof error === 'string') {\n                // Convert string error to Error object for consistent handling\n                const errorObj = new Error(error);\n                this.log4tsLogger.fatal(() => message, errorObj, ...remainingArgs);\n            } else {\n                this.log4tsLogger.fatal(() => message, error, ...remainingArgs);\n            }\n        } else {\n            // Called without error parameter (standard args)\n            const allArgs = errorOrFirstArg !== undefined ? [errorOrFirstArg, ...remainingArgs] : remainingArgs;\n            this.log4tsLogger.fatal(() => message, ...allArgs);\n        }\n    }\n\n    /**\n     * Type guard to check if a parameter is a LogErrorType\n     */\n    private isLogErrorType(value: unknown): value is LogErrorType {\n        return typeof value === 'string' || value instanceof Error;\n    }\n}","/**\n * Log levels for controlling logging output\n */\nexport enum LogLevel {\n    Trace = 0,\n    Debug = 1,\n    Info = 2,\n    Warn = 3,\n    Error = 4,\n    Fatal = 5,\n    Off = 6\n}\n\n/**\n * Type definition for error objects that can be logged\n * Supports both Exception/Error objects and string messages\n */\nexport type LogErrorType = Error | string;\n\n/**\n * Type for class constructors - used for extracting class names in logger factory\n */\nexport type Constructor<T = {}> = new (...args: any[]) => T;\n","/**\n * Log message interface for custom channels\n */\nexport interface LogMessage {\n    readonly level: string;\n    readonly timeInMillis: number;\n    readonly logName: string;\n    readonly message: string;\n    readonly exception?: Error;\n    readonly args?: ReadonlyArray<unknown>;\n}\n\n/**\n * Custom channel interface for formatted log messages\n */\nexport interface CustomLogChannel {\n    readonly type: 'LogChannel';\n    readonly write: (msg: LogMessage) => void;\n}\n\n/**\n * Custom raw channel interface for complete control over formatting\n */\nexport interface CustomRawLogChannel {\n    readonly type: 'RawLogChannel';\n    readonly write: (msg: LogMessage, formatArg: (arg: unknown) => string) => void;\n}\n\n/**\n * Simple channel types for client-side logging\n */\nexport enum ChannelType {\n    CONSOLE = 'console',\n    CUSTOM = 'custom',\n    MULTI = 'multi',\n    ASYNC_CONSUMER = 'async-consumer'\n}\n\n/**\n * Log format template type\n * \n * String templates support the following placeholders:\n * - {timestamp}: Full ISO timestamp (e.g., '2025-10-07T14:05:23.000Z')\n * - {time}: 24-hour time with milliseconds (e.g., '14:05:23.123')\n * - {level}: Log level (INFO, ERROR, etc.)\n * - {logger}: Logger name\n * - {message}: The log message with {} placeholders interpolated\n * - {args}: Formatted remaining arguments (if any)\n * \n * Message interpolation:\n * - Use {} in log messages for argument interpolation (e.g., 'User {} logged in', username)\n * - Error objects are formatted as \"ErrorName: message\"\n */\nexport type LogFormat = string | ((logMessage: LogMessage) => string);\n\n/**\n * Predefined log formats\n */\nexport enum LogFormatPresets {\n    SIMPLE = '{timestamp} [{level}] {logger}: {message}',\n    DETAILED = '{timestamp} [{level}] [{logger}] {message} {args}',\n    COMPACT = '{level} {logger}: {message}',\n    JSON = 'json',\n    CUSTOM = 'custom'\n}\n\n/**\n * Console channel configuration\n */\nexport interface ConsoleChannelConfig {\n    type: ChannelType.CONSOLE;\n    format?: LogFormat | LogFormatPresets;\n}\n\n/**\n * Custom channel configuration\n */\nexport interface CustomChannelConfig {\n    type: ChannelType.CUSTOM;\n    channel: CustomLogChannel | CustomRawLogChannel;\n}\n\n/**\n * Multi-channel configuration - logs to multiple channels simultaneously\n */\nexport interface MultiChannelConfig {\n    type: ChannelType.MULTI;\n    channels: ChannelConfig[];\n}\n\n/**\n * Async consumer channel configuration - routes to async consumers by channel name\n */\nexport interface AsyncConsumerChannelConfig {\n    type: ChannelType.ASYNC_CONSUMER;\n    channelName: string;\n}\n\n/**\n * Union type for channel configurations\n */\nexport type ChannelConfig = ConsoleChannelConfig | CustomChannelConfig | MultiChannelConfig | AsyncConsumerChannelConfig;\n\n/**\n * Date formatter function type\n */\nexport type DateFormatter = (timeInMillis: number) => string;\n\n/**\n * Argument formatter function type\n */\nexport type ArgumentFormatter = (arg: unknown) => string;\n\n/**\n * Appender configuration interface\n */\nexport interface AppenderConfig {\n    /** Unique identifier for this appender */\n    name: string;\n    \n    /** Log level for this appender */\n    level?: LogLevel;\n    \n    /** Groups that this appender should handle */\n    groups?: string[] | RegExp[];\n    \n    /** Channel configuration for this appender */\n    channel: ChannelConfig;\n    \n    /** Optional log format for this appender */\n    format?: LogFormat | LogFormatPresets;\n    \n    /** Optional date formatter for this appender */\n    dateFormatter?: DateFormatter;\n    \n    /** Optional argument formatter for this appender */\n    argumentFormatter?: ArgumentFormatter;\n    \n    /** Whether this appender is enabled */\n    enabled?: boolean;\n}\n\n/**\n * Import LogLevel from types (avoiding circular dependency)\n */\ntype LogLevel = import('./types').LogLevel;\n","import { LogChannel, RawLogChannel } from 'typescript-logging';\nimport { ChannelConfig, ChannelType, CustomLogChannel, CustomRawLogChannel, MultiChannelConfig, AsyncConsumerChannelConfig, LogFormat, LogFormatPresets, LogMessage } from './ChannelTypes';\n\n/**\n * Internal type for raw log messages from typescript-logging\n */\ninterface InternalLogMessage {\n  level?: { toString(): string };\n  timeInMillis?: number;\n  logNames?: string | string[];\n  message?: string;\n  exception?: unknown;\n  args?: unknown[];\n  error?: string; // Additional field for error handling\n}\n\n/**\n * Helper function for {} placeholder interpolation with proper Error handling\n * @internal\n */\nfunction interpolatePlaceholders(message: string, args: unknown[]): { processedMessage: string; remainingArgs: unknown[] } {\n    if (!args || args.length === 0) {\n        return { processedMessage: message, remainingArgs: [] };\n    }\n    \n    const argsArray = [...args];\n    let argIndex = 0;\n    \n    const processedMessage = message.replace(/\\{\\}/g, () => {\n        if (argIndex < argsArray.length) {\n            const arg = argsArray[argIndex++];\n            if (arg instanceof Error) {\n                return `${arg.name}: ${arg.message}`;\n            }\n            if (typeof arg === 'object' && arg !== null) {\n                try {\n                    return JSON.stringify(arg);\n                } catch {\n                    return String(arg);\n                }\n            }\n            return String(arg);\n        }\n        return '{}'; // Keep unmatched placeholders\n    });\n    \n    const remainingArgs = argIndex < argsArray.length ? argsArray.slice(argIndex) : [];\n    return { processedMessage, remainingArgs };\n}\n\n/**\n * Helper function to format remaining arguments with proper Error handling\n * @internal\n */\nfunction formatRemainingArgs(remainingArgs: unknown[]): string {\n    if (remainingArgs.length === 0) return '';\n    \n    return ' [' + remainingArgs.map((arg: unknown) => {\n        if (arg instanceof Error) {\n            return `${arg.name}: ${arg.message}`;\n        }\n        return typeof arg === 'object' ? JSON.stringify(arg) : String(arg);\n    }).join(', ') + ']';\n}\n\n/**\n * Factory for creating logging channels\n * @internal - For internal use only\n */\nexport class ChannelFactory {\n    \n    /**\n     * Create a channel from configuration\n     * @internal\n     */\n    public static createChannel(config: ChannelConfig, format?: LogFormat | LogFormatPresets): LogChannel | RawLogChannel {\n        switch (config.type) {\n            case ChannelType.CONSOLE:\n                return this.getDefaultConsoleChannel(format || (config as any).format);\n                \n            case ChannelType.CUSTOM:\n                return this.mapCustomChannelToLibrary(config.channel);\n                \n            case ChannelType.MULTI:\n                return this.createMultiChannel(config);\n                \n            case ChannelType.ASYNC_CONSUMER:\n                return this.createAsyncConsumerChannel(config);\n                \n            default: {\n                throw new Error(`Unknown channel type: ${(config as { type: string }).type}`);\n            }\n        }\n    }\n    \n    /**\n     * Format a log message according to the specified format\n     * @internal\n     */\n    private static formatLogMessage(logMessage: InternalLogMessage, format?: LogFormat | LogFormatPresets): string {\n        // Default format if none specified\n        if (!format) {\n            format = LogFormatPresets.SIMPLE;\n        }\n        \n        // Handle preset formats\n        if (typeof format === 'string' && Object.values(LogFormatPresets).includes(format as LogFormatPresets)) {\n            switch (format as LogFormatPresets) {\n                case LogFormatPresets.JSON:\n                    return JSON.stringify({\n                        timestamp: new Date().toISOString(),\n                        level: logMessage.level?.toString() || 'INFO',\n                        logger: Array.isArray(logMessage.logNames) ? logMessage.logNames[0] : (logMessage.logNames || 'unknown'),\n                        message: logMessage.message || '',\n                        args: logMessage.args\n                    });\n                case LogFormatPresets.COMPACT:\n                    format = '{level} {logger}: {message}';\n                    break;\n                case LogFormatPresets.DETAILED:\n                    format = '{timestamp} [{level}] [{logger}] {message} {args}';\n                    break;\n                case LogFormatPresets.SIMPLE:\n                default:\n                    format = '{timestamp} [{level}] {logger}: {message}';\n                    break;\n            }\n        }\n        \n        // Handle function format\n        if (typeof format === 'function') {\n            const logMsg: LogMessage = {\n                level: logMessage.level?.toString() || 'INFO',\n                timeInMillis: logMessage.timeInMillis || Date.now(),\n                logName: Array.isArray(logMessage.logNames) ? logMessage.logNames[0] : (logMessage.logNames || 'unknown'),\n                message: logMessage.message || '',\n                exception: logMessage.exception as Error | undefined,\n                args: logMessage.args\n            };\n            return format(logMsg);\n        }\n        \n        // Handle string template format\n        if (typeof format === 'string') {\n            const timestamp = new Date().toISOString();\n            const now = new Date();\n            const time = now.getHours().toString().padStart(2, '0') + ':' +\n                        now.getMinutes().toString().padStart(2, '0') + ':' +\n                        now.getSeconds().toString().padStart(2, '0') + '.' +\n                        now.getMilliseconds().toString().padStart(3, '0'); // 24-hour format with milliseconds\n            \n            // Parse pre-formatted messages from typescript-logging\n            let level: string;\n            let logger: string;\n            let message: string;\n            \n            // Check if the message is pre-formatted by typescript-logging\n            if (logMessage.message && typeof logMessage.message === 'string') {\n                // Pattern: \"2025-10-07 17:18:42,139 DEBUG [PageComponent:DebugPage] Initializing...\"\n                const preFormattedMatch = logMessage.message.match(/^\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2},\\d{3}\\s+(\\w+)\\s+\\[([^\\]]+)\\]\\s+(.*)$/);\n                \n                if (preFormattedMatch) {\n                    // Extract from pre-formatted message\n                    level = preFormattedMatch[1];\n                    logger = preFormattedMatch[2];\n                    message = preFormattedMatch[3];\n                } else {\n                    // Fallback to library-provided values\n                    level = logMessage.level?.toString() || 'INFO';\n                    logger = Array.isArray(logMessage.logNames) ? logMessage.logNames[0] : (logMessage.logNames || 'unknown');\n                    message = logMessage.message;\n                }\n            } else {\n                // Fallback to library-provided values\n                level = logMessage.level?.toString() || 'INFO';\n                logger = Array.isArray(logMessage.logNames) ? logMessage.logNames[0] : (logMessage.logNames || 'unknown');\n                message = logMessage.message || '';\n            }\n            // Process {} placeholders in the message if args are present\n            const { processedMessage, remainingArgs } = interpolatePlaceholders(message, logMessage.args || []);\n            const formattedArgs = formatRemainingArgs(remainingArgs);\n            \n            return format\n                .replace('{timestamp}', timestamp)\n                .replace('{time}', time)\n                .replace('{level}', level.toUpperCase())\n                .replace('{logger}', logger)\n                .replace('{message}', processedMessage)\n                .replace('{args}', formattedArgs);\n        }\n        \n        // Fallback to default format\n        const timestamp = new Date().toISOString();\n        const level = logMessage.level?.toString() || 'INFO';\n        const logger = Array.isArray(logMessage.logNames) ? logMessage.logNames[0] : (logMessage.logNames || 'unknown');\n        let message = logMessage.message || '';\n        \n        // Process {} placeholders in fallback path too\n        const { processedMessage: interpolatedMessage } = interpolatePlaceholders(message, logMessage.args || []);\n        message = interpolatedMessage;\n        \n        return `${timestamp} [${level.toUpperCase()}] ${logger}: ${message}`;\n    }\n\n    /**\n     * Get default console channel\n     * @internal\n     */\n    public static getDefaultConsoleChannel(format?: LogFormat | LogFormatPresets): LogChannel {\n        return {\n            type: 'LogChannel',\n            write: (logMessage: InternalLogMessage) => {\n                // Use format processing if available, otherwise fall back to parsing pre-formatted messages\n                let formattedOutput: string;\n                \n                if (format) {\n                    // Use the specified format\n                    formattedOutput = this.formatLogMessage(logMessage, format);\n                } else {\n                    // Legacy behavior - parse pre-formatted messages\n                    let level: string;\n                    let loggerName: string;\n                    let actualMessage: string;\n                    const timestamp = new Date().toISOString();\n                    \n                    // Check if the message is pre-formatted by typescript-logging\n                    if (logMessage.message && typeof logMessage.message === 'string') {\n                        // Pattern: \"2025-10-03 17:47:25,102 INFO  [_OpinionApp] LoggerFactory integrated...\"\n                        const preFormattedMatch = logMessage.message.match(/^\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2},\\d{3}\\s+(\\w+)\\s+\\[([^\\]]+)\\]\\s+(.*)$/);\n                        \n                        if (preFormattedMatch) {\n                            // Extract from pre-formatted message\n                            level = preFormattedMatch[1];\n                            loggerName = preFormattedMatch[2];\n                            actualMessage = preFormattedMatch[3];\n                        } else {\n                            // Fallback to library-provided values\n                            level = logMessage.level?.toString() || 'INFO';\n                            loggerName = Array.isArray(logMessage.logNames) ? logMessage.logNames[0] : (logMessage.logNames || 'unknown');\n                            actualMessage = logMessage.message;\n                        }\n                    } else {\n                        // Fallback to library-provided values\n                        level = logMessage.level?.toString() || 'INFO';\n                        loggerName = Array.isArray(logMessage.logNames) ? logMessage.logNames[0] : (logMessage.logNames || 'unknown');\n                        actualMessage = logMessage.message || '';\n                    }\n                    \n                    // Process {} placeholders in legacy path too\n                    const { processedMessage: interpolatedMessage } = interpolatePlaceholders(actualMessage, logMessage.args || []);\n                    actualMessage = interpolatedMessage;\n                    \n                    formattedOutput = `${timestamp} [${level.toUpperCase()}] ${loggerName}: ${actualMessage}`;\n                }\n                \n                // Use appropriate console method based on level\n                const level = logMessage.level?.toString() || 'INFO';\n                const logMethod = this.getConsoleMethod(level);\n                logMethod(formattedOutput);\n                \n                // Handle arguments if present (only when not using custom format)\n                if (!format && logMessage.args && logMessage.args.length > 0) {\n                    console.log('  └─ Args:', ...logMessage.args);\n                }\n                \n                // Handle exceptions - ALWAYS show exceptions regardless of format\n                if (logMessage.exception) {\n                    console.error('  └─ Exception:', logMessage.exception);\n                }\n                \n                // Also check for Error objects in args and log them separately\n                if (logMessage.args && logMessage.args.length > 0) {\n                    logMessage.args.forEach((arg, index) => {\n                        if (arg instanceof Error) {\n                            console.error(`  └─ Error Arg[${index}]:`, arg);\n                        }\n                    });\n                }\n            }\n        };\n    }\n    \n    /**\n     * Get the appropriate console method for the log level\n     * @internal\n     */\n    private static getConsoleMethod(level: string): (...args: unknown[]) => void {\n        const levelUpper = level.toUpperCase();\n        switch (levelUpper) {\n            case 'ERROR':\n            case 'FATAL':\n                return console.error;\n            case 'WARN':\n                return console.warn;\n            case 'DEBUG':\n            case 'TRACE':\n                return console.debug;\n            case 'INFO':\n            default:\n                return console.log;\n        }\n    }\n\n    /**\n     * Map our custom channel interfaces to the library's interfaces\n     * @internal\n     */\n    private static mapCustomChannelToLibrary(channel: CustomLogChannel | CustomRawLogChannel): LogChannel | RawLogChannel {\n        if (channel.type === 'LogChannel') {\n            // Simple mapping - let 3rd party library handle the details\n            const logChannel: LogChannel = {\n                type: 'LogChannel',\n                write: (libMsg: InternalLogMessage) => {\n                    // Parse the pre-formatted message to extract components\n                    let level: string;\n                    let loggerName: string;\n                    let actualMessage: string;\n                    \n                    // Check if the message is pre-formatted by typescript-logging\n                    if (libMsg.message && typeof libMsg.message === 'string') {\n                        // Pattern: \"2025-10-03 17:47:25,102 INFO  [CustomChannelLogger] Test message through custom channel\"\n                        const preFormattedMatch = libMsg.message.match(/^\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2},\\d{3}\\s+(\\w+)\\s+\\[([^\\]]+)\\]\\s+(.*)$/);\n                        \n                        if (preFormattedMatch) {\n                            // Extract from pre-formatted message\n                            level = preFormattedMatch[1];\n                            loggerName = preFormattedMatch[2];\n                            actualMessage = preFormattedMatch[3];\n                        } else {\n                            // Fallback to library-provided values\n                            level = libMsg.level?.toString() || 'INFO';\n                            loggerName = Array.isArray(libMsg.logNames) ? libMsg.logNames[0] : (libMsg.logNames || 'unknown');\n                            actualMessage = libMsg.message;\n                        }\n                    } else {\n                        // Fallback to library-provided values\n                        level = libMsg.level?.toString() || 'INFO';\n                        loggerName = Array.isArray(libMsg.logNames) ? libMsg.logNames[0] : (libMsg.logNames || 'unknown');\n                        actualMessage = libMsg.message || '';\n                    }\n                    \n                    // Process {} placeholders in custom channel mapping path\n                    const { processedMessage: interpolatedMessage } = interpolatePlaceholders(actualMessage, libMsg.args || []);\n                    actualMessage = interpolatedMessage;\n                    \n                    // Handle Error objects - they come in the 'error' field as strings\n                    let exception: Error | undefined;\n                    if (libMsg.error && typeof libMsg.error === 'string') {\n                        // Try to reconstruct Error object from string representation\n                        const errorMatch = libMsg.error.match(/^Error: (.+)@/);\n                        if (errorMatch) {\n                            exception = new Error(errorMatch[1]);\n                        }\n                    } else if (libMsg.exception) {\n                        exception = libMsg.exception as Error | undefined;\n                    }\n                    \n                    // Create our LogMessage interface\n                    const ourMsg = {\n                        level: level,\n                        timeInMillis: libMsg.timeInMillis || Date.now(),\n                        logName: loggerName,\n                        message: actualMessage,\n                        exception: exception,\n                        args: libMsg.args\n                    };\n                    channel.write(ourMsg);\n                }\n            };\n            return logChannel;\n        } else {\n            // Simple mapping for raw channel\n            const rawChannel: RawLogChannel = {\n                type: 'RawLogChannel',\n                write: (libMsg: any, formatArg: (arg: unknown) => string) => {\n                    // Parse the pre-formatted message to extract components\n                    let level: string;\n                    let loggerName: string;\n                    let actualMessage: string;\n                    \n                    // Check if the message is pre-formatted by typescript-logging\n                    if (libMsg.message && typeof libMsg.message === 'string') {\n                        // Pattern: \"2025-10-03 17:47:25,102 INFO  [CustomChannelLogger] Test message through custom channel\"\n                        const preFormattedMatch = libMsg.message.match(/^\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2},\\d{3}\\s+(\\w+)\\s+\\[([^\\]]+)\\]\\s+(.*)$/);\n                        \n                        if (preFormattedMatch) {\n                            // Extract from pre-formatted message\n                            level = preFormattedMatch[1];\n                            loggerName = preFormattedMatch[2];\n                            actualMessage = preFormattedMatch[3];\n                        } else {\n                            // Fallback to library-provided values\n                            level = libMsg.level?.toString() || 'INFO';\n                            loggerName = Array.isArray(libMsg.logNames) ? libMsg.logNames[0] : (libMsg.logNames || 'unknown');\n                            actualMessage = libMsg.message;\n                        }\n                    } else {\n                        // Fallback to library-provided values\n                        level = libMsg.level?.toString() || 'INFO';\n                        loggerName = Array.isArray(libMsg.logNames) ? libMsg.logNames[0] : (libMsg.logNames || 'unknown');\n                        actualMessage = libMsg.message || '';\n                    }\n                    \n                    // Process {} placeholders in raw channel mapping path\n                    const { processedMessage: interpolatedMessage } = interpolatePlaceholders(actualMessage, libMsg.args || []);\n                    actualMessage = interpolatedMessage;\n                    \n                    // Handle Error objects - they come in the 'error' field as strings\n                    let exception: Error | undefined;\n                    if (libMsg.error && typeof libMsg.error === 'string') {\n                        // Try to reconstruct Error object from string representation\n                        const errorMatch = libMsg.error.match(/^Error: (.+)@/);\n                        if (errorMatch) {\n                            exception = new Error(errorMatch[1]);\n                        }\n                    } else if (libMsg.exception) {\n                        exception = libMsg.exception as Error | undefined;\n                    }\n                    \n                    // Create our LogMessage interface\n                    const ourMsg = {\n                        level: level,\n                        timeInMillis: libMsg.timeInMillis || Date.now(),\n                        logName: loggerName,\n                        message: actualMessage,\n                        exception: exception,\n                        args: libMsg.args\n                    };\n                    channel.write(ourMsg, formatArg);\n                }\n            };\n            return rawChannel;\n        }\n    }\n\n    /**\n     * Create an async consumer channel that routes to LoggerFactory's consumer system\n     * @internal\n     */\n    private static createAsyncConsumerChannel(_config: AsyncConsumerChannelConfig): LogChannel {\n        return {\n            type: 'LogChannel',\n            write: (_logMessage: InternalLogMessage) => {\n                // This is a placeholder - the actual routing to consumers\n                // will be handled by LoggerFactory when it overrides this method\n                \n                // The LoggerFactory will override this channel's write method\n                // to route messages to the appropriate async consumers\n                // Temporary placeholder - will be overridden by LoggerFactory\n            }\n        };\n    }\n\n    /**\n     * Create a multi-channel that writes to multiple channels simultaneously\n     * @internal\n     */\n    private static createMultiChannel(config: MultiChannelConfig): LogChannel {\n        // Prevent infinite recursion by ensuring no nested multi-channels\n        const nonMultiChannels = config.channels.filter(ch => ch.type !== ChannelType.MULTI);\n        \n        if (nonMultiChannels.length === 0) {\n            throw new Error('Multi-channel must contain at least one non-multi channel');\n        }\n        \n        // Create all the individual channels\n        const channels = nonMultiChannels.map(channelConfig => \n            this.createChannel(channelConfig)\n        );\n        \n        // Return a LogChannel that writes to all channels\n        return {\n            type: 'LogChannel',\n            write: (logMessage: InternalLogMessage) => {\n                // Write to all channels\n                channels.forEach(channel => {\n                    try {\n                        if (channel.type === 'LogChannel') {\n                            (channel as any).write(logMessage);\n                        } else {\n                            // For RawLogChannel, we need to simulate the formatArg function\n                            const formatArg = (arg: unknown) => {\n                                if (arg === null || arg === undefined) return String(arg);\n                                if (typeof arg === 'string') return arg;\n                                if (typeof arg === 'object') {\n                                    try {\n                                        return JSON.stringify(arg);\n                                    } catch {\n                                        return String(arg);\n                                    }\n                                }\n                                return String(arg);\n                            };\n                            \n                            // Convert LogMessage to RawLogMessage-like structure\n                            const rawMessage = {\n                                ...logMessage,\n                                args: logMessage.args || []\n                            };\n                            \n                            (channel as any).write(rawMessage, formatArg);\n                        }\n                    } catch (error) {\n                        // Don't let one channel failure break others\n                        console.error('Channel write error:', error);\n                    }\n                });\n            }\n        };\n    }\n}\n","import { CustomLogChannel, LogMessage } from './ChannelTypes';\n\n/**\n * Async log consumer interface\n */\nexport interface AsyncLogConsumer {\n    /**\n     * Process a log message asynchronously\n     * @param message The log message to process\n     * @returns Promise that resolves when processing is complete\n     */\n    consume(message: LogMessage): Promise<void>;\n    \n    /**\n     * Optional error handler for when consume() throws\n     * @param error The error that occurred\n     * @param message The message that caused the error\n     */\n    onError?(error: Error, message: LogMessage): void;\n}\n\n/**\n * Function type for removing a consumer\n */\nexport type RemoveConsumerFunction = () => void;\n\n/**\n * Channel that manages async log consumers\n */\nexport class AsyncConsumerLogChannel implements CustomLogChannel {\n    readonly type = 'LogChannel' as const;\n    \n    private readonly name: string;\n    private readonly consumers = new Set<AsyncLogConsumer>();\n    private readonly processingQueue: Array<{ message: LogMessage; timestamp: number }> = [];\n    private isProcessing = false;\n    \n    constructor(name: string) {\n        this.name = name;\n    }\n    \n    /**\n     * Get the channel name\n     */\n    getName(): string {\n        return this.name;\n    }\n    \n    /**\n     * Add a consumer to this channel\n     * @param consumer The consumer to add\n     * @returns Function to remove this consumer\n     */\n    addConsumer(consumer: AsyncLogConsumer): RemoveConsumerFunction {\n        this.consumers.add(consumer);\n        \n        // Return removal function\n        return () => {\n            this.consumers.delete(consumer);\n        };\n    }\n    \n    \n    /**\n     * Get the number of consumers\n     */\n    getConsumerCount(): number {\n        return this.consumers.size;\n    }\n    \n    /**\n     * Write log message (from CustomLogChannel interface)\n     * This queues the message for async processing\n     */\n    write(message: LogMessage): void {\n        if (this.consumers.size === 0) {\n            return; // No consumers, skip processing\n        }\n        \n        // Add to queue\n        this.processingQueue.push({\n            message,\n            timestamp: Date.now()\n        });\n        \n        // Start processing if not already running\n        if (!this.isProcessing) {\n            this.processQueue();\n        }\n    }\n    \n    /**\n     * Process the queue of messages asynchronously\n     * @private\n     */\n    private async processQueue(): Promise<void> {\n        if (this.isProcessing) {\n            return; // Already processing\n        }\n        \n        this.isProcessing = true;\n        \n        try {\n            while (this.processingQueue.length > 0) {\n                const item = this.processingQueue.shift();\n                if (!item) continue;\n                \n                // Process message with all consumers in parallel\n                const consumerPromises = Array.from(this.consumers).map(consumer =>\n                    this.processWithConsumer(consumer, item.message)\n                );\n                \n                // Wait for all consumers to process this message\n                await Promise.allSettled(consumerPromises);\n            }\n        } finally {\n            this.isProcessing = false;\n        }\n    }\n    \n    /**\n     * Process a message with a specific consumer\n     * @private\n     */\n    private async processWithConsumer(consumer: AsyncLogConsumer, message: LogMessage): Promise<void> {\n        try {\n            await consumer.consume(message);\n        } catch (error) {\n            // Handle consumer errors\n            const err = error instanceof Error ? error : new Error(String(error));\n            \n                if (consumer.onError) {\n                    try {\n                        consumer.onError(err, message);\n                    } catch (onErrorErr) {\n                        // If onError also throws, log to console as fallback\n                        console.error(`AsyncConsumerLogChannel[${this.name}]: Consumer onError handler failed:`, onErrorErr);\n                    }\n                } else {\n                    // Default error handling - log to console\n                    console.error(`AsyncConsumerLogChannel[${this.name}]: Consumer failed:`, err);\n                }\n        }\n    }\n    \n    /**\n     * Clear all consumers\n     */\n    clearConsumers(): void {\n        this.consumers.clear();\n    }\n    \n    /**\n     * Get current queue size (for monitoring)\n     */\n    getQueueSize(): number {\n        return this.processingQueue.length;\n    }\n    \n    /**\n     * Check if currently processing\n     */\n    isCurrentlyProcessing(): boolean {\n        return this.isProcessing;\n    }\n}","import {\n  Log4TSProvider,\n  Log4TSConfigOptional,\n  Log4TSGroupConfigOptional,\n} from \"typescript-logging-log4ts-style\";\nimport { LogLevel as LibLogLevel, LogChannel } from \"typescript-logging\";\nimport { Logger } from \"./Logger\";\nimport { Constructor, LogLevel } from \"./types\";\nimport {\n  ChannelConfig,\n  ChannelType,\n  AppenderConfig,\n  LogMessage,\n} from \"./ChannelTypes\";\nimport { ChannelFactory } from \"./ChannelFactory\";\nimport {\n  AsyncConsumerLogChannel,\n  AsyncLogConsumer,\n  RemoveConsumerFunction,\n} from \"./AsyncConsumerLogChannel\";\n\n/**\n * Internal type for raw log messages from typescript-logging\n */\ninterface InternalLogMessage {\n  level?: { toString(): string };\n  timeInMillis?: number;\n  logNames?: string | string[];\n  message?: string;\n  exception?: unknown;\n  args?: unknown[];\n  formattedDate?: string;\n  appenderName?: string;\n}\n\n/**\n * Parse string log level to LogLevel enum\n * @internal\n */\nfunction parseLogLevel(level: string | number | LogLevel): LogLevel {\n  // If already a LogLevel enum, return as-is\n  if (typeof level === \"number\" && level in LogLevel) {\n    return level as LogLevel;\n  }\n\n  // If string, parse it\n  if (typeof level === \"string\") {\n    const levelUpper = level.toUpperCase();\n    switch (levelUpper) {\n      case \"TRACE\":\n        return LogLevel.Trace;\n      case \"DEBUG\":\n        return LogLevel.Debug;\n      case \"INFO\":\n        return LogLevel.Info;\n      case \"WARN\":\n      case \"WARNING\":\n        return LogLevel.Warn;\n      case \"ERROR\":\n        return LogLevel.Error;\n      case \"FATAL\":\n        return LogLevel.Fatal;\n      case \"OFF\":\n        return LogLevel.Off;\n      default:\n        // Unknown log level, defaulting to INFO\n        return LogLevel.Info;\n    }\n  }\n\n  // Fallback for any other type\n  return LogLevel.Info;\n}\n\n/**\n * Map our LogLevel enum to the library's LogLevel enum\n * @internal\n */\nfunction mapLogLevel(level: LogLevel): LibLogLevel {\n  switch (level) {\n    case LogLevel.Trace:\n      return LibLogLevel.Trace;\n    case LogLevel.Debug:\n      return LibLogLevel.Debug;\n    case LogLevel.Info:\n      return LibLogLevel.Info;\n    case LogLevel.Warn:\n      return LibLogLevel.Warn;\n    case LogLevel.Error:\n      return LibLogLevel.Error;\n    case LogLevel.Fatal:\n      return LibLogLevel.Fatal;\n    case LogLevel.Off:\n      return LibLogLevel.Off;\n    default: {\n      throw new Error(`Unknown log level: ${level}`);\n    }\n  }\n}\n\n/**\n * Configuration interface for LoggerFactory\n * Supports both simple configuration and full typescript-logging configuration\n */\nexport interface LoggerFactoryConfig {\n  /** Provider name for the logging instance */\n  providerName?: string;\n\n  /** Simple log level configuration */\n  globalLevel?: LogLevel;\n\n  /** Simple channel configuration */\n  defaultChannel?: ChannelConfig;\n\n  /** Full typescript-logging configuration (takes precedence over simple config) */\n  typescriptLoggingConfig?: Log4TSConfigOptional;\n\n  /** Enhanced groups configuration that supports both our ChannelConfig and typescript-logging channels */\n  groups?: Array<\n    Log4TSGroupConfigOptional & {\n      /** Optional channel override for this group using our ChannelConfig */\n      channelConfig?: ChannelConfig;\n    }\n  >;\n\n  /** Multi-appender configuration - each appender can have its own groups, levels, and channels */\n  appenders?: AppenderConfig[];\n}\n\n/**\n * Factory class for creating and managing loggers\n * Provides a singleton pattern for logger instances\n */\nexport class LoggerFactory {\n  private static instance: LoggerFactory;\n  private static readonly MessagesAppender: AppenderConfig = {\n    name: \"messages\",\n    enabled: true,\n    level: LogLevel.Info,\n    channel: {\n      type: ChannelType.ASYNC_CONSUMER,\n      channelName: \"messages\",\n    },\n    format: \"{time} [{level}] {logger}: {message}\",\n    groups: [/.+/], // Match all logger names\n  };\n\n  private readonly provider: Log4TSProvider;\n  private readonly loggerCache: Map<string, Logger> = new Map();\n  private readonly config: LoggerFactoryConfig;\n  private readonly asyncConsumers: Map<string, Set<AsyncLogConsumer>> =\n    new Map();\n  private hasMessagesAppenderBeenAdded = false;\n\n  private constructor(config: LoggerFactoryConfig = {}) {\n    // Try to load config file if no config provided\n    let loadedConfig =\n      config && Object.keys(config).length > 0 ? config : this.loadConfigFile();\n\n    // Parse string levels in loaded config\n    loadedConfig = this.parseStringLevelsInConfig(loadedConfig);\n\n    // Determine configuration approach based on what's provided\n    const useSimpleConfig =\n      !loadedConfig.appenders &&\n      !loadedConfig.typescriptLoggingConfig &&\n      (loadedConfig.defaultChannel || loadedConfig.globalLevel);\n\n    if (useSimpleConfig) {\n      // Simple configuration approach - use defaultChannel and globalLevel\n      const defaultConfig: LoggerFactoryConfig = {\n        providerName: \"OpinionFrontUI\",\n        globalLevel: LogLevel.Debug,\n        defaultChannel: { type: ChannelType.CONSOLE },\n      };\n\n      this.config = {\n        ...defaultConfig,\n        ...loadedConfig,\n      };\n\n      // Create provider using simple configuration\n      this.provider = this.createProviderFromSimpleConfig();\n    } else {\n      // Appenders-based configuration with default setup\n      const defaultConfig: LoggerFactoryConfig = {\n        providerName: \"OpinionFrontUI\",\n        globalLevel: LogLevel.Debug,\n        defaultChannel: { type: ChannelType.CONSOLE },\n        appenders: [\n          // Pre-configure the console appender\n          {\n            name: \"console\",\n            enabled: true,\n            level: LogLevel.Trace,\n            channel: { type: ChannelType.CONSOLE },\n            groups: [/.+/], // Match all logger names\n            format: \"{time} [{level}] {logger}: {message}\",\n          } as AppenderConfig,\n          // Pre-configure the MessagesAppender to avoid dynamic addition\n          LoggerFactory.MessagesAppender,\n        ],\n      };\n\n      this.config = {\n        ...defaultConfig,\n        ...loadedConfig,\n      };\n\n      // Create provider using appenders configuration\n      this.provider = this.createProviderFromAppendersConfig();\n    }\n\n    // Mark MessagesAppender as already added since it's pre-configured\n    this.hasMessagesAppenderBeenAdded = true;\n  }\n\n  /**\n   * Configure and get the singleton instance of LoggerFactory\n   * Can only be called once to configure the instance\n   */\n  public static configure(config: LoggerFactoryConfig = {}): LoggerFactory {\n    if (LoggerFactory.instance) {\n      throw new Error(\n        \"LoggerFactory already configured. Use getInstance() to get the configured instance.\",\n      );\n    }\n    LoggerFactory.instance = new LoggerFactory(config);\n    return LoggerFactory.instance;\n  }\n\n  /**\n   * Get the singleton instance of LoggerFactory\n   * If not already configured, creates instance with default configuration\n   */\n  public static getInstance(): LoggerFactory {\n    if (!LoggerFactory.instance) {\n      LoggerFactory.instance = new LoggerFactory();\n    }\n    return LoggerFactory.instance;\n  }\n\n  /**\n   * Get a logger by class constructor\n   */\n  public getLogger<T>(clazz: Constructor<T>): Logger;\n\n  /**\n   * Get a logger by string name\n   */\n  public getLogger(name: string): Logger;\n\n  /**\n   * Implementation for both overloads\n   */\n  public getLogger<T>(nameOrClass: string | Constructor<T>): Logger {\n    let loggerName: string;\n\n    if (typeof nameOrClass === \"string\") {\n      loggerName = nameOrClass;\n    } else {\n      // Extract class name from constructor function\n      loggerName = nameOrClass.name || \"UnknownClass\";\n\n      // Validate that we got a meaningful name\n      if (!loggerName || loggerName === \"UnknownClass\") {\n        // Could not determine class name, using fallback\n        loggerName = \"UnknownClass\";\n      }\n    }\n\n    // Check if logger already exists in cache\n    let logger = this.loggerCache.get(loggerName);\n    if (!logger) {\n      // Create new logger instance and cache it\n      const log4tsLogger = this.provider.getLogger(loggerName);\n      logger = new Logger(log4tsLogger);\n      this.loggerCache.set(loggerName, logger);\n    }\n\n    return logger;\n  }\n\n  /**\n   * Clear the logger cache - useful for testing\n   * @private\n   */\n  private clearCache(): void {\n    this.loggerCache.clear();\n  }\n\n  /**\n   * Add a log consumer for a specific channel name\n   * @param channelName The name of the channel to add the consumer to\n   * @param consumer The log consumer to add\n   * @returns Function to remove this consumer\n   */\n  public addLogConsumer(\n    channelName: string,\n    consumer: AsyncLogConsumer,\n  ): RemoveConsumerFunction {\n    // Get or create the set of consumers for this channel name\n    let consumersSet = this.asyncConsumers.get(channelName);\n    if (!consumersSet) {\n      consumersSet = new Set<AsyncLogConsumer>();\n      this.asyncConsumers.set(channelName, consumersSet);\n    }\n\n    // Add the consumer\n    consumersSet.add(consumer);\n\n    // Return removal function\n    return () => {\n      const consumers = this.asyncConsumers.get(channelName);\n      if (consumers) {\n        consumers.delete(consumer);\n        // Clean up empty sets\n        if (consumers.size === 0) {\n          this.asyncConsumers.delete(channelName);\n        }\n      }\n    };\n  }\n\n  /**\n   * Convenience method to add a log consumer to the \"messages\" channel\n   * MessagesAppender is pre-configured, so no dynamic addition needed\n   * @param consumer The log consumer to add\n   * @returns Function to remove this consumer\n   */\n  public messagesConsumer(consumer: AsyncLogConsumer): RemoveConsumerFunction {\n    return this.addLogConsumer(\"messages\", consumer);\n  }\n\n  /**\n   * Parse string levels in configuration to LogLevel enums\n   * @private\n   */\n  private parseStringLevelsInConfig(\n    config: LoggerFactoryConfig,\n  ): LoggerFactoryConfig {\n    const parsedConfig = { ...config };\n\n    // Parse globalLevel if it's a string\n    if (\n      parsedConfig.globalLevel &&\n      typeof parsedConfig.globalLevel === \"string\"\n    ) {\n      parsedConfig.globalLevel = parseLogLevel(parsedConfig.globalLevel);\n    }\n\n    // Parse appender levels if they're strings\n    if (parsedConfig.appenders) {\n      parsedConfig.appenders = parsedConfig.appenders.map((appender) => {\n        const parsedAppender = { ...appender };\n        if (parsedAppender.level && typeof parsedAppender.level === \"string\") {\n          parsedAppender.level = parseLogLevel(parsedAppender.level);\n        }\n        return parsedAppender;\n      });\n    }\n\n    // Parse group levels if they're strings\n    if (parsedConfig.groups) {\n      parsedConfig.groups = parsedConfig.groups.map((group) => {\n        const parsedGroup = { ...group };\n        if (parsedGroup.level && typeof parsedGroup.level === \"string\") {\n          parsedGroup.level = parseLogLevel(parsedGroup.level);\n        }\n        return parsedGroup;\n      });\n    }\n\n    return parsedConfig;\n  }\n\n  /**\n   * Load configuration from logger.json file if it exists\n   * @private\n   */\n  private loadConfigFile(): LoggerFactoryConfig {\n    try {\n      // In a browser environment, we can't read files from filesystem\n      // This would need to be loaded via fetch or embedded in the build\n      if (typeof window !== \"undefined\") {\n        // Browser environment - config would need to be embedded or fetched\n        return {};\n      }\n\n      // Node.js environment - try to read logger.json\n      const fs = require(\"fs\");\n      const path = require(\"path\");\n      const configPath = path.join(process.cwd(), \"logger.json\");\n\n      if (fs.existsSync(configPath)) {\n        const configData = fs.readFileSync(configPath, \"utf-8\");\n        const config = JSON.parse(configData) as LoggerFactoryConfig;\n        // Logger configuration loaded from logger.json\n        return config;\n      }\n    } catch {\n      // Failed to load logger.json configuration - using defaults\n    }\n\n    return {};\n  }\n\n  /**\n   * Get all channel names that have consumers\n   * @returns Array of channel names\n   * @private\n   */\n  private getLogChannelNames(): string[] {\n    return Array.from(this.asyncConsumers.keys());\n  }\n\n  /**\n   * Get the number of consumers for a specific channel name\n   * @param channelName The channel name\n   * @returns Number of consumers\n   * @private\n   */\n  private getLogConsumerCount(channelName: string): number {\n    const consumers = this.asyncConsumers.get(channelName);\n    return consumers ? consumers.size : 0;\n  }\n\n  /**\n   * Clear all consumers for a specific channel name\n   * @param channelName The channel name to clear\n   * @private\n   */\n  private clearLogConsumers(channelName: string): void {\n    this.asyncConsumers.delete(channelName);\n  }\n\n  /**\n   * Clear all consumers for all channels\n   * @private\n   */\n  private clearAllLogConsumers(): void {\n    this.asyncConsumers.clear();\n  }\n\n  /**\n   * Get an AsyncConsumerLogChannel for the specified name\n   * This creates the channel if it doesn't exist and connects it to the consumers map\n   * @param channelName The name of the channel\n   * @returns AsyncConsumerLogChannel instance\n   * @private\n   */\n  private getAsyncConsumerLogChannel(\n    channelName: string,\n  ): AsyncConsumerLogChannel {\n    const channel = new AsyncConsumerLogChannel(channelName);\n\n    // Override the write method to dispatch to our managed consumers\n    channel.write = (message) => {\n      // Get consumers for this channel name from our map\n      const consumers = this.asyncConsumers.get(channelName);\n      if (consumers && consumers.size > 0) {\n        // Process each consumer asynchronously\n        consumers.forEach((consumer) => {\n          this.processAsyncConsumer(consumer, message);\n        });\n      }\n    };\n\n    return channel;\n  }\n\n  /**\n   * Process a message with a specific async consumer\n   * @private\n   */\n  private async processAsyncConsumer(\n    consumer: AsyncLogConsumer,\n    message: LogMessage,\n  ): Promise<void> {\n    try {\n      await consumer.consume(message);\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n\n      if (consumer.onError) {\n        try {\n          consumer.onError(err, message);\n        } catch (onErrorErr) {\n          console.error(\n            `LoggerFactory: Consumer onError handler failed:`,\n            onErrorErr,\n          );\n        }\n      } else {\n        console.error(`LoggerFactory: Consumer failed:`, err);\n      }\n    }\n  }\n\n  /**\n   * Create provider from typescript-logging configuration\n   * @private\n   */\n  private createProviderFromTypescriptLoggingConfig(): Log4TSProvider {\n    const tsConfig = this.config.typescriptLoggingConfig!;\n\n    // Process groups if they have our channelConfig\n    let processedGroups = tsConfig.groups;\n    if (this.config.groups) {\n      processedGroups = this.config.groups.map((group) => {\n        const processedGroup: any = { ...group };\n\n        // Convert our LogLevel to library LogLevel if present\n        if (group.level !== undefined) {\n          processedGroup.level = mapLogLevel(group.level);\n        }\n\n        // Convert our ChannelConfig to library channel if present\n        if (group.channelConfig) {\n          processedGroup.channel = ChannelFactory.createChannel(\n            group.channelConfig,\n          );\n          delete processedGroup.channelConfig;\n        }\n\n        return processedGroup;\n      });\n    }\n\n    // Create the final config with processed groups\n    const finalConfig: Log4TSConfigOptional = {\n      ...tsConfig,\n      groups: processedGroups,\n    };\n\n    return Log4TSProvider.createProvider(\n      this.config.providerName!,\n      finalConfig,\n    );\n  }\n\n  /**\n   * Create provider from simple configuration\n   * @private\n   */\n  private createProviderFromSimpleConfig(): Log4TSProvider {\n    // Create channel from configuration\n    const channel = ChannelFactory.createChannel(this.config.defaultChannel!);\n\n    // Process groups if provided\n    let groups = this.config.groups;\n    if (groups) {\n      groups = groups.map((group) => {\n        const processedGroup: any = { ...group };\n\n        // Convert our LogLevel to library LogLevel if present\n        if (group.level !== undefined) {\n          processedGroup.level = mapLogLevel(group.level);\n        }\n\n        // Convert our ChannelConfig to library channel if present\n        if (group.channelConfig) {\n          processedGroup.channel = ChannelFactory.createChannel(\n            group.channelConfig,\n          );\n          delete processedGroup.channelConfig;\n        }\n\n        return processedGroup;\n      });\n    } else {\n      // Default group if none provided\n      groups = [\n        {\n          identifier: \"default\",\n          expression: new RegExp(\".+\"), // Matches all logger names\n          level: mapLogLevel(this.config.globalLevel!),\n        },\n      ];\n    }\n\n    // Initialize the Log4TS provider with simple configuration\n    return Log4TSProvider.createProvider(this.config.providerName!, {\n      level: mapLogLevel(this.config.globalLevel!),\n      channel: channel,\n      groups: groups,\n    });\n  }\n\n  /**\n   * Create provider from appenders configuration\n   * @private\n   */\n  private createProviderFromAppendersConfig(): Log4TSProvider {\n    const appenders = this.config.appenders!.filter(\n      (appender) => appender.enabled !== false,\n    );\n\n    if (appenders.length === 0) {\n      throw new Error(\"At least one enabled appender is required\");\n    }\n\n    // Create a multi-appender channel that routes messages to appropriate appenders\n    const multiAppenderChannel = this.createMultiAppenderChannel(appenders);\n\n    // Collect all unique groups from all appenders\n    const allGroups = new Set<string>();\n    appenders.forEach((appender) => {\n      if (appender.groups) {\n        appender.groups.forEach((group) => {\n          if (group instanceof RegExp) {\n            allGroups.add(group.source);\n          } else {\n            allGroups.add(group);\n          }\n        });\n      }\n    });\n\n    // Create groups configuration - if no specific groups, match everything\n    const groups =\n      allGroups.size > 0\n        ? Array.from(allGroups).map((groupPattern) => ({\n            identifier: groupPattern,\n            expression: new RegExp(groupPattern),\n            level: mapLogLevel(LogLevel.Trace), // Let appenders handle level filtering\n          }))\n        : [\n            {\n              identifier: \"default\",\n              expression: new RegExp(\".+\"),\n              level: mapLogLevel(LogLevel.Trace),\n            },\n          ];\n\n    return Log4TSProvider.createProvider(this.config.providerName!, {\n      level: mapLogLevel(LogLevel.Trace), // Let appenders handle level filtering\n      channel: multiAppenderChannel,\n      groups: groups,\n    });\n  }\n\n  /**\n   * Create a multi-appender channel that routes messages to appropriate appenders\n   * @private\n   */\n  private createMultiAppenderChannel(appenders: AppenderConfig[]): LogChannel {\n    return {\n      type: \"LogChannel\",\n      write: (logMessage: InternalLogMessage) => {\n        const logName = Array.isArray(logMessage.logNames)\n          ? logMessage.logNames[0]\n          : logMessage.logNames || \"unknown\";\n\n        // Find matching appenders for this log message\n        const matchingAppenders = appenders.filter((appender) =>\n          this.appenderMatches(appender, logName, logMessage.level?.toString()),\n        );\n\n        // Write to all matching appenders\n        matchingAppenders.forEach((appender) => {\n          try {\n            // Special handling for ASYNC_CONSUMER channels\n            if (appender.channel.type === ChannelType.ASYNC_CONSUMER) {\n              this.handleAsyncConsumerAppender(appender, logMessage);\n              return;\n            }\n\n            const appenderChannel = ChannelFactory.createChannel(\n              appender.channel,\n              appender.format,\n            );\n\n            // Create formatted message for this appender\n            const formattedMessage = this.formatMessageForAppender(\n              logMessage,\n              appender,\n            );\n\n            if (appenderChannel.type === \"LogChannel\") {\n              (appenderChannel as any).write(formattedMessage);\n            } else {\n              // Handle RawLogChannel\n              const formatArg =\n                appender.argumentFormatter ||\n                ((arg: unknown) => {\n                  if (arg === null || arg === undefined) return String(arg);\n                  if (typeof arg === \"string\") return arg;\n                  if (typeof arg === \"object\") {\n                    try {\n                      return JSON.stringify(arg);\n                    } catch {\n                      return String(arg);\n                    }\n                  }\n                  return String(arg);\n                });\n\n              (appenderChannel as any).write(formattedMessage, formatArg);\n            }\n          } catch (error) {\n            console.error(`Error in appender ${appender.name}:`, error);\n          }\n        });\n      },\n    };\n  }\n\n  /**\n   * Check if an appender matches the current log message\n   * @private\n   */\n  private appenderMatches(\n    appender: AppenderConfig,\n    logName: string,\n    messageLevel: string | undefined,\n  ): boolean {\n    // Check level\n    if (appender.level !== undefined) {\n      const appenderLevelValue = appender.level;\n      const messageLevelValue = this.getLogLevelValue(messageLevel);\n      if (messageLevelValue < appenderLevelValue) {\n        return false;\n      }\n    }\n\n    // Check groups\n    if (appender.groups && appender.groups.length > 0) {\n      const matches = appender.groups.some((group) => {\n        if (group instanceof RegExp) {\n          return group.test(logName);\n        } else {\n          return logName.includes(group);\n        }\n      });\n      if (!matches) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Get numeric value for log level comparison\n   * @private\n   */\n  private getLogLevelValue(level: string | undefined): number {\n    // Default to INFO if level is undefined or not a string\n    if (!level) {\n      return LogLevel.Info;\n    }\n\n    const levelMap: { [key: string]: number } = {\n      TRACE: LogLevel.Trace,\n      DEBUG: LogLevel.Debug,\n      INFO: LogLevel.Info,\n      WARN: LogLevel.Warn,\n      ERROR: LogLevel.Error,\n      FATAL: LogLevel.Fatal,\n    };\n    return levelMap[level.toUpperCase()] || LogLevel.Info;\n  }\n\n  /**\n   * Handle ASYNC_CONSUMER appender by routing to the consumer system\n   * @private\n   */\n  private handleAsyncConsumerAppender(\n    appender: AppenderConfig,\n    logMessage: InternalLogMessage,\n  ): void {\n    const channelConfig = appender.channel as { channelName: string }; // AsyncConsumerChannelConfig\n    const channelName = channelConfig.channelName;\n\n    // Get consumers for this channel name from our map\n    const consumers = this.asyncConsumers.get(channelName);\n    if (consumers && consumers.size > 0) {\n      // Create formatted message for this appender\n      const formattedMessage = this.formatMessageForAppender(\n        logMessage,\n        appender,\n      );\n\n      // Convert to our LogMessage interface\n      // Apply same regex parsing as ChannelFactory to extract correct logger name\n      let loggerName: string;\n      let actualMessage: string;\n\n      if (\n        formattedMessage.message &&\n        typeof formattedMessage.message === \"string\"\n      ) {\n        // Check for pre-formatted typescript-logging messages\n        const preFormattedMatch = formattedMessage.message.match(\n          /^\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2},\\d{3}\\s+(\\w+)\\s+\\[([^\\]]+)\\]\\s+(.*)$/,\n        );\n\n        if (preFormattedMatch) {\n          // Extract logger name from pre-formatted message\n          loggerName = preFormattedMatch[2];\n          actualMessage = preFormattedMatch[3];\n        } else {\n          // Fallback to library-provided values\n          loggerName = Array.isArray(formattedMessage.logNames)\n            ? formattedMessage.logNames[0]\n            : formattedMessage.logNames || \"unknown\";\n          actualMessage = formattedMessage.message;\n        }\n      } else {\n        // Fallback to library-provided values\n        loggerName = Array.isArray(formattedMessage.logNames)\n          ? formattedMessage.logNames[0]\n          : formattedMessage.logNames || \"unknown\";\n        actualMessage = formattedMessage.message || \"\";\n      }\n\n      // Extract log level from pre-formatted message if available\n      let logLevel = formattedMessage.level?.toString();\n\n      if (\n        !logLevel &&\n        formattedMessage.message &&\n        typeof formattedMessage.message === \"string\"\n      ) {\n        // Try to extract level from pre-formatted typescript-logging messages\n        const preFormattedMatch = formattedMessage.message.match(\n          /^\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2},\\d{3}\\s+(\\w+)\\s+\\[([^\\]]+)\\]\\s+(.*)$/,\n        );\n        if (preFormattedMatch) {\n          logLevel = preFormattedMatch[1]; // Extract the log level from the formatted string\n        }\n      }\n\n      const ourLogMessage: LogMessage = {\n        level: logLevel || \"INFO\",\n        timeInMillis: formattedMessage.timeInMillis || Date.now(),\n        logName: loggerName,\n        message: actualMessage,\n        exception: formattedMessage.exception as Error | undefined,\n        args: formattedMessage.args,\n      };\n\n      // Process each consumer asynchronously\n      consumers.forEach((consumer) => {\n        this.processAsyncConsumer(consumer, ourLogMessage);\n      });\n    }\n  }\n\n  /**\n   * Format message for specific appender\n   * @private\n   */\n  private formatMessageForAppender(\n    logMessage: InternalLogMessage,\n    appender: AppenderConfig,\n  ): InternalLogMessage {\n    const formatted = { ...logMessage };\n\n    // Apply custom date formatter if provided\n    if (appender.dateFormatter && logMessage.timeInMillis) {\n      formatted.formattedDate = appender.dateFormatter(logMessage.timeInMillis);\n    }\n\n    // Add appender name for identification\n    formatted.appenderName = appender.name;\n\n    return formatted;\n  }\n}\n","/**\n * Mock API Service\n * Provides realistic test data for development until real API is ready\n */\n\nimport { Survey, User, UserRole, OpinionStatus } from '../types';\nimport { LoggerFactory } from '../logging/LoggerFactory';\nimport { Logger } from '../logging/Logger';\nimport type { Service } from '../interfaces/Service';\n\nexport interface AuthenticationInfo {\n  userInfo: User;\n  accounts?: Array<{ id: number; name: string }>;\n  accountId?: number;\n}\n\nexport interface ChartData {\n  charts: {\n    completed: Array<[string, number]>;\n    partial: Array<[string, number]>;\n    totals: {\n      completed: number;\n      partial: number;\n    };\n  };\n}\n\nexport class MockApiService implements Service {\n  // Static service identity\n  static readonly SERVICE_ID = 'MockApiService';\n  static readonly SERVICE_DESCRIPTION = 'Mock API service for development and testing';\n  \n  private delay = 500; // Simulate network delay\n  private readonly logger: Logger;\n  private initialized = false;\n\n  constructor() {\n    this.logger = LoggerFactory.getInstance().getLogger('MockApiService');\n    this.logger.info('Using mock data for development');\n  }\n\n  /**\n   * Get service ID (Service interface implementation)\n   */\n  getServiceId(): string {\n    return MockApiService.SERVICE_ID;\n  }\n\n  /**\n   * Initialize the service (Service interface implementation)\n   */\n  async init(): Promise<void> {\n    if (this.initialized) {\n      return;\n    }\n    this.logger.info('Initializing MockApiService...');\n    this.initialized = true;\n  }\n\n  /**\n   * Check if service is ready (Service interface implementation)\n   */\n  isReady(): boolean {\n    return this.initialized;\n  }\n\n  /**\n   * Destroy the service (Service interface implementation)\n   */\n  async destroy(): Promise<void> {\n    this.logger.info('Destroying MockApiService...');\n    this.initialized = false;\n  }\n\n  /**\n   * Simulate network delay\n   */\n  private async simulateDelay(): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, this.delay));\n  }\n\n  /**\n   * Generate mock user data\n   */\n  private createMockUser(): User {\n    return {\n      id: 1001,\n      username: 'john.developer',\n      email: 'john@example.com',\n      role: UserRole.ADMIN,\n      created: new Date('2023-01-15'),\n      lastLogin: new Date()\n    };\n  }\n\n  /**\n   * Generate mock survey data\n   */\n  private createMockSurveys(): Survey[] {\n    const surveys: Survey[] = [\n      {\n        id: 101,\n        title: 'Customer Satisfaction Survey 2024',\n        description: 'Annual customer satisfaction survey to measure service quality',\n        status: OpinionStatus.ACTIVE,\n        created: new Date('2024-01-15'),\n        updated: new Date('2024-02-01'),\n        responses: 245,\n        completionRate: 78.5\n      },\n      {\n        id: 102,\n        title: 'Product Feature Feedback',\n        description: 'Gather feedback on new product features and improvements',\n        status: OpinionStatus.ACTIVE,\n        created: new Date('2024-02-10'),\n        updated: new Date('2024-02-15'),\n        responses: 156,\n        completionRate: 65.2\n      },\n      {\n        id: 103,\n        title: 'Employee Engagement Survey',\n        description: 'Internal survey to measure employee satisfaction and engagement',\n        status: OpinionStatus.DRAFT,\n        created: new Date('2024-03-01'),\n        updated: new Date('2024-03-05'),\n        responses: 89,\n        completionRate: 45.8\n      },\n      {\n        id: 104,\n        title: 'Market Research - Tech Trends',\n        description: 'Research on emerging technology trends and market preferences',\n        status: OpinionStatus.ACTIVE,\n        created: new Date('2024-03-15'),\n        updated: new Date('2024-03-20'),\n        responses: 312,\n        completionRate: 82.1\n      },\n      {\n        id: 105,\n        title: 'Website Usability Study',\n        description: 'User experience survey for website navigation and functionality',\n        status: OpinionStatus.COMPLETED,\n        created: new Date('2024-01-01'),\n        updated: new Date('2024-01-30'),\n        responses: 189,\n        completionRate: 91.3\n      }\n    ];\n\n    return surveys;\n  }\n\n  /**\n   * Generate mock chart data\n   */\n  private createMockChartData(): ChartData {\n    const now = new Date();\n    const days = 30;\n    const completed: Array<[string, number]> = [];\n    const partial: Array<[string, number]> = [];\n\n    for (let i = days; i >= 0; i--) {\n      const date = new Date(now);\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      \n      // Generate realistic random data\n      const completedCount = Math.floor(Math.random() * 25) + 5;\n      const partialCount = Math.floor(Math.random() * 15) + 2;\n      \n      completed.push([dateStr, completedCount]);\n      partial.push([dateStr, partialCount]);\n    }\n\n    const totalCompleted = completed.reduce((sum, [, count]) => sum + count, 0);\n    const totalPartial = partial.reduce((sum, [, count]) => sum + count, 0);\n\n    return {\n      charts: {\n        completed,\n        partial,\n        totals: {\n          completed: totalCompleted,\n          partial: totalPartial\n        }\n      }\n    };\n  }\n\n  /**\n   * Validate current user session\n   */\n  async validateUser(): Promise<AuthenticationInfo> {\n    await this.simulateDelay();\n    \n    this.logger.debug('Validating user...');\n    \n    const user = this.createMockUser();\n    \n    return {\n      userInfo: user,\n      accounts: [\n        { id: 1, name: 'Development Account' },\n        { id: 2, name: 'Testing Account' }\n      ],\n      accountId: 1\n    };\n  }\n\n  /**\n   * Get list of surveys/opinions\n   */\n  async getOpinionsList(params: {\n    accountId: number;\n    top?: number;\n    orderByRecent?: boolean;\n  }): Promise<{ list: Survey[] }> {\n    await this.simulateDelay();\n    \n    this.logger.debug('Fetching opinions list...', params);\n    \n    let surveys = this.createMockSurveys();\n    \n    // Apply ordering\n    if (params.orderByRecent) {\n      surveys = surveys.sort((a, b) => \n        (b.updated?.getTime() ?? 0) - (a.updated?.getTime() ?? 0)\n      );\n    }\n    \n    // Apply limit\n    if (params.top && params.top > 0) {\n      surveys = surveys.slice(0, params.top);\n    }\n    \n    return { list: surveys };\n  }\n\n  /**\n   * Get activity chart data\n   */\n  async getActivityChart(params: {\n    accountId: number;\n    opinionId?: number;\n    fromDate?: string;\n    toDate?: string;\n    graphBy?: number;\n  }): Promise<ChartData> {\n    await this.simulateDelay();\n    \n    this.logger.debug('Fetching activity chart...', params);\n    \n    return this.createMockChartData();\n  }\n\n  /**\n   * Send feedback\n   */\n  async sendFeedback(params: {\n    title: string;\n    email?: string;\n    description: string;\n  }): Promise<void> {\n    await this.simulateDelay();\n    \n    this.logger.debug('Sending feedback...', params);\n    \n    // Simulate successful feedback submission\n    this.logger.info('Feedback sent successfully');\n  }\n\n  /**\n   * Update account settings\n   */\n  async updateAccountSettings(params: {\n    accountId: number;\n    showWelcomeMessage?: boolean;\n  }): Promise<void> {\n    await this.simulateDelay();\n    \n    this.logger.debug('Updating account settings...', params);\n    \n    // Simulate successful settings update\n    this.logger.info('Account settings updated successfully');\n  }\n}\n\nexport default MockApiService;\n","/**\n * Layout Event Factory\n * Provides strongly typed layout events with specific data structures\n */\n\nimport type { LayoutContext, LayoutViewPort, LayoutModeType } from \"./LayoutContext\";\n\n// =================================================================================\n// Event Data Type Definitions\n// =================================================================================\n\n/**\n * Data payload for layout-ready events\n */\nexport interface LayoutReadyEventData {\n  context: LayoutContext;\n  timestamp: number;\n}\n\n/**\n * Data payload for layout-mode-change events\n */\nexport interface LayoutModeChangeEventData {\n  context: LayoutContext;\n  viewport: LayoutViewPort;\n  modeType: LayoutModeType;\n  previousModeType?: LayoutModeType;\n}\n\n/**\n * Data payload for sidebar-compact-mode-change events\n */\nexport interface SidebarCompactModeChangeEventData {\n  compactMode: boolean;\n  previousCompactMode: boolean;\n  blockedReason?: \"mobile-layout\" | \"sidebar-locked\";\n}\n\n/**\n * Data payload for mobile-menu-request events\n */\nexport interface MobileMenuRequestEventData {\n  requestedAction: \"show\" | \"hide\" | \"toggle\";\n  trigger: \"menu-button\" | \"programmatic\";\n}\n\n/**\n * Data payload for mobile-menu-mode-change events\n */\nexport interface MobileMenuModeChangeEventData {\n  isVisible: boolean;\n  previousVisibility: boolean;\n  trigger: \"close-button\" | \"backdrop\" | \"menu-button\" | \"programmatic\";\n}\n\n/**\n * Data payload for user-menu-request events\n */\nexport interface UserMenuRequestEventData {\n  requestedAction: \"show\" | \"hide\" | \"toggle\";\n  trigger: \"debug-page\" | \"keyboard\" | \"programmatic\";\n}\n\n/**\n * Data payload for user-menu-mode-change events\n */\nexport interface UserMenuModeChangeEventData {\n  isVisible: boolean;\n  previousVisibility: boolean;\n  trigger: \"click\" | \"keyboard\" | \"programmatic\";\n}\n\n/**\n * Data payload for sidebar-compact-request events\n */\nexport interface SidebarCompactRequestEventData {\n  requestedAction: \"show\" | \"hide\" | \"toggle\";\n  trigger: \"debug-page\" | \"keyboard\" | \"programmatic\";\n}\n\n/**\n * Union type for all layout event data types\n */\nexport type LayoutEventData = \n  | LayoutReadyEventData\n  | LayoutModeChangeEventData\n  | SidebarCompactModeChangeEventData\n  | SidebarCompactRequestEventData\n  | MobileMenuModeChangeEventData\n  | MobileMenuRequestEventData\n  | UserMenuRequestEventData\n  | UserMenuModeChangeEventData;\n\n/**\n * Strongly typed layout event structure\n */\nexport interface TypedLayoutEvent<T extends LayoutEventData = LayoutEventData> {\n  type: LayoutEventType;\n  data: T;\n  timestamp: number;\n}\n\n// Import the event type from LayoutContext\nimport type { LayoutEventType } from \"./LayoutContext\";\n\n// =================================================================================\n// Layout Event Factory\n// =================================================================================\n\nexport class LayoutEventFactory {\n  /**\n   * Create a layout-ready event\n   */\n  static createLayoutReadyEvent(context: LayoutContext): TypedLayoutEvent<LayoutReadyEventData> {\n    return {\n      type: \"layout-ready\",\n      data: {\n        context,\n        timestamp: Date.now(),\n      },\n      timestamp: Date.now(),\n    };\n  }\n\n  /**\n   * Create a layout-mode-change event\n   */\n  static createLayoutModeChangeEvent(\n    context: LayoutContext,\n    viewport: LayoutViewPort,\n    modeType: LayoutModeType,\n    previousModeType?: LayoutModeType,\n  ): TypedLayoutEvent<LayoutModeChangeEventData> {\n    return {\n      type: \"layout-mode-change\",\n      data: {\n        context,\n        viewport,\n        modeType,\n        previousModeType,\n      },\n      timestamp: Date.now(),\n    };\n  }\n\n  /**\n   * Create a sidebar-compact-mode-change event\n   */\n  static createSidebarCompactModeChangeEvent(\n    compactMode: boolean,\n    previousCompactMode: boolean,\n    blockedReason?: \"mobile-layout\" | \"sidebar-locked\",\n  ): TypedLayoutEvent<SidebarCompactModeChangeEventData> {\n    return {\n      type: \"sidebar-compact-mode-change\",\n      data: {\n        compactMode,\n        previousCompactMode,\n        blockedReason,\n      },\n      timestamp: Date.now(),\n    };\n  }\n\n  /**\n   * Create a mobile-menu-request event\n   */\n  static createMobileMenuRequestEvent(\n    requestedAction: \"show\" | \"hide\" | \"toggle\",\n    trigger: \"menu-button\" | \"programmatic\",\n  ): TypedLayoutEvent<MobileMenuRequestEventData> {\n    return {\n      type: \"mobile-menu-request\",\n      data: {\n        requestedAction,\n        trigger,\n      },\n      timestamp: Date.now(),\n    };\n  }\n\n  /**\n   * Create a sidebar-compact-request event\n   */\n  static createSidebarCompactRequestEvent(\n    requestedAction: \"show\" | \"hide\" | \"toggle\",\n    trigger: \"debug-page\" | \"keyboard\" | \"programmatic\",\n  ): TypedLayoutEvent<SidebarCompactRequestEventData> {\n    return {\n      type: \"sidebar-compact-request\",\n      data: {\n        requestedAction,\n        trigger,\n      },\n      timestamp: Date.now(),\n    };\n  }\n\n  /**\n   * Create a mobile-menu-mode-change event\n   */\n  static createMobileMenuModeChangeEvent(\n    isVisible: boolean,\n    previousVisibility: boolean,\n    trigger: \"close-button\" | \"backdrop\" | \"menu-button\" | \"programmatic\",\n  ): TypedLayoutEvent<MobileMenuModeChangeEventData> {\n    return {\n      type: \"mobile-menu-mode-change\",\n      data: {\n        isVisible,\n        previousVisibility,\n        trigger,\n      },\n      timestamp: Date.now(),\n    };\n  }\n\n  /**\n   * Create a user-menu-request event\n   */\n  static createUserMenuRequestEvent(\n    requestedAction: \"show\" | \"hide\" | \"toggle\",\n    trigger: \"debug-page\" | \"keyboard\" | \"programmatic\",\n  ): TypedLayoutEvent<UserMenuRequestEventData> {\n    return {\n      type: \"user-menu-request\",\n      data: {\n        requestedAction,\n        trigger,\n      },\n      timestamp: Date.now(),\n    };\n  }\n\n  /**\n   * Create a user-menu-mode-change event\n   */\n  static createUserMenuModeChangeEvent(\n    isVisible: boolean,\n    previousVisibility: boolean,\n    trigger: \"click\" | \"keyboard\" | \"programmatic\",\n  ): TypedLayoutEvent<UserMenuModeChangeEventData> {\n    // Only emit if state actually changed\n    if (isVisible === previousVisibility) {\n      console.warn(`UserMenu - No state change detected (${previousVisibility} → ${isVisible}), skipping event emission`);\n      return null as any; // This will be handled by caller\n    }\n    \n    return {\n      type: \"user-menu-mode-change\",\n      data: {\n        isVisible,\n        previousVisibility,\n        trigger,\n      },\n      timestamp: Date.now(),\n    };\n  }\n\n  /**\n   * Create a generic layout event (for backward compatibility)\n   */\n  static createGenericEvent(\n    type: LayoutEventType,\n    data: any,\n  ): TypedLayoutEvent {\n    return {\n      type,\n      data,\n      timestamp: Date.now(),\n    };\n  }\n\n  /**\n   * Validate event data structure\n   */\n  static validateEventData<T extends LayoutEventData>(\n    event: TypedLayoutEvent<T>,\n  ): boolean {\n    if (!event.type || !event.data || typeof event.timestamp !== \"number\") {\n      return false;\n    }\n\n    // Type-specific validation\n    switch (event.type) {\n      case \"layout-ready\": {\n        const readyData = event.data as LayoutReadyEventData;\n        return !!(readyData.context && typeof readyData.timestamp === \"number\");\n      }\n      case \"layout-mode-change\": {\n        const modeData = event.data as LayoutModeChangeEventData;\n        return !!(\n          modeData.context &&\n          modeData.viewport &&\n          modeData.modeType &&\n          typeof modeData.viewport.width === \"number\" &&\n          typeof modeData.viewport.height === \"number\"\n        );\n      }\n      case \"sidebar-compact-mode-change\": {\n        const sidebarData = event.data as SidebarCompactModeChangeEventData;\n        return (\n          typeof sidebarData.compactMode === \"boolean\" &&\n          typeof sidebarData.previousCompactMode === \"boolean\"\n        );\n      }\n      case \"mobile-menu-request\": {\n        const mobileMenuRequestData = event.data as MobileMenuRequestEventData;\n        return (\n          [\"show\", \"hide\", \"toggle\"].includes(mobileMenuRequestData.requestedAction) &&\n          [\"menu-button\", \"programmatic\"].includes(mobileMenuRequestData.trigger)\n        );\n      }\n      case \"sidebar-compact-request\": {\n        const sidebarRequestData = event.data as SidebarCompactRequestEventData;\n        return (\n          [\"show\", \"hide\", \"toggle\"].includes(sidebarRequestData.requestedAction) &&\n          [\"debug-page\", \"keyboard\", \"programmatic\"].includes(sidebarRequestData.trigger)\n        );\n      }\n      case \"mobile-menu-mode-change\": {\n        const mobileMenuData = event.data as MobileMenuModeChangeEventData;\n        return (\n          typeof mobileMenuData.isVisible === \"boolean\" &&\n          typeof mobileMenuData.previousVisibility === \"boolean\" &&\n          [\"close-button\", \"backdrop\", \"menu-button\", \"programmatic\"].includes(mobileMenuData.trigger)\n        );\n      }\n      case \"user-menu-request\": {\n        const userMenuRequestData = event.data as UserMenuRequestEventData;\n        return (\n          [\"show\", \"hide\", \"toggle\"].includes(userMenuRequestData.requestedAction) &&\n          [\"debug-page\", \"keyboard\", \"programmatic\"].includes(userMenuRequestData.trigger)\n        );\n      }\n      case \"user-menu-mode-change\": {\n        const userMenuData = event.data as UserMenuModeChangeEventData;\n        return (\n          typeof userMenuData.isVisible === \"boolean\" &&\n          typeof userMenuData.previousVisibility === \"boolean\" &&\n          [\"click\", \"keyboard\", \"programmatic\"].includes(userMenuData.trigger)\n        );\n      }\n\n      default:\n        return true; // Generic events are always valid\n    }\n  }\n\n  /**\n   * Format event data for debugging/logging\n   */\n  static formatEventDataForLogging(event: TypedLayoutEvent): string {\n    switch (event.type) {\n      case \"layout-ready\":\n        return \"→ Layout initialization complete\";\n\n      case \"layout-mode-change\": {\n        const modeData = event.data as LayoutModeChangeEventData;\n        const mobileNote = modeData.modeType === \"mobile\" ? \" (compact mode disabled)\" : \"\";\n        const previousNote = modeData.previousModeType \n          ? ` (from ${modeData.previousModeType})`\n          : \"\";\n        return `→ modeType=${modeData.modeType}${mobileNote}, viewport=${modeData.viewport?.width}x${modeData.viewport?.height}${previousNote}`;\n      }\n      case \"sidebar-compact-mode-change\": {\n        const sidebarData = event.data as SidebarCompactModeChangeEventData;\n        const blockedNote = sidebarData.blockedReason \n          ? ` (blocked: ${sidebarData.blockedReason})` \n          : \"\";\n        const changeNote = sidebarData.previousCompactMode !== undefined\n          ? ` (was ${sidebarData.previousCompactMode})`\n          : \"\";\n        return `→ compactMode=${sidebarData.compactMode}${blockedNote}${changeNote}`;\n      }\n\n      case \"mobile-menu-request\": {\n        const mobileMenuRequestData = event.data as MobileMenuRequestEventData;\n        const requestIcon = mobileMenuRequestData.requestedAction === \"show\" ? \"📢\" : \n                           mobileMenuRequestData.requestedAction === \"hide\" ? \"🔄\" : \"⚙️\";\n        const requestTriggerNote = ` (via ${mobileMenuRequestData.trigger})`;\n        return `${requestIcon} request ${mobileMenuRequestData.requestedAction} mobile menu${requestTriggerNote}`;\n      }\n      case \"sidebar-compact-request\": {\n        const sidebarRequestData = event.data as SidebarCompactRequestEventData;\n        const sidebarRequestIcon = sidebarRequestData.requestedAction === \"show\" ? \"📢\" : \n                                  sidebarRequestData.requestedAction === \"hide\" ? \"🔄\" : \"⚙️\";\n        return `${sidebarRequestIcon} request ${sidebarRequestData.requestedAction} sidebar compact (via ${sidebarRequestData.trigger})`;\n      }\n      case \"mobile-menu-mode-change\": {\n        const mobileMenuData = event.data as MobileMenuModeChangeEventData;\n        const actionIcon = mobileMenuData.isVisible ? \"📱\" : \"❌\";\n        const toggleTriggerNote = ` (via ${mobileMenuData.trigger})`;\n        const stateChange = mobileMenuData.previousVisibility !== mobileMenuData.isVisible \n          ? ` ${mobileMenuData.previousVisibility} → ${mobileMenuData.isVisible}`\n          : \"\";\n        return `${actionIcon} mobile menu${stateChange}${toggleTriggerNote}`;\n      }\n      case \"user-menu-request\": {\n        const userMenuRequestData = event.data as UserMenuRequestEventData;\n        const userRequestIcon = userMenuRequestData.requestedAction === \"show\" ? \"📢\" : \n                               userMenuRequestData.requestedAction === \"hide\" ? \"🔄\" : \"⚙️\";\n        return `${userRequestIcon} request ${userMenuRequestData.requestedAction} user menu (via ${userMenuRequestData.trigger})`;\n      }\n      case \"user-menu-mode-change\": {\n        const userMenuData = event.data as UserMenuModeChangeEventData;\n        const userActionIcon = userMenuData.isVisible ? \"👤\" : \"❌\";\n        const userTriggerNote = ` (via ${userMenuData.trigger})`;\n        const userStateChange = userMenuData.previousVisibility !== userMenuData.isVisible \n          ? ` ${userMenuData.previousVisibility} → ${userMenuData.isVisible}`\n          : \"\";\n        return `${userActionIcon} user menu${userStateChange}${userTriggerNote}`;\n      }\n\n      default:\n        try {\n          return event.data ? `→ data=${JSON.stringify(event.data)}` : \"\";\n        } catch {\n          return \"→ [complex data]\";\n        }\n    }\n  }\n\n  /**\n   * Get color-coded badge for event type\n   */\n  static getEventBadge(eventType: LayoutEventType): string {\n    switch (eventType) {\n      case \"layout-ready\": return \"🟩\";\n      case \"layout-mode-change\": return \"🟦\";\n      case \"sidebar-compact-mode-change\": return \"🟨\";\n      case \"sidebar-compact-request\": return \"📢\";\n      case \"mobile-menu-request\": return \"📢\";\n      case \"mobile-menu-mode-change\": return \"📱\";\n      case \"user-menu-request\": return \"📢\";\n      case \"user-menu-mode-change\": return \"👤\";\n      default: return \"⬜\";\n    }\n  }\n}\n\n// =================================================================================\n// Type Guards\n// =================================================================================\n\nexport function isLayoutReadyEvent(\n  event: TypedLayoutEvent,\n): event is TypedLayoutEvent<LayoutReadyEventData> {\n  return event.type === \"layout-ready\";\n}\n\nexport function isLayoutModeChangeEvent(\n  event: TypedLayoutEvent,\n): event is TypedLayoutEvent<LayoutModeChangeEventData> {\n  return event.type === \"layout-mode-change\";\n}\n\nexport function isSidebarCompactModeChangeEvent(\n  event: TypedLayoutEvent,\n): event is TypedLayoutEvent<SidebarCompactModeChangeEventData> {\n  return event.type === \"sidebar-compact-mode-change\";\n}\n\nexport function isMobileMenuRequestEvent(\n  event: TypedLayoutEvent,\n): event is TypedLayoutEvent<MobileMenuRequestEventData> {\n  return event.type === \"mobile-menu-request\";\n}\n\nexport function isSidebarCompactRequestEvent(\n  event: TypedLayoutEvent,\n): event is TypedLayoutEvent<SidebarCompactRequestEventData> {\n  return event.type === \"sidebar-compact-request\";\n}\n\nexport function isMobileMenuModeChangeEvent(\n  event: TypedLayoutEvent,\n): event is TypedLayoutEvent<MobileMenuModeChangeEventData> {\n  return event.type === \"mobile-menu-mode-change\";\n}\n\nexport function isUserMenuRequestEvent(\n  event: TypedLayoutEvent,\n): event is TypedLayoutEvent<UserMenuRequestEventData> {\n  return event.type === \"user-menu-request\";\n}\n\nexport function isUserMenuModeChangeEvent(\n  event: TypedLayoutEvent,\n): event is TypedLayoutEvent<UserMenuModeChangeEventData> {\n  return event.type === \"user-menu-mode-change\";\n}\n","/**\n * User Menu Component\n * Manages user dropdown menu functionality\n */\n\nimport type { UserMenuItem } from \"./Layout\";\nimport type { LayoutContext } from \"../contexts/LayoutContext\";\nimport { LayoutEventFactory } from \"../contexts/LayoutEventFactory\";\nimport { LoggerFactory } from \"../logging/LoggerFactory\";\nimport { Logger } from \"../logging/Logger\";\n\nexport interface User {\n  username: string;\n  email?: string;\n  avatar?: string;\n}\n\nexport class UserMenu {\n  private container: HTMLElement | null = null;\n  private user: User | null = null;\n  private elements: {\n    trigger?: HTMLElement;\n    dropdown?: HTMLElement;\n    username?: HTMLElement;\n    userMenuName?: HTMLElement;\n    userMenuEmail?: HTMLElement;\n  } = {};\n  private isOpen: boolean = false;\n  private layoutContext?: LayoutContext;\n  private logger: Logger;\n\n  constructor(private parentContainer: HTMLElement, layoutContext?: LayoutContext) {\n    this.container = parentContainer;\n    this.layoutContext = layoutContext;\n    this.logger = LoggerFactory.getInstance().getLogger('UserMenu');\n  }\n\n  /**\n   * Initialize the user menu\n   */\n  async init(): Promise<void> {\n    this.logger.info(\"Initializing...\");\n    this.injectResponsiveCSS();\n    this.createUserMenu();\n    this.cacheElements();\n    this.setupEventListeners();\n    this.setupLayoutEventSubscriptions();\n    this.initializeWithDefaultUser();\n    this.logger.info(\"Ready\");\n  }\n\n  /**\n   * Inject responsive CSS for mobile and desktop views\n   */\n  private injectResponsiveCSS(): void {\n    const existingStyle = document.getElementById(\"user-menu-responsive-css\");\n    if (existingStyle) {\n      return; // Already injected\n    }\n\n    const style = document.createElement(\"style\");\n    style.id = \"user-menu-responsive-css\";\n    style.textContent = `\n      /* Desktop styles (default) */\n      .user-menu-trigger {\n        /* Default desktop styles already inline */\n      }\n\n      /* Add backdrop overlay for mobile */\n      .user-menu-backdrop {\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.5);\n        z-index: 10001;\n      }\n\n      @media (max-width: 767px) {\n        .user-menu-backdrop.show {\n          display: block !important;\n        }\n      }\n\n      /* Mobile styles (< 768px) */\n      @media (max-width: 767px) {\n        .user-menu-trigger {\n          /* Transform to mobile icon style */\n          padding: 9px !important;\n          border-radius: 8px !important;\n          width: 42px !important;\n          height: 42px !important;\n          justify-content: center !important;\n          background: linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%) !important;\n          border: 1px solid #e3e6ea !important;\n          box-shadow:\n            0 2px 4px rgba(0,0,0,0.08),\n            0 4px 12px rgba(0,0,0,0.05),\n            inset 0 1px 0 rgba(255,255,255,0.8) !important;\n          backdrop-filter: blur(10px) !important;\n        }\n\n        .user-menu-trigger:hover {\n          background: linear-gradient(145deg, #f8f9ff 0%, #e3f2fd 100%) !important;\n          border-color: #007bff !important;\n          transform: translateY(-1px) !important;\n          box-shadow:\n            0 3px 6px rgba(0,123,255,0.15),\n            0 6px 16px rgba(0,123,255,0.1),\n            inset 0 1px 0 rgba(255,255,255,0.9) !important;\n        }\n\n        /* Hide text elements on mobile */\n        .user-menu-trigger .user-info {\n          display: none !important;\n        }\n\n        /* Center and adjust user icon for mobile */\n        .user-menu-trigger .user-avatar {\n          margin: 0 !important;\n          display: flex !important;\n          align-items: center !important;\n          justify-content: center !important;\n        }\n\n        .user-menu-trigger .user-icon {\n          font-size: 18px !important;\n          font-style: normal !important;\n        }\n\n        /* Note: Mobile dropdown positioning and styling is now handled\n           by createMobileDropdown() method using inline styles to avoid\n           CSS conflicts. The styles below are kept for reference but\n           are no longer used on mobile. */\n      }\n\n      /* Hide close button on desktop and tablet */\n      @media (min-width: 768px) {\n        .user-menu-close {\n          display: none !important;\n        }\n      }\n    `;\n\n    document.head.appendChild(style);\n    this.logger.info(\"Responsive CSS injected\");\n  }\n\n  /**\n   * Create user menu HTML structure\n   */\n  private createUserMenu(): void {\n    const userMenuHtml = `\n      <div class=\"user-menu-container\" style=\"position: relative;\">\n        <div class=\"user-menu-trigger\" id=\"user_menu_trigger\" style=\"\n          display: flex;\n          align-items: center;\n          cursor: pointer;\n          padding: 8px 12px;\n          border-radius: 6px;\n          background: white;\n          border: 1px solid #dee2e6;\n          transition: all 0.2s ease;\n        \">\n          <div class=\"user-avatar\" style=\"margin-right: 10px;\">\n            <span class=\"user-icon\" style=\"font-size: 20px; color: #007bff; font-style: normal;\">👤</span>\n          </div>\n          <div class=\"user-info\" style=\"display: flex; align-items: center; gap: 8px;\">\n            <span class=\"username\" id=\"label_username\" style=\"font-weight: 500; color: #212529; font-size: 14px;\">Loading...</span>\n            <span class=\"dropdown-arrow\" style=\"font-size: 10px; color: #6c757d; transition: transform 0.2s ease; font-style: normal;\">▼</span>\n          </div>\n        </div>\n        <div class=\"user-menu-dropdown\" id=\"user_menu_dropdown\" style=\"\n          position: absolute;\n          top: calc(100% + 4px);\n          right: 0;\n          min-width: 280px;\n          background: white;\n          border: 1px solid #dee2e6;\n          border-radius: 6px;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n          z-index: 9999;\n          overflow: hidden;\n          display: none;\n        \">\n          <div class=\"user-menu-header\" style=\"\n            padding: 16px;\n            background: #f8f9fa;\n            border-bottom: 1px solid #dee2e6;\n            display: flex;\n            align-items: center;\n            gap: 12px;\n          \">\n            <div class=\"user-menu-avatar\">\n              <span class=\"user-icon-large\" style=\"font-size: 32px; color: #007bff; font-style: normal;\">👤</span>\n            </div>\n            <div class=\"user-menu-details\">\n              <div class=\"user-menu-name\" id=\"user_menu_name\" style=\"\n                font-weight: 600;\n                color: #212529;\n                font-size: 16px;\n                margin-bottom: 4px;\n              \">Loading...</div>\n              <div class=\"user-menu-email\" id=\"user_menu_email\" style=\"\n                color: #6c757d;\n                font-size: 14px;\n              \">demo@example.com</div>\n            </div>\n          </div>\n          <!-- Close button for mobile -->\n          <button class=\"user-menu-close\" id=\"user_menu_close\" style=\"\n            position: absolute;\n            top: 12px;\n            right: 12px;\n            background: none;\n            border: none;\n            cursor: pointer;\n            padding: 8px;\n            border-radius: 50%;\n            transition: all 0.2s ease;\n            color: #6c757d;\n            font-size: 18px;\n            line-height: 1;\n            z-index: 10;\n          \" title=\"Close menu\">\n            <span class=\"material-icons\" style=\"font-size: 20px;\">close</span>\n          </button>\n\n          <ul class=\"user-menu-items\" style=\"\n            list-style: none;\n            margin: 0;\n            padding: 16px 0 8px 0;\n          \">\n            <li>\n              <a href=\"/account\" class=\"user-menu-item\" style=\"\n                display: flex;\n                align-items: center;\n                padding: 12px 20px;\n                color: #495057;\n                text-decoration: none;\n                transition: all 0.2s ease;\n                border-radius: 0;\n                margin: 0;\n                font-size: 15px;\n                font-weight: 500;\n                min-height: 48px;\n              \">\n                <span class=\"material-icons nav-icon\" style=\"\n                  margin-right: 16px;\n                  font-size: 20px;\n                  width: 24px;\n                  color: #6c757d;\n                  transition: color 0.2s ease;\n                \">settings</span>\n                <span class=\"nav-text\">Account Settings</span>\n              </a>\n            </li>\n            <li>\n              <a href=\"javascript:;\" class=\"user-menu-item\" data-action=\"feedback\" style=\"\n                display: flex;\n                align-items: center;\n                padding: 12px 20px;\n                color: #495057;\n                text-decoration: none;\n                transition: all 0.2s ease;\n                border-radius: 0;\n                margin: 0;\n                font-size: 15px;\n                font-weight: 500;\n                min-height: 48px;\n              \">\n                <span class=\"material-icons nav-icon\" style=\"\n                  margin-right: 16px;\n                  font-size: 20px;\n                  width: 24px;\n                  color: #6c757d;\n                  transition: color 0.2s ease;\n                \">feedback</span>\n                <span class=\"nav-text\">Send Feedback</span>\n              </a>\n            </li>\n            <li style=\"height: 1px; background: #e9ecef; margin: 8px 16px;\"></li>\n            <li>\n              <a href=\"javascript:;\" class=\"user-menu-item user-menu-signout\" data-action=\"logout\" style=\"\n                display: flex;\n                align-items: center;\n                padding: 12px 20px;\n                color: #dc3545;\n                text-decoration: none;\n                transition: all 0.2s ease;\n                border-radius: 0;\n                margin: 0;\n                font-size: 15px;\n                font-weight: 500;\n                min-height: 48px;\n              \">\n                <span class=\"material-icons nav-icon\" style=\"\n                  margin-right: 16px;\n                  font-size: 20px;\n                  width: 24px;\n                  color: #dc3545;\n                  transition: color 0.2s ease;\n                \">logout</span>\n                <span class=\"nav-text\">Sign Out</span>\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    `;\n\n    if (this.container) {\n      this.container.innerHTML = userMenuHtml;\n    }\n  }\n\n  /**\n   * Cache DOM elements\n   */\n  private cacheElements(): void {\n    this.elements = {\n      trigger: document.getElementById(\"user_menu_trigger\") as HTMLElement,\n      dropdown: document.getElementById(\"user_menu_dropdown\") as HTMLElement,\n      username: document.getElementById(\"label_username\") as HTMLElement,\n      userMenuName: document.getElementById(\"user_menu_name\") as HTMLElement,\n      userMenuEmail: document.getElementById(\"user_menu_email\") as HTMLElement,\n    };\n\n    this.logger.info(\"Cached elements:\", {\n      trigger: !!this.elements.trigger,\n      dropdown: !!this.elements.dropdown,\n      username: !!this.elements.username,\n      userMenuName: !!this.elements.userMenuName,\n      userMenuEmail: !!this.elements.userMenuEmail,\n    });\n  }\n\n  /**\n   * Setup layout event subscriptions\n   */\n  private setupLayoutEventSubscriptions(): void {\n    if (!this.layoutContext) {\n      this.logger.info(\"No layout context available, skipping event subscriptions\");\n      return;\n    }\n\n    // Subscribe to user-menu-request events (commands from external components)\n    this.layoutContext.subscribe(\"user-menu-request\", (event) => {\n      const eventData = event && typeof event === 'object' && event !== null ? (event as any).data : null;\n      const requestedAction = eventData && typeof eventData === 'object' && eventData !== null ? (eventData as any).requestedAction : null;\n      const trigger = eventData && typeof eventData === 'object' && eventData !== null ? (eventData as any).trigger : null;\n      \n      this.logger.info(`Received request: ${requestedAction} (from ${trigger})`);\n      \n      switch (requestedAction) {\n        case \"show\":\n          if (!this.isOpen) {\n            this.open();\n          } else {\n            this.logger.warn(\"Request to show but menu is already open\");\n          }\n          break;\n        case \"hide\":\n          if (this.isOpen) {\n            this.close();\n          } else {\n            this.logger.warn(\"Request to hide but menu is already closed\");\n          }\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n        default:\n          this.logger.warn(`Unknown requested action: ${requestedAction}`);\n      }\n    });\n    \n    this.logger.info(\"Layout event subscriptions setup complete\");\n  }\n\n  /**\n   * Setup event listeners\n   */\n  private setupEventListeners(): void {\n    if (this.elements.trigger) {\n      this.elements.trigger.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.logger.info(\"Trigger clicked\");\n        this.toggle();\n      });\n\n      // Hover effects\n      this.elements.trigger.addEventListener(\"mouseenter\", () => {\n        if (this.elements.trigger) {\n          this.elements.trigger.style.background = \"#f8f9fa\";\n          this.elements.trigger.style.borderColor = \"#adb5bd\";\n        }\n      });\n\n      this.elements.trigger.addEventListener(\"mouseleave\", () => {\n        if (this.elements.trigger && !this.isOpen) {\n          this.elements.trigger.style.background = \"white\";\n          this.elements.trigger.style.borderColor = \"#dee2e6\";\n        }\n      });\n    }\n\n    // Menu item hover effects\n    const menuItems = document.querySelectorAll(\".user-menu-item\");\n    menuItems.forEach((item) => {\n      item.addEventListener(\"mouseenter\", () => {\n        (item as HTMLElement).style.background = \"#f8f9fa\";\n      });\n      item.addEventListener(\"mouseleave\", () => {\n        (item as HTMLElement).style.background = \"transparent\";\n      });\n    });\n\n    // Add event listener for close button\n    const closeButton = document.getElementById(\"user_menu_close\");\n    if (closeButton) {\n      closeButton.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.logger.info(\"Close button clicked\");\n        this.handleCloseButtonClick();\n      });\n    }\n\n    // Close menu when clicking outside\n    document.addEventListener(\"click\", (e) => {\n      if (this.isOpen && this.elements.trigger && this.elements.dropdown) {\n        const target = e.target as HTMLElement;\n        if (\n          !this.elements.trigger.contains(target) &&\n          !this.elements.dropdown.contains(target)\n        ) {\n          this.handleClickOutside();\n        }\n      }\n    });\n  }\n\n  /**\n   * Toggle dropdown\n   */\n  toggle(): void {\n    this.handleToggleClick();\n  }\n\n  /**\n   * Open dropdown (public API - no event emission)\n   */\n  open(): void {\n    if (!this.elements.dropdown || !this.elements.trigger) {\n      this.logger.warn(\"Cannot open: missing elements\");\n      return;\n    }\n\n    this.logger.info(\"Opening dropdown (public API)\");\n    this.isOpen = true;\n\n    // Check if mobile mode\n    const isMobile = window.innerWidth <= 767;\n\n    if (isMobile) {\n      this.createMobileBackdrop();\n      // Prevent body scrolling on mobile\n      document.body.style.overflow = \"hidden\";\n\n      // Create a completely new dropdown element for mobile to avoid CSS conflicts\n      this.createMobileDropdown();\n    } else {\n      // Desktop mode - use the original dropdown\n      this.elements.dropdown.style.display = \"block\";\n      this.elements.dropdown.style.visibility = \"visible\";\n      this.elements.dropdown.style.opacity = \"1\";\n    }\n\n    this.elements.trigger.style.background = \"#f8f9fa\";\n    this.elements.trigger.style.borderColor = \"#007bff\";\n\n    // Rotate arrow\n    const arrow = this.elements.trigger.querySelector(\n      \".dropdown-arrow\",\n    ) as HTMLElement;\n    if (arrow) {\n      arrow.style.transform = \"rotate(180deg)\";\n    }\n  }\n\n  /**\n   * Close dropdown (public API - no event emission)\n   */\n  close(): void {\n    if (!this.elements.dropdown || !this.elements.trigger) {\n      return;\n    }\n\n    this.logger.info(\"Closing dropdown (public API)\");\n    this.isOpen = false;\n\n    // Hide desktop dropdown\n    this.elements.dropdown.style.display = \"none\";\n    this.elements.trigger.style.background = \"white\";\n    this.elements.trigger.style.borderColor = \"#dee2e6\";\n\n    // Reset dropdown styles to desktop defaults\n    this.elements.dropdown.style.position = \"absolute\";\n    this.elements.dropdown.style.top = \"calc(100% + 4px)\";\n    this.elements.dropdown.style.left = \"auto\";\n    this.elements.dropdown.style.right = \"0\";\n    this.elements.dropdown.style.bottom = \"auto\";\n    this.elements.dropdown.style.transform = \"none\";\n    this.elements.dropdown.style.width = \"auto\";\n    this.elements.dropdown.style.minWidth = \"280px\";\n    this.elements.dropdown.style.maxWidth = \"none\";\n    this.elements.dropdown.style.margin = \"auto\";\n    this.elements.dropdown.style.borderRadius = \"6px\";\n    this.elements.dropdown.style.boxShadow = \"0 4px 12px rgba(0, 0, 0, 0.15)\";\n    this.elements.dropdown.style.zIndex = \"9999\";\n\n    // Remove mobile dropdown if it exists\n    const mobileDropdown = document.querySelector(\".user-menu-mobile-dropdown\");\n    if (mobileDropdown) {\n      mobileDropdown.remove();\n      this.logger.info(\"📱 Removed mobile dropdown\");\n    }\n\n    // Remove mobile backdrop and restore body scroll\n    this.removeMobileBackdrop();\n    document.body.style.overflow = \"\";\n\n    // Reset arrow\n    const arrow = this.elements.trigger.querySelector(\n      \".dropdown-arrow\",\n    ) as HTMLElement;\n    if (arrow) {\n      arrow.style.transform = \"rotate(0deg)\";\n    }\n  }\n\n  /**\n   * Handle toggle click (internal - change state and emit event)\n   */\n  private handleToggleClick(): void {\n    this.logger.info(\"Toggle click\");\n    const wasOpen = this.isOpen;\n    const targetState = !wasOpen;\n    \n    // Actually change the state\n    if (targetState) {\n      this.open();\n    } else {\n      this.close();\n    }\n    \n    // Then emit the event\n    this.emitUserMenuModeChangeEvent(targetState, wasOpen, \"click\");\n  }\n\n  /**\n   * Handle close button click (internal - close and emit event if needed)\n   */\n  private handleCloseButtonClick(): void {\n    this.logger.info(\"Close button click\");\n    if (!this.isOpen) {\n      this.logger.warn(\"Close button clicked but menu is already closed\");\n      return;\n    }\n    const wasOpen = this.isOpen;\n    this.close();\n    this.emitUserMenuModeChangeEvent(false, wasOpen, \"click\");\n  }\n\n  /**\n   * Handle click outside (internal - close and emit event if needed)\n   */\n  private handleClickOutside(): void {\n    this.logger.info(\"Click outside\");\n    if (!this.isOpen) {\n      this.logger.warn(\"Click outside detected but menu is already closed\");\n      return;\n    }\n    const wasOpen = this.isOpen;\n    this.close();\n    this.emitUserMenuModeChangeEvent(false, wasOpen, \"click\");\n  }\n\n  /**\n   * Handle mobile close button click (internal - close and emit event if needed)\n   */\n  private handleMobileCloseButtonClick(): void {\n    this.logger.info(\"Mobile close button click\");\n    if (!this.isOpen) {\n      this.logger.warn(\"Mobile close button clicked but menu is already closed\");\n      return;\n    }\n    const wasOpen = this.isOpen;\n    this.close();\n    this.emitUserMenuModeChangeEvent(false, wasOpen, \"click\");\n  }\n\n  /**\n   * Handle backdrop click (internal - close and emit event if needed)\n   */\n  private handleBackdropClick(): void {\n    this.logger.info(\"Backdrop click\");\n    if (!this.isOpen) {\n      this.logger.warn(\"Backdrop clicked but menu is already closed\");\n      return;\n    }\n    const wasOpen = this.isOpen;\n    this.close();\n    this.emitUserMenuModeChangeEvent(false, wasOpen, \"click\");\n  }\n\n  /**\n   * Update user data\n   */\n  updateUser(user: User): void {\n    this.logger.info(\"Updating user:\", user);\n    this.user = user;\n\n    if (this.elements.username) {\n      this.elements.username.textContent = user.username;\n    }\n\n    if (this.elements.userMenuName) {\n      this.elements.userMenuName.textContent = user.username;\n    }\n\n    if (this.elements.userMenuEmail && user.email) {\n      this.elements.userMenuEmail.textContent = user.email;\n    }\n  }\n\n  /**\n   * Get current user\n   */\n  getUser(): User | null {\n    return this.user;\n  }\n\n  /**\n   * Create a fresh mobile dropdown to avoid CSS conflicts\n   */\n  private createMobileDropdown(): void {\n    this.logger.info(\"📱 Creating fresh mobile dropdown...\");\n\n    // Remove any existing mobile dropdown to avoid duplicates\n    const existingMobileDropdown = document.querySelector(\n      \".user-menu-mobile-dropdown\",\n    );\n    if (existingMobileDropdown) {\n      existingMobileDropdown.remove();\n      this.logger.info(\"📱 Removed existing mobile dropdown\");\n    }\n\n    // Create completely new dropdown element for mobile\n    const mobileDropdown = document.createElement(\"div\");\n    mobileDropdown.className = \"user-menu-mobile-dropdown\";\n    mobileDropdown.id = \"user_menu_mobile_dropdown\";\n\n    // Use inline styles with !important to avoid any CSS conflicts\n    mobileDropdown.setAttribute(\n      \"style\",\n      `\n      position: fixed !important;\n      top: 50% !important;\n      left: 50% !important;\n      transform: translate(-50%, -50%) !important;\n      width: calc(100vw - 32px) !important;\n      min-width: 280px !important;\n      max-width: 380px !important;\n      background: white !important;\n      border: 1px solid rgba(255,255,255,0.2) !important;\n      border-radius: 16px !important;\n      box-shadow: 0 25px 80px rgba(0,0,0,0.35), 0 10px 40px rgba(0,0,0,0.2) !important;\n      z-index: 99999 !important;\n      overflow: hidden !important;\n      display: block !important;\n      visibility: visible !important;\n      opacity: 1 !important;\n      backdrop-filter: blur(10px) !important;\n    `,\n    );\n\n    const user = this.getUser();\n    const username = user?.username || \"Loading...\";\n    const email = user?.email || \"Please wait...\";\n\n    mobileDropdown.innerHTML = `\n      <div class=\"user-menu-header\" style=\"\n        padding: 24px 20px !important;\n        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%) !important;\n        border-bottom: 1px solid rgba(0,0,0,0.06) !important;\n        border-radius: 16px 16px 0 0 !important;\n        display: flex !important;\n        align-items: center !important;\n        gap: 12px !important;\n      \">\n        <div class=\"user-menu-avatar\">\n          <span class=\"user-icon-large\" style=\"\n            font-size: 48px !important;\n            color: #007bff !important;\n            font-style: normal !important;\n            filter: drop-shadow(0 2px 4px rgba(0,123,255,0.2)) !important;\n          \">👤</span>\n        </div>\n        <div class=\"user-menu-details\">\n          <div class=\"user-menu-name\" style=\"\n            font-size: 20px !important;\n            font-weight: 700 !important;\n            margin-bottom: 8px !important;\n            color: #1a1a1a !important;\n          \">${username}</div>\n          <div class=\"user-menu-email\" style=\"\n            font-size: 16px !important;\n            color: #6c757d !important;\n            font-weight: 500 !important;\n          \">${email}</div>\n        </div>\n        <button class=\"user-menu-mobile-close\" style=\"\n          position: absolute !important;\n          top: 12px !important;\n          right: 12px !important;\n          background: rgba(255,255,255,0.9) !important;\n          border: 1px solid rgba(0,0,0,0.1) !important;\n          border-radius: 50% !important;\n          width: 36px !important;\n          height: 36px !important;\n          font-size: 18px !important;\n          cursor: pointer !important;\n          color: #6c757d !important;\n          transition: all 0.2s ease !important;\n          z-index: 10 !important;\n          backdrop-filter: blur(5px) !important;\n          display: flex !important;\n          align-items: center !important;\n          justify-content: center !important;\n        \" title=\"Close menu\">✕</button>\n      </div>\n\n      <ul class=\"user-menu-items\" style=\"\n        list-style: none !important;\n        margin: 0 !important;\n        padding: 16px 0 8px 0 !important;\n      \">\n        <li>\n          <a href=\"/account\" class=\"user-menu-item\" style=\"\n            display: flex !important;\n            align-items: center !important;\n            padding: 12px 20px !important;\n            color: #495057 !important;\n            text-decoration: none !important;\n            transition: all 0.2s ease !important;\n            border-radius: 0 !important;\n            margin: 0 !important;\n            font-size: 15px !important;\n            font-weight: 500 !important;\n            min-height: 48px !important;\n          \">\n            <span class=\"material-icons nav-icon\" style=\"\n              margin-right: 16px !important;\n              font-size: 20px !important;\n              width: 24px !important;\n              color: #6c757d !important;\n              transition: color 0.2s ease !important;\n            \">settings</span>\n            <span class=\"nav-text\">Account Settings</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"javascript:;\" class=\"user-menu-item\" data-action=\"feedback\" style=\"\n            display: flex !important;\n            align-items: center !important;\n            padding: 12px 20px !important;\n            color: #495057 !important;\n            text-decoration: none !important;\n            transition: all 0.2s ease !important;\n            border-radius: 0 !important;\n            margin: 0 !important;\n            font-size: 15px !important;\n            font-weight: 500 !important;\n            min-height: 48px !important;\n          \">\n            <span class=\"material-icons nav-icon\" style=\"\n              margin-right: 16px !important;\n              font-size: 20px !important;\n              width: 24px !important;\n              color: #6c757d !important;\n              transition: color 0.2s ease !important;\n            \">feedback</span>\n            <span class=\"nav-text\">Send Feedback</span>\n          </a>\n        </li>\n        <li style=\"height: 1px !important; background: #e9ecef !important; margin: 8px 16px !important;\"></li>\n        <li>\n          <a href=\"javascript:;\" class=\"user-menu-item user-menu-signout\" data-action=\"logout\" style=\"\n            display: flex !important;\n            align-items: center !important;\n            padding: 12px 20px !important;\n            color: #dc3545 !important;\n            text-decoration: none !important;\n            transition: all 0.2s ease !important;\n            border-radius: 0 !important;\n            margin: 0 !important;\n            font-size: 15px !important;\n            font-weight: 500 !important;\n            min-height: 48px !important;\n          \">\n            <span class=\"material-icons nav-icon\" style=\"\n              margin-right: 16px !important;\n              font-size: 20px !important;\n              width: 24px !important;\n              color: #dc3545 !important;\n              transition: color 0.2s ease !important;\n            \">logout</span>\n            <span class=\"nav-text\">Sign Out</span>\n          </a>\n        </li>\n      </ul>\n    `;\n\n    // Add to document body to escape container constraints\n    document.body.appendChild(mobileDropdown);\n\n    // Add hover effects to new menu items\n    const menuItems = mobileDropdown.querySelectorAll(\".user-menu-item\");\n    menuItems.forEach((item) => {\n      item.addEventListener(\"mouseenter\", () => {\n        (item as HTMLElement).style.setProperty(\n          \"background\",\n          \"#f8f9fa\",\n          \"important\",\n        );\n      });\n      item.addEventListener(\"mouseleave\", () => {\n        (item as HTMLElement).style.setProperty(\n          \"background\",\n          \"transparent\",\n          \"important\",\n        );\n      });\n\n      // Add click handling for menu items\n      item.addEventListener(\"click\", (e) => {\n        this.logger.info(\n          \"📱 Mobile menu item clicked:\",\n          (e.currentTarget as HTMLElement).textContent?.trim(),\n        );\n      });\n    });\n\n    // Add close button event\n    const closeButton = mobileDropdown.querySelector(\".user-menu-mobile-close\");\n    if (closeButton) {\n      closeButton.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.logger.info(\"📱 Mobile close button clicked\");\n        this.handleMobileCloseButtonClick();\n      });\n\n      // Add hover effect to close button\n      closeButton.addEventListener(\"mouseenter\", () => {\n        (closeButton as HTMLElement).style.setProperty(\n          \"background\",\n          \"rgba(220, 53, 69, 0.1)\",\n          \"important\",\n        );\n        (closeButton as HTMLElement).style.setProperty(\n          \"color\",\n          \"#dc3545\",\n          \"important\",\n        );\n      });\n      closeButton.addEventListener(\"mouseleave\", () => {\n        (closeButton as HTMLElement).style.setProperty(\n          \"background\",\n          \"rgba(255,255,255,0.9)\",\n          \"important\",\n        );\n        (closeButton as HTMLElement).style.setProperty(\n          \"color\",\n          \"#6c757d\",\n          \"important\",\n        );\n      });\n    }\n\n    // Log detailed computed styles for debugging\n    const computedStyles = window.getComputedStyle(mobileDropdown);\n    this.logger.info(\n      \"📱 Fresh mobile dropdown created and added to body\",\n      {\n        position: computedStyles.position,\n        top: computedStyles.top,\n        left: computedStyles.left,\n        transform: computedStyles.transform,\n        zIndex: computedStyles.zIndex,\n        display: computedStyles.display,\n        visibility: computedStyles.visibility,\n        opacity: computedStyles.opacity,\n        width: computedStyles.width,\n        height: computedStyles.height,\n        backgroundColor: computedStyles.backgroundColor,\n      },\n    );\n  }\n\n  /**\n   * Show mobile backdrop overlay (reuse existing sidebar overlay)\n   */\n  private createMobileBackdrop(): void {\n    // Add body class for blur effect\n    document.body.classList.add(\"user-menu-mobile-open\");\n\n    // Remove any existing user menu backdrop\n    const existingBackdrop = document.querySelector(\".user-menu-backdrop\");\n    if (existingBackdrop) {\n      existingBackdrop.remove();\n    }\n\n    // Create new user menu backdrop with blur effects\n    const backdrop = document.createElement(\"div\");\n    backdrop.className = \"user-menu-backdrop\";\n\n    // Add backdrop to document body\n    document.body.appendChild(backdrop);\n\n    // Animate backdrop in with show class\n    requestAnimationFrame(() => {\n      backdrop.classList.add(\"show\");\n    });\n\n    // Close user menu when backdrop is clicked\n    backdrop.addEventListener(\"click\", () => {\n      this.handleBackdropClick();\n    });\n\n    this.logger.info(\"📱 Mobile backdrop created with blur effects\");\n  }\n\n  /**\n   * Hide mobile backdrop overlay\n   */\n  private removeMobileBackdrop(): void {\n    // Remove body class for blur effect\n    document.body.classList.remove(\"user-menu-mobile-open\");\n\n    // Remove user menu backdrop if it exists\n    const backdrop = document.querySelector(\".user-menu-backdrop\");\n    if (backdrop) {\n      backdrop.classList.remove(\"show\");\n      // Remove after transition\n      setTimeout(() => {\n        backdrop.remove();\n      }, 300);\n    }\n\n    this.logger.info(\n      \"📱 Mobile backdrop removed with blur effects cleanup\",\n    );\n  }\n\n  /**\n   * Initialize with loading state - authentication service will update user data\n   */\n  private initializeWithDefaultUser(): void {\n    this.logger.info(\"Initializing with loading state, waiting for authentication service...\");\n    // Keep \"Loading...\" text to indicate authentication is in progress\n    // AppHeaderBinderService will call updateUser() once authentication completes\n  }\n\n  /**\n   * Update user menu items from Layout configuration\n   */\n  public updateMenuItems(items: UserMenuItem[]): void {\n    this.logger.info(\"Updating menu items:\", items.length, \"items\");\n\n    // Find the menu items container\n    const menuItemsContainer =\n      this.elements.dropdown?.querySelector(\".user-menu-items\");\n    if (!menuItemsContainer) {\n      this.logger.warn(\"Menu items container not found\");\n      return;\n    }\n\n    // Generate HTML for menu items\n    const menuItemsHTML = items\n      .map((item) => this.renderUserMenuItem(item))\n      .join(\"\");\n\n    // Update the menu items\n    menuItemsContainer.innerHTML = menuItemsHTML;\n\n    // Re-setup hover effects for new items\n    this.setupMenuItemHoverEffects();\n\n    this.logger.info(\"Menu items updated successfully\");\n  }\n\n  /**\n   * Render a single user menu item\n   */\n  private renderUserMenuItem(item: UserMenuItem): string {\n    if (item.type === \"divider\") {\n      return '<li style=\"height: 1px; background: #e9ecef; margin: 8px 16px;\"></li>';\n    }\n\n    const href = item.href || \"javascript:;\";\n    const action = item.action ? `data-action=\"${item.action}\"` : \"\";\n    const className = item.className ? ` ${item.className}` : \"\";\n    const style = item.style ? ` ${item.style}` : \"\";\n    const color = item.id === \"logout\" ? \"#dc3545\" : \"#6c757d\";\n\n    return `\n      <li>\n        <a href=\"${href}\" class=\"user-menu-item${className}\" ${action} style=\"\n          display: flex;\n          align-items: center;\n          padding: 12px 20px;\n          color: ${item.id === \"logout\" ? \"#dc3545\" : \"#495057\"};\n          text-decoration: none;\n          transition: all 0.2s ease;\n          border-radius: 0;\n          margin: 0;\n          font-size: 15px;\n          font-weight: 500;\n          min-height: 48px;${style}\n        \">\n          <span class=\"material-icons nav-icon\" style=\"\n            margin-right: 16px;\n            font-size: 20px;\n            width: 24px;\n            color: ${color};\n            transition: color 0.2s ease;\n          \">${item.icon}</span>\n          <span class=\"nav-text\">${item.text}</span>\n        </a>\n      </li>\n    `;\n  }\n\n  /**\n   * Setup hover effects for menu items\n   */\n  private setupMenuItemHoverEffects(): void {\n    const menuItems = document.querySelectorAll(\".user-menu-item\");\n    menuItems.forEach((item) => {\n      item.addEventListener(\"mouseenter\", () => {\n        (item as HTMLElement).style.background = \"#f8f9fa\";\n      });\n      item.addEventListener(\"mouseleave\", () => {\n        (item as HTMLElement).style.background = \"transparent\";\n      });\n    });\n  }\n\n  /**\n   * Emit typed user menu mode change event to LayoutContext\n   */\n  private emitUserMenuModeChangeEvent(\n    isVisible: boolean,\n    previousVisibility: boolean,\n    trigger: \"click\" | \"keyboard\" | \"programmatic\",\n  ): void {\n    if (!this.layoutContext) {\n      // No layout context available, skip event emission\n      return;\n    }\n    \n    // Create typed event using the factory (includes state checking)\n    const event = LayoutEventFactory.createUserMenuModeChangeEvent(\n      isVisible,\n      previousVisibility,\n      trigger,\n    );\n\n    // If no actual state change, factory returns null\n    if (!event) {\n      return;\n    }\n\n    // Emit the event through the LayoutContext\n    this.layoutContext.emit(\"user-menu-mode-change\", event.data);\n\n    this.logger.info(\n      `📡 Emitted mode change event: ${previousVisibility} → ${isVisible} (via ${trigger})`,\n    );\n  }\n\n  /**\n   * Destroy the component\n   */\n  destroy(): void {\n    this.logger.info(\"Destroying...\");\n\n    // Clean up backdrop and body scroll\n    this.removeMobileBackdrop();\n    document.body.style.overflow = \"\";\n\n    if (this.container) {\n      this.container.innerHTML = \"\";\n    }\n    this.elements = {};\n    this.user = null;\n    this.isOpen = false;\n  }\n}\n\nexport default UserMenu;\n","/**\n * BreadcrumbItem Interface\n * \n * Defines the structure for individual breadcrumb items in navigation trails.\n * Each item can be either a link (href) or an action (clickHandler).\n */\n\nexport interface BreadcrumbItem {\n  /**\n   * Unique identifier for the breadcrumb item\n   * Used for updates, removal, and deduplication\n   */\n  id: string;\n\n  /**\n   * Display text for the breadcrumb item\n   * Main visible content in the breadcrumb trail\n   */\n  text: string;\n\n  /**\n   * Optional subtitle or description\n   * Displayed below or alongside the main text (implementation dependent)\n   */\n  caption?: string;\n\n  /**\n   * Optional URL link for navigation\n   * If provided, clicking the breadcrumb will navigate to this URL\n   * Mutually exclusive with clickHandler in practice\n   */\n  href?: string;\n\n  /**\n   * Optional click handler for custom actions\n   * If provided, clicking the breadcrumb will execute this function\n   * Receives the full BreadcrumbItem for context\n   * Mutually exclusive with href in practice\n   */\n  clickHandler?: (item: BreadcrumbItem) => void;\n}\n\n/**\n * Type guard to check if a breadcrumb item has a click handler\n */\nexport function hasClickHandler(item: BreadcrumbItem): item is BreadcrumbItem & { clickHandler: (item: BreadcrumbItem) => void } {\n  return typeof item.clickHandler === 'function';\n}\n\n/**\n * Type guard to check if a breadcrumb item has an href\n */\nexport function hasHref(item: BreadcrumbItem): item is BreadcrumbItem & { href: string } {\n  return typeof item.href === 'string' && item.href.length > 0;\n}\n\n/**\n * Get the appropriate action for a breadcrumb item\n * Returns 'link' for href items, 'action' for clickHandler items, 'none' for display-only items\n */\nexport function getBreadcrumbItemAction(item: BreadcrumbItem): 'link' | 'action' | 'none' {\n  if (hasHref(item)) return 'link';\n  if (hasClickHandler(item)) return 'action';\n  return 'none';\n}","/**\n * BreadcrumbsComponent\n * \n * Manages breadcrumb navigation display and interactions.\n * Follows the same pattern as UserMenu - AppHeader provides container,\n * BreadcrumbsComponent manages content and rendering.\n */\n\n// Import component-scoped CSS\nimport \"../assets/styles/components/breadcrumbs.css\";\n\nimport type { BreadcrumbItem } from \"../interfaces/BreadcrumbItem\";\nimport { getBreadcrumbItemAction, hasClickHandler, hasHref } from \"../interfaces/BreadcrumbItem\";\nimport type { LayoutContext } from \"../contexts/LayoutContext\";\nimport { ComponentStatus, ComponentWithStatus } from \"../interfaces/ComponentStatus\";\nimport { LoggerFactory } from \"../logging/LoggerFactory\";\nimport { Logger } from \"../logging/Logger\";\n\nexport class BreadcrumbsComponent implements ComponentWithStatus {\n  private container: HTMLElement | null = null;\n  private breadcrumbs: BreadcrumbItem[] = [];\n  private layoutContext?: LayoutContext;\n  private logger: Logger;\n  private isInitialized: boolean = false;\n  private initTime: number | null = null;\n  private eventListeners: Array<{\n    element: Element;\n    event: string;\n    handler: EventListener;\n  }> = [];\n\n  constructor(private parentContainer: HTMLElement, layoutContext?: LayoutContext) {\n    this.container = parentContainer;\n    this.layoutContext = layoutContext;\n    this.logger = LoggerFactory.getInstance().getLogger('BreadcrumbsComponent');\n    \n    this.logger.info(\"BreadcrumbsComponent - Created with container:\", {\n      containerId: parentContainer.id,\n      containerClass: parentContainer.className\n    });\n  }\n\n  /**\n   * Initialize the breadcrumbs component\n   */\n  async init(): Promise<void> {\n    if (this.isInitialized) {\n      this.logger.warn(\"BreadcrumbsComponent - Already initialized\");\n      return;\n    }\n\n    this.logger.info(\"BreadcrumbsComponent - Initializing...\");\n    \n    try {\n      // Clear existing content and setup container\n      this.setupContainer();\n      \n      // Setup event listeners for breadcrumb interactions\n      this.setupEventListeners();\n      \n      // Initialize with empty breadcrumbs (pages will set them later)\n      this.renderBreadcrumbs();\n      \n      this.isInitialized = true;\n      this.initTime = Date.now();\n      this.logger.info(\"BreadcrumbsComponent - Ready\");\n    } catch (error) {\n      this.logger.error(\"BreadcrumbsComponent - Initialization failed:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Setup the container for breadcrumb rendering\n   */\n  private setupContainer(): void {\n    if (!this.container) {\n      throw new Error(\"BreadcrumbsComponent - No container provided\");\n    }\n\n    // Clear existing content\n    this.container.innerHTML = '';\n    \n    // Ensure container has proper structure for breadcrumb rendering\n    this.container.innerHTML = `\n      <nav class=\"breadcrumbs-nav\" aria-label=\"Breadcrumb\">\n        <ol class=\"breadcrumbs-list\" role=\"list\">\n          <!-- Breadcrumb items will be rendered here -->\n        </ol>\n      </nav>\n    `;\n\n    this.logger.info(\"BreadcrumbsComponent - Container setup complete\");\n  }\n\n  /**\n   * Setup event listeners for breadcrumb interactions\n   */\n  private setupEventListeners(): void {\n    // Use event delegation to handle clicks on breadcrumb items\n    if (this.container) {\n      const clickHandler = (event: Event) => {\n        this.handleBreadcrumbClick(event);\n      };\n      \n      this.container.addEventListener('click', clickHandler);\n      this.eventListeners.push({\n        element: this.container,\n        event: 'click',\n        handler: clickHandler\n      });\n      \n      this.logger.info(\"BreadcrumbsComponent - Event listeners setup\");\n    }\n  }\n\n  /**\n   * Handle clicks on breadcrumb items\n   */\n  private handleBreadcrumbClick(event: Event): void {\n    const target = event.target as Element;\n    const breadcrumbElement = target.closest('[data-breadcrumb-id]');\n    \n    if (!breadcrumbElement) {\n      return; // Not a breadcrumb click\n    }\n\n    const breadcrumbId = breadcrumbElement.getAttribute('data-breadcrumb-id');\n    if (!breadcrumbId) {\n      return;\n    }\n\n    const breadcrumbItem = this.breadcrumbs.find(item => item.id === breadcrumbId);\n    if (!breadcrumbItem) {\n      this.logger.warn(`BreadcrumbsComponent - Breadcrumb not found: ${breadcrumbId}`);\n      return;\n    }\n\n    // Handle the click based on breadcrumb item type\n    if (hasClickHandler(breadcrumbItem)) {\n      event.preventDefault();\n      this.logger.info(`BreadcrumbsComponent - Executing click handler for: ${breadcrumbItem.text}`);\n      breadcrumbItem.clickHandler(breadcrumbItem);\n    } else if (hasHref(breadcrumbItem)) {\n      // Let the natural link behavior handle navigation\n      this.logger.info(`BreadcrumbsComponent - Navigation to: ${breadcrumbItem.href}`);\n    } else {\n      // Display-only breadcrumb, prevent any action\n      event.preventDefault();\n      this.logger.info(`BreadcrumbsComponent - Display-only breadcrumb clicked: ${breadcrumbItem.text}`);\n    }\n  }\n\n  /**\n   * Set the complete breadcrumb trail\n   */\n  setBreadcrumbs(items: BreadcrumbItem[]): void {\n    this.logger.info(`BreadcrumbsComponent - Setting ${items.length} breadcrumbs:`, items.map(item => item.text));\n    \n    this.breadcrumbs = [...items]; // Create a copy to avoid external modifications\n    this.renderBreadcrumbs();\n  }\n\n  /**\n   * Add a breadcrumb to the end of the trail\n   */\n  addBreadcrumb(item: BreadcrumbItem): void {\n    this.logger.info(`BreadcrumbsComponent - Adding breadcrumb: ${item.text}`);\n    \n    // Check for duplicates\n    if (this.breadcrumbs.find(existing => existing.id === item.id)) {\n      this.logger.warn(`BreadcrumbsComponent - Breadcrumb with id '${item.id}' already exists, updating instead`);\n      this.updateBreadcrumb(item.id, item);\n      return;\n    }\n    \n    this.breadcrumbs.push(item);\n    this.renderBreadcrumbs();\n  }\n\n  /**\n   * Remove a breadcrumb by ID\n   */\n  removeBreadcrumb(id: string): void {\n    this.logger.info(`BreadcrumbsComponent - Removing breadcrumb: ${id}`);\n    \n    const initialLength = this.breadcrumbs.length;\n    this.breadcrumbs = this.breadcrumbs.filter(item => item.id !== id);\n    \n    if (this.breadcrumbs.length === initialLength) {\n      this.logger.warn(`BreadcrumbsComponent - Breadcrumb not found for removal: ${id}`);\n      return;\n    }\n    \n    this.renderBreadcrumbs();\n  }\n\n  /**\n   * Update a specific breadcrumb item\n   */\n  updateBreadcrumb(id: string, updates: Partial<BreadcrumbItem>): void {\n    this.logger.info(`BreadcrumbsComponent - Updating breadcrumb: ${id}`, updates);\n    \n    const index = this.breadcrumbs.findIndex(item => item.id === id);\n    if (index === -1) {\n      this.logger.warn(`BreadcrumbsComponent - Breadcrumb not found for update: ${id}`);\n      return;\n    }\n    \n    this.breadcrumbs[index] = { ...this.breadcrumbs[index], ...updates };\n    this.renderBreadcrumbs();\n  }\n\n  /**\n   * Clear all breadcrumbs\n   */\n  clearBreadcrumbs(): void {\n    this.logger.info(\"BreadcrumbsComponent - Clearing all breadcrumbs\");\n    this.breadcrumbs = [];\n    this.renderBreadcrumbs();\n  }\n\n  /**\n   * Get current breadcrumbs\n   */\n  getBreadcrumbs(): BreadcrumbItem[] {\n    return [...this.breadcrumbs]; // Return a copy\n  }\n\n  /**\n   * Render breadcrumbs to DOM\n   */\n  private renderBreadcrumbs(): void {\n    if (!this.container) {\n      this.logger.warn(\"BreadcrumbsComponent - Cannot render, no container available\");\n      return;\n    }\n\n    const breadcrumbsList = this.container.querySelector('.breadcrumbs-list');\n    if (!breadcrumbsList) {\n      this.logger.error(\"BreadcrumbsComponent - Breadcrumbs list container not found\");\n      return;\n    }\n\n    // Clear existing items\n    breadcrumbsList.innerHTML = '';\n\n    if (this.breadcrumbs.length === 0) {\n      // Show default empty state or hide completely\n      breadcrumbsList.innerHTML = `\n        <li class=\"breadcrumb-item breadcrumb-empty\">\n          <span class=\"breadcrumb-text\">Page</span>\n        </li>\n      `;\n      return;\n    }\n\n    // Render breadcrumb items\n    const breadcrumbsHTML = this.breadcrumbs.map((item, index) => {\n      return this.renderBreadcrumbItem(item, index, index === this.breadcrumbs.length - 1);\n    }).join('');\n\n    breadcrumbsList.innerHTML = breadcrumbsHTML;\n    \n    this.logger.info(`BreadcrumbsComponent - Rendered ${this.breadcrumbs.length} breadcrumbs`);\n  }\n\n  /**\n   * Render a single breadcrumb item\n   */\n  private renderBreadcrumbItem(item: BreadcrumbItem, index: number, isLast: boolean): string {\n    const action = getBreadcrumbItemAction(item);\n    const isClickable = action !== 'none';\n    \n    // Build the breadcrumb content\n    let content = '';\n    \n    if (action === 'link' && hasHref(item)) {\n      // Render as link\n      content = `\n        <a href=\"${item.href}\" \n           class=\"breadcrumb-link\" \n           data-breadcrumb-id=\"${item.id}\"\n           title=\"${item.caption || item.text}\">\n          <span class=\"breadcrumb-text\">${item.text}</span>\n        </a>\n      `;\n    } else if (action === 'action') {\n      // Render as button\n      content = `\n        <button type=\"button\" \n                class=\"breadcrumb-button\" \n                data-breadcrumb-id=\"${item.id}\"\n                title=\"${item.caption || item.text}\">\n          <span class=\"breadcrumb-text\">${item.text}</span>\n        </button>\n      `;\n    } else {\n      // Render as span (display-only)\n      content = `\n        <span class=\"breadcrumb-span\" \n              data-breadcrumb-id=\"${item.id}\"\n              title=\"${item.caption || item.text}\">\n          <span class=\"breadcrumb-text\">${item.text}</span>\n        </span>\n      `;\n    }\n\n    // Add separator for non-last items\n    const separator = !isLast ? `\n      <li class=\"breadcrumb-separator\" aria-hidden=\"true\">\n        <svg width=\"5\" height=\"8\" viewBox=\"0 0 6 10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M1 1L4.5 5L1 9\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>\n      </li>\n    ` : '';\n\n    return `\n      <li class=\"breadcrumb-item ${isLast ? 'breadcrumb-current' : ''} ${isClickable ? 'breadcrumb-clickable' : ''}\" \n          ${isLast ? 'aria-current=\"page\"' : ''}>\n        ${content}\n      </li>\n      ${separator}\n    `;\n  }\n\n  /**\n   * Component status information for debugging\n   */\n  getStatus(): ComponentStatus {\n    return {\n      componentType: \"BreadcrumbsComponent\",\n      id: \"breadcrumbs\",\n      initialized: this.isInitialized,\n      initTime: this.initTime,\n      uptime: this.initTime ? Date.now() - this.initTime : undefined,\n      domElement: this.container ? {\n        tagName: this.container.tagName,\n        id: this.container.id,\n        className: this.container.className,\n        childCount: this.container.children.length,\n        hasContent: this.container.innerHTML.trim().length > 0\n      } : undefined,\n      eventListeners: {\n        count: this.eventListeners.length,\n        types: this.eventListeners.map(listener => listener.event)\n      },\n      configuration: {\n        hasLayoutContext: !!this.layoutContext\n      },\n      currentState: {\n        breadcrumbsCount: this.breadcrumbs.length,\n        breadcrumbs: this.breadcrumbs.map(item => ({\n          id: item.id,\n          text: item.text,\n          hasHref: !!item.href,\n          hasClickHandler: !!item.clickHandler\n        }))\n      }\n    };\n  }\n\n  /**\n   * Destroy the component and clean up resources\n   */\n  destroy(): void {\n    this.logger.info(\"BreadcrumbsComponent - Destroying...\");\n    \n    // Remove event listeners\n    this.eventListeners.forEach(({ element, event, handler }) => {\n      element.removeEventListener(event, handler);\n    });\n    this.eventListeners = [];\n    \n    // Clear breadcrumbs\n    this.breadcrumbs = [];\n    \n    // Clear container\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n    \n    this.isInitialized = false;\n    this.initTime = null;\n    \n    this.logger.info(\"BreadcrumbsComponent - Destroyed\");\n  }\n}","/**\n * Base Service Interface\n * Defines the contract for all services that can be registered with LayoutContext\n */\n\nexport interface Service {\n  /**\n   * Unique identifier for this service type\n   * Used for debugging and service identification\n   */\n  getServiceId(): string;\n\n  /**\n   * Initialize the service\n   * Called automatically when LayoutContext initializes services\n   * Should return a promise if async initialization is required\n   */\n  init?(): Promise<void> | void;\n\n  /**\n   * Destroy/cleanup the service\n   * Called automatically when LayoutContext is destroyed\n   * Should clean up any resources, event listeners, timers, etc.\n   */\n  destroy?(): Promise<void> | void;\n\n  /**\n   * Check if the service is currently initialized and ready to use\n   */\n  isReady?(): boolean;\n}\n\n/**\n * Service Registry Interface\n * Defines how services can be registered and retrieved from LayoutContext\n */\nexport interface ServiceRegistry {\n  /**\n   * Register a service with the registry\n   */\n  registerService<T extends Service>(name: string, service: T): void;\n\n  /**\n   * Retrieve a registered service by name with type safety\n   */\n  getService<T extends Service>(name: string): T | null;\n\n  /**\n   * Check if a service is registered\n   */\n  hasService(name: string): boolean;\n\n  /**\n   * Unregister a service by name\n   * Returns true if service was found and removed, false otherwise\n   */\n  unregisterService(name: string): Promise<boolean>;\n\n  /**\n   * Get all registered services\n   */\n  getRegisteredServices(): Map<string, Service>;\n\n  /**\n   * Get names of all registered services\n   */\n  getServiceNames(): string[];\n\n  /**\n   * Initialize all registered services\n   */\n  initializeServices(): Promise<void>;\n\n  /**\n   * Destroy all registered services\n   */\n  destroyServices(): Promise<void>;\n}\n\n/**\n * Service Error types for better error handling\n */\nexport class ServiceError extends Error {\n  constructor(\n    message: string,\n    public serviceName: string,\n    public operation: 'register' | 'get' | 'init' | 'destroy' | 'unregister'\n  ) {\n    super(message);\n    this.name = 'ServiceError';\n  }\n}\n\n/**\n * Service configuration options\n */\nexport interface ServiceConfig {\n  /**\n   * Whether to automatically initialize the service when registered\n   */\n  autoInit?: boolean;\n\n  /**\n   * Whether to allow replacing an existing service with the same name\n   */\n  allowReplace?: boolean;\n\n  /**\n   * Timeout for service initialization (in milliseconds)\n   */\n  initTimeout?: number;\n}\n\nexport default Service;","/**\n * EventBus Library - Non-blocking Event Communication System\n * \n * Features:\n * - PUBLISH: Broadcast to ALL consumers (non-blocking)\n * - SEND: Deliver to FIRST consumer only (non-blocking)\n * - REQUEST: Send to FIRST consumer, expect response (non-blocking Promise)\n * - Consumer management with unregister capability\n */\n\nexport interface Consumer {\n  /**\n   * Unregister this consumer from the event\n   */\n  unregister(): void;\n  \n  /**\n   * Check if this consumer is still active\n   */\n  isActive(): boolean;\n  \n  /**\n   * Get the event name this consumer is subscribed to\n   */\n  getEventName(): string;\n}\n\nexport interface EventBus {\n  /**\n   * PUBLISH - Broadcast to ALL consumers (non-blocking)\n   * All registered consumers will receive the event\n   */\n  publish(event: string, data: unknown): void;\n  \n  /**\n   * SEND - Deliver to FIRST consumer only (non-blocking)\n   * Only the first registered consumer receives the event\n   */\n  send(event: string, data: unknown): void;\n  \n  /**\n   * REQUEST - Send to FIRST consumer, expect response (non-blocking Promise)\n   * Only the first registered consumer receives and can respond\n   */\n  request(event: string, data: unknown): Promise<unknown>;\n  \n  /**\n   * CONSUME - Subscribe to events, returns Consumer object\n   * Handler function receives the event data and can optionally return a response\n   */\n  consume(event: string, handler: (data: unknown) => unknown): Consumer;\n  \n  /**\n   * Check if there are any consumers for an event\n   */\n  hasConsumers(event: string): boolean;\n  \n  /**\n   * Get the number of consumers for an event\n   */\n  getConsumerCount(event: string): number;\n  \n  /**\n   * Remove all consumers for a specific event, or all events if no event specified\n   */\n  removeAllConsumers(event?: string): void;\n  \n  /**\n   * Get list of all event names that have consumers\n   */\n  getEventNames(): string[];\n}\n\nexport class EventBusError extends Error {\n  constructor(\n    message: string,\n    public code: 'NO_CONSUMER' | 'CONSUMER_ERROR' | 'TIMEOUT' | 'INVALID_EVENT',\n    public eventName?: string\n  ) {\n    super(message);\n    this.name = 'EventBusError';\n  }\n}\n\nexport interface EventBusOptions {\n  /**\n   * Default timeout for request operations (in milliseconds)\n   */\n  defaultTimeout?: number;\n  \n  /**\n   * Whether to log debug information\n   */\n  debug?: boolean;\n  \n  /**\n   * Maximum number of consumers per event (0 = unlimited)\n   */\n  maxConsumersPerEvent?: number;\n}\n","import { \n  Consumer, \n  EventBus, \n  EventBusError, \n  EventBusOptions \n} from './EventBus';\nimport { LoggerFactory } from '../logging/LoggerFactory';\nimport { Logger } from '../logging/Logger';\n\ntype EventHandler<T = unknown> = (data: T) => unknown | Promise<unknown>;\n\ninterface ConsumerImpl extends Consumer {\n  handler: EventHandler;\n}\n\n/**\n * EventBus Implementation\n * \n * Non-blocking event communication system with three communication patterns:\n * - PUBLISH: Broadcast to ALL consumers \n * - SEND: Deliver to FIRST consumer only\n * - REQUEST: Send to FIRST consumer and await response\n */\nexport class EventBusImpl implements EventBus {\n  private listeners: Map<string, Set<ConsumerImpl>> = new Map();\n  private options: EventBusOptions;\n  private logger: Logger;\n\n  constructor(options: EventBusOptions = {}) {\n    this.options = {\n      defaultTimeout: 5000,\n      debug: false,\n      maxConsumersPerEvent: 0,\n      ...options\n    };\n    this.logger = LoggerFactory.getInstance().getLogger('EventBusImpl');\n  }\n\n  /**\n   * PUBLISH - Broadcast to ALL consumers (non-blocking)\n   */\n  publish(event: string, data: unknown): void {\n    if (this.options.debug) {\n      this.logger.debug(`📢 EventBus PUBLISH: ${event}`, data);\n    }\n\n    const consumers = this.listeners.get(event);\n    if (!consumers || consumers.size === 0) {\n      if (this.options.debug) {\n        this.logger.debug(`📢 EventBus: No consumers for event '${event}'`);\n      }\n      return;\n    }\n\n    // Execute all handlers asynchronously\n    consumers.forEach(consumer => {\n      if (consumer.isActive()) {\n        setTimeout(() => {\n          try {\n            consumer.handler(data);\n          } catch (error) {\n            this.logger.error(`EventBus PUBLISH error in handler for '${event}':`, error);\n          }\n        }, 0);\n      }\n    });\n  }\n\n  /**\n   * SEND - Deliver to FIRST consumer only (non-blocking)\n   */\n  send(event: string, data: unknown): void {\n    if (this.options.debug) {\n      this.logger.debug(`📤 EventBus SEND: ${event}`, data);\n    }\n\n    const consumers = this.listeners.get(event);\n    if (!consumers || consumers.size === 0) {\n      if (this.options.debug) {\n        this.logger.debug(`📤 EventBus: No consumers for SEND event '${event}'`);\n      }\n      return;\n    }\n\n    // Get first active consumer\n    const firstConsumer = Array.from(consumers).find(c => c.isActive());\n    if (!firstConsumer) {\n      if (this.options.debug) {\n        this.logger.debug(`📤 EventBus: No active consumers for SEND event '${event}'`);\n      }\n      return;\n    }\n\n    // Execute handler asynchronously\n    setTimeout(() => {\n      try {\n        firstConsumer.handler(data);\n      } catch (error) {\n        this.logger.error(`EventBus SEND error in handler for '${event}':`, error);\n      }\n    }, 0);\n  }\n\n  /**\n   * REQUEST - Send to FIRST consumer and await response (non-blocking Promise)\n   */\n  request(event: string, data: unknown, timeout?: number): Promise<unknown> {\n    if (this.options.debug) {\n      this.logger.debug(`📬 EventBus REQUEST: ${event}`, data);\n    }\n\n    return new Promise((resolve, reject) => {\n      const consumers = this.listeners.get(event);\n      if (!consumers || consumers.size === 0) {\n        const error = new EventBusError(\n          `No consumers for request event: ${event}`,\n          'NO_CONSUMER',\n          event\n        );\n        reject(error);\n        return;\n      }\n\n      // Get first active consumer\n      const firstConsumer = Array.from(consumers).find(c => c.isActive());\n      if (!firstConsumer) {\n        const error = new EventBusError(\n          `No active consumers for request event: ${event}`,\n          'NO_CONSUMER',\n          event\n        );\n        reject(error);\n        return;\n      }\n\n      // Set up timeout\n      const timeoutMs = timeout || this.options.defaultTimeout || 5000;\n      const timeoutId = setTimeout(() => {\n        reject(new EventBusError(\n          `Request timeout for event: ${event}`,\n          'TIMEOUT',\n          event\n        ));\n      }, timeoutMs);\n\n      // Execute handler asynchronously\n      setTimeout(() => {\n        try {\n          const result = firstConsumer.handler(data);\n          \n          if (result instanceof Promise) {\n            result\n              .then(response => {\n                clearTimeout(timeoutId);\n                resolve(response);\n              })\n              .catch(() => {\n                clearTimeout(timeoutId);\n                reject(new EventBusError(\n                  `Consumer error for request event: ${event}`,\n                  'CONSUMER_ERROR',\n                  event\n                ));\n              });\n          } else {\n            clearTimeout(timeoutId);\n            resolve(result);\n          }\n        } catch {\n          clearTimeout(timeoutId);\n          reject(new EventBusError(\n            `Consumer error for request event: ${event}`,\n            'CONSUMER_ERROR',\n            event\n          ));\n        }\n      }, 0);\n    });\n  }\n\n  /**\n   * CONSUME - Subscribe to events, returns Consumer object\n   */\n  consume(event: string, handler: EventHandler): Consumer {\n    if (this.options.debug) {\n      this.logger.debug(`🎯 EventBus CONSUME: Registering handler for '${event}'`);\n    }\n\n    if (!event || typeof event !== 'string') {\n      throw new EventBusError(\n        'Event name must be a non-empty string',\n        'INVALID_EVENT',\n        event\n      );\n    }\n\n    // Check max consumers limit\n    if (this.options.maxConsumersPerEvent && this.options.maxConsumersPerEvent > 0) {\n      const currentCount = this.getConsumerCount(event);\n      if (currentCount >= this.options.maxConsumersPerEvent) {\n        throw new EventBusError(\n          `Maximum consumers limit (${this.options.maxConsumersPerEvent}) reached for event: ${event}`,\n          'INVALID_EVENT',\n          event\n        );\n      }\n    }\n\n    // Create consumers set if it doesn't exist\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set());\n    }\n\n    const consumers = this.listeners.get(event)!;\n    let active = true;\n\n    const consumer: ConsumerImpl = {\n      handler,\n      unregister: () => {\n        if (active) {\n          consumers.delete(consumer);\n          active = false;\n          if (this.options.debug) {\n            this.logger.debug(`🎯 EventBus: Unregistered consumer for '${event}'`);\n          }\n          // Clean up empty consumer sets\n          if (consumers.size === 0) {\n            this.listeners.delete(event);\n          }\n        }\n      },\n      isActive: () => active,\n      getEventName: () => event\n    };\n\n    consumers.add(consumer);\n    return consumer;\n  }\n\n  /**\n   * Check if there are any consumers for an event\n   */\n  hasConsumers(event: string): boolean {\n    const consumers = this.listeners.get(event);\n    return consumers ? consumers.size > 0 : false;\n  }\n\n  /**\n   * Get the number of consumers for an event\n   */\n  getConsumerCount(event: string): number {\n    const consumers = this.listeners.get(event);\n    return consumers ? consumers.size : 0;\n  }\n\n  /**\n   * Remove all consumers for a specific event, or all events if no event specified\n   */\n  removeAllConsumers(event?: string): void {\n    if (event) {\n      this.listeners.delete(event);\n      if (this.options.debug) {\n        this.logger.debug(`🗑️ EventBus: Removed all consumers for '${event}'`);\n      }\n    } else {\n      this.listeners.clear();\n      if (this.options.debug) {\n        this.logger.debug(`🗑️ EventBus: Removed all consumers for all events`);\n      }\n    }\n  }\n\n  /**\n   * Get list of all event names that have consumers\n   */\n  getEventNames(): string[] {\n    return Array.from(this.listeners.keys());\n  }\n\n  /**\n   * Get debug information about the EventBus state\n   */\n  getDebugInfo(): { eventCount: number; totalConsumers: number; events: Array<{ name: string; consumers: number }> } {\n    const events = Array.from(this.listeners.entries()).map(([name, consumers]) => ({\n      name,\n      consumers: consumers.size\n    }));\n\n    return {\n      eventCount: this.listeners.size,\n      totalConsumers: events.reduce((sum, event) => sum + event.consumers, 0),\n      events\n    };\n  }\n}\n\nexport default EventBusImpl;\n","/**\n * Chain-Based Hotkey Manager Implementation\n * \n * Concrete implementation of the chain-based hotkey system with:\n * - Priority-based provider ordering \n * - Chain execution with ctx.next() / ctx.break()\n * - Dynamic enable/disable support\n * - Comprehensive logging and debugging\n */\n\nimport { \n  ChainHotkeyManager, \n  ChainHotkeyProvider, \n  ChainExecutionResult,\n  HotkeyExecutionContext,\n  HotkeyChainAction,\n  ChainHotkeyHandler\n} from './HotkeyChainSystem';\nimport { LoggerFactory } from '../logging/LoggerFactory';\nimport { Logger } from '../logging/Logger';\n\n/**\n * Execution context implementation\n */\nclass HotkeyExecutionContextImpl implements HotkeyExecutionContext {\n  private _action: HotkeyChainAction = 'next';\n  private _prevented = false;\n  private _stopped = false;\n  private _providerChain: string[];\n\n  constructor(\n    public readonly event: KeyboardEvent,\n    public readonly key: string,\n    public readonly currentProvider: string,\n    public readonly chainIndex: number,\n    public readonly chainLength: number,\n    providerChain: string[]\n  ) {\n    this._providerChain = [...providerChain];\n  }\n\n  next(): void {\n    this._action = 'next';\n  }\n\n  break(): void {\n    this._action = 'break';\n  }\n\n  preventDefault(): void {\n    if (!this._prevented) {\n      this.event.preventDefault();\n      this._prevented = true;\n    }\n  }\n\n  stopPropagation(): void {\n    if (!this._stopped) {\n      this.event.stopPropagation();\n      this._stopped = true;\n    }\n  }\n\n  hasProvider(providerId: string): boolean {\n    return this._providerChain.includes(providerId);\n  }\n\n  getProviderChain(): string[] {\n    return [...this._providerChain];\n  }\n\n  // Internal method to get current action\n  getCurrentAction(): HotkeyChainAction {\n    return this._action;\n  }\n\n  // Internal method to check if prevented\n  isDefaultPrevented(): boolean {\n    return this._prevented;\n  }\n\n  // Internal method to check if stopped\n  isPropagationStopped(): boolean {\n    return this._stopped;\n  }\n}\n\n/**\n * Chain-based hotkey manager implementation\n */\nexport class ChainHotkeyManagerImpl implements ChainHotkeyManager {\n  private providers = new Map<string, ChainHotkeyProvider>();\n  private globalKeydownListener: ((event: KeyboardEvent) => void) | null = null;\n  private logger: Logger;\n\n  constructor() {\n    this.logger = LoggerFactory.getInstance().getLogger('ChainHotkeyManager');\n    this.setupGlobalKeydownListener();\n  }\n\n  /**\n   * Setup global keydown listener\n   */\n  private setupGlobalKeydownListener(): void {\n    this.globalKeydownListener = (event: KeyboardEvent) => {\n      const key = this.normalizeKey(event);\n      this.executeChain(key, event).catch(error => {\n        this.logger.error('Error in chain execution', error);\n      });\n    };\n\n    document.addEventListener('keydown', this.globalKeydownListener);\n    this.logger.debug('Global keydown listener initialized');\n  }\n\n  /**\n   * Normalize keyboard event to consistent string\n   */\n  private normalizeKey(event: KeyboardEvent): string {\n    const modifiers = [];\n    if (event.ctrlKey) modifiers.push('Ctrl');\n    if (event.metaKey) modifiers.push('Meta');\n    if (event.altKey) modifiers.push('Alt');\n    if (event.shiftKey) modifiers.push('Shift');\n    \n    return modifiers.length > 0 ? `${modifiers.join('+')}+${event.key}` : event.key;\n  }\n\n  /**\n   * Register a provider in the chain\n   */\n  registerProvider(provider: ChainHotkeyProvider): () => void {\n    const providerId = provider.getHotkeyProviderId();\n    \n    if (this.providers.has(providerId)) {\n      const callStack = new Error().stack;\n      this.logger.warn(`Provider '${providerId}' already registered, replacing`);\n      this.logger.warn('Registration callstack:', callStack);\n    }\n    \n    this.providers.set(providerId, provider);\n    provider.onChainRegistered?.();\n    \n    this.logger.debug(`Registered provider '${providerId}' with priority ${provider.getProviderPriority()}`);\n    \n    // Return unregister function\n    return () => {\n      this.unregisterProvider(providerId);\n    };\n  }\n\n  /**\n   * Unregister a provider\n   */\n  unregisterProvider(providerId: string): void {\n    const provider = this.providers.get(providerId);\n    if (provider) {\n      provider.onChainUnregistered?.();\n      this.providers.delete(providerId);\n      const callStack = new Error().stack;\n      this.logger.debug(`Unregistered provider '${providerId}'`);\n      this.logger.debug('Unregistration callstack:', callStack);\n    }\n  }\n\n  /**\n   * Execute hotkey chain for a specific key\n   */\n  async executeChain(key: string, event: KeyboardEvent): Promise<ChainExecutionResult> {\n    const result: ChainExecutionResult = {\n      executed: false,\n      handlersExecuted: 0,\n      totalHandlers: 0,\n      finalAction: 'next',\n      preventedDefault: false,\n      stoppedPropagation: false,\n      executionLog: []\n    };\n\n    // Get all providers that have handlers for this key\n    const providersWithHandlers = this.getProvidersForKey(key);\n    if (providersWithHandlers.length === 0) {\n      return result;\n    }\n\n    // Sort by priority (highest first)\n    providersWithHandlers.sort((a, b) => b.getProviderPriority() - a.getProviderPriority());\n    \n    // Get all enabled handlers\n    const enabledHandlers: Array<{\n      provider: ChainHotkeyProvider;\n      handler: ChainHotkeyHandler;\n    }> = [];\n\n    for (const provider of providersWithHandlers) {\n      const hotkeys = provider.getChainHotkeys();\n      const handler = hotkeys?.get(key);\n      if (handler && handler.isEnabled()) {\n        enabledHandlers.push({ provider, handler });\n      }\n    }\n\n    result.totalHandlers = enabledHandlers.length;\n    if (enabledHandlers.length === 0) {\n      return result;\n    }\n\n    // Build provider chain for context\n    const providerChain = enabledHandlers.map(h => h.provider.getHotkeyProviderId());\n\n    this.logger.debug(`Executing chain for '${key}' with ${enabledHandlers.length} handlers`, providerChain);\n\n    // Execute chain\n    for (let i = 0; i < enabledHandlers.length; i++) {\n      const { provider, handler } = enabledHandlers[i];\n      const providerId = provider.getHotkeyProviderId();\n\n      // Create execution context\n      const context = new HotkeyExecutionContextImpl(\n        event,\n        key,\n        providerId,\n        i,\n        enabledHandlers.length,\n        providerChain\n      );\n\n      const logEntry = {\n        providerId,\n        executed: false,\n        action: 'next' as HotkeyChainAction,\n        error: undefined as string | undefined\n      };\n\n      try {\n        this.logger.debug(`${i + 1}/${enabledHandlers.length}: Executing ${providerId}`);\n        \n        // Execute handler\n        await handler.handler(context);\n        \n        logEntry.executed = true;\n        logEntry.action = context.getCurrentAction();\n        result.handlersExecuted++;\n\n        this.logger.debug(`${providerId}: ${logEntry.action} (prevented: ${context.isDefaultPrevented()})`);\n\n        // Update result state\n        if (context.isDefaultPrevented()) {\n          result.preventedDefault = true;\n        }\n        if (context.isPropagationStopped()) {\n          result.stoppedPropagation = true;\n        }\n\n        // Check if chain should break\n        if (context.getCurrentAction() === 'break') {\n          result.finalAction = 'break';\n          result.executionLog.push(logEntry);\n          this.logger.debug(`Chain broken by ${providerId}`);\n          break;\n        }\n\n        result.finalAction = 'next';\n        \n      } catch (error) {\n        logEntry.error = error instanceof Error ? error.message : String(error);\n        this.logger.error(`${providerId}: Error`, error);\n        result.handlersExecuted++; // Count errored handlers as executed\n      }\n\n      result.executionLog.push(logEntry);\n    }\n\n    result.executed = result.handlersExecuted > 0;\n    \n    this.logger.debug('Chain execution complete', {\n      key,\n      executed: result.executed,\n      handlersExecuted: result.handlersExecuted,\n      totalHandlers: result.totalHandlers,\n      finalAction: result.finalAction\n    });\n\n    return result;\n  }\n\n  /**\n   * Get all registered providers\n   */\n  getProviders(): ChainHotkeyProvider[] {\n    return Array.from(this.providers.values());\n  }\n\n  /**\n   * Get providers for a specific key\n   */\n  getProvidersForKey(key: string): ChainHotkeyProvider[] {\n    const providers: ChainHotkeyProvider[] = [];\n    \n    for (const provider of this.providers.values()) {\n      const hotkeys = provider.getChainHotkeys();\n      if (hotkeys?.has(key)) {\n        providers.push(provider);\n      }\n    }\n    \n    return providers;\n  }\n\n  /**\n   * Enable/disable all hotkeys for a provider\n   */\n  setProviderEnabled(providerId: string, enabled: boolean): void {\n    const provider = this.providers.get(providerId);\n    if (!provider) {\n      this.logger.warn(`Provider '${providerId}' not found`);\n      return;\n    }\n\n    const hotkeys = provider.getChainHotkeys();\n    if (hotkeys) {\n      for (const handler of hotkeys.values()) {\n        if (enabled) {\n          handler.enable();\n        } else {\n          handler.disable();\n        }\n      }\n      this.logger.debug(`Provider '${providerId}' ${enabled ? 'enabled' : 'disabled'}`);\n    }\n  }\n\n  /**\n   * Get chain execution debug info\n   */\n  getChainDebugInfo(key: string): {\n    providers: string[];\n    handlers: Array<{\n      providerId: string;\n      key: string;\n      enabled: boolean;\n      priority: number;\n      description?: string;\n    }>;\n    totalHandlers: number;\n  } {\n    const providersWithHandlers = this.getProvidersForKey(key);\n    providersWithHandlers.sort((a, b) => b.getProviderPriority() - a.getProviderPriority());\n\n    const handlers: Array<{\n      providerId: string;\n      key: string;\n      enabled: boolean;\n      priority: number;\n      description?: string;\n    }> = [];\n\n    for (const provider of providersWithHandlers) {\n      const hotkeys = provider.getChainHotkeys();\n      const handler = hotkeys?.get(key);\n      if (handler) {\n        handlers.push({\n          providerId: provider.getHotkeyProviderId(),\n          key,\n          enabled: handler.isEnabled(),\n          priority: provider.getProviderPriority(),\n          description: handler.description\n        });\n      }\n    }\n\n    return {\n      providers: providersWithHandlers.map(p => p.getHotkeyProviderId()),\n      handlers,\n      totalHandlers: handlers.length\n    };\n  }\n\n  /**\n   * Destroy manager and cleanup\n   */\n  destroy(): void {\n    if (this.globalKeydownListener) {\n      document.removeEventListener('keydown', this.globalKeydownListener);\n      this.globalKeydownListener = null;\n    }\n\n    // Notify all providers\n    for (const provider of this.providers.values()) {\n      provider.onChainUnregistered?.();\n    }\n\n    this.providers.clear();\n    this.logger.debug('Destroyed');\n  }\n}\n\n/**\n * Usage example and migration guide\n */\nexport namespace ChainHotkeyMigration {\n  /**\n   * How to migrate from old hotkey system to chain system\n   */\n  export const migrationGuide = `\n    // OLD SYSTEM (problematic)\n    layoutContext.registerHotkey({\n      key: \"Escape\",\n      handler: () => { closeMenu(); return false; },\n      component: \"MyComponent\"\n    });\n\n    // NEW SYSTEM (chain-based)\n    class MyComponentProvider implements ChainHotkeyProvider {\n      getHotkeyProviderId(): string { return 'MyComponent'; }\n      getProviderPriority(): number { return 500; }\n      getDefaultChainBehavior(): HotkeyChainAction { return 'next'; }\n      \n      getChainHotkeys(): Map<string, ChainHotkeyHandler> | null {\n        const hotkeys = new Map();\n        \n        hotkeys.set('Escape', {\n          key: 'Escape',\n          providerId: 'MyComponent',\n          enabled: this.isMenuOpen,\n          handler: (ctx: HotkeyExecutionContext) => {\n            if (this.isMenuOpen) {\n              closeMenu();\n              ctx.preventDefault();\n              \n              // Smart chain control\n              if (ctx.hasProvider('Modal')) {\n                ctx.next(); // Let modal also handle if needed\n              } else {\n                ctx.break(); // We're done\n              }\n            } else {\n              ctx.next(); // Not our concern\n            }\n          },\n          enable: () => this.isMenuOpen = true,\n          disable: () => this.isMenuOpen = false,\n          isEnabled: () => this.isMenuOpen\n        });\n        \n        return hotkeys;\n      }\n    }\n  `;\n}","/**\n * Authentication Exception Hierarchy\n * \n * Provides structured exception handling for authentication operations.\n * Designed to be simple and focused on basic error identification.\n * \n * Design Principles:\n * - Keep exception hierarchy simple in this initial implementation\n * - Focus on clear error identification rather than granular error types\n * - Provide cause chaining for debugging complex error scenarios\n * - Mark: Extend with more specific exception types as needed in future\n * \n * @example\n * ```typescript\n * try {\n *   const user = await authProvider.getCurrentUser();\n * } catch (error) {\n *   if (error instanceof AuthenticationError) {\n *     console.error('Auth failed:', error.message);\n *     if (error.cause) {\n *       console.error('Root cause:', error.cause);\n *     }\n *   }\n * }\n * ```\n */\n\n/**\n * Base authentication error class\n * \n * All authentication-related errors should extend this base class.\n * Provides consistent error identification and optional cause chaining.\n */\nexport class AuthenticationError extends Error {\n  /**\n   * Create a new authentication error\n   * \n   * @param message - Human-readable error description\n   * @param cause - Optional underlying error that caused this authentication failure\n   */\n  constructor(message: string, public readonly cause?: Error) {\n    super(message);\n    this.name = 'AuthenticationError';\n    \n    // Ensure proper prototype chain for instanceof checks\n    Object.setPrototypeOf(this, AuthenticationError.prototype);\n    \n    // Preserve stack trace from underlying cause if available\n    if (cause && cause.stack) {\n      this.stack = `${this.stack}\\nCaused by: ${cause.stack}`;\n    }\n  }\n  \n  /**\n   * Create an authentication error from another error\n   * \n   * @param cause - The underlying error to wrap\n   * @param message - Optional custom message (defaults to cause message)\n   */\n  static from(cause: Error, message?: string): AuthenticationError {\n    return new AuthenticationError(\n      message || `Authentication failed: ${cause.message}`,\n      cause\n    );\n  }\n  \n  /**\n   * Check if an error is authentication-related\n   * \n   * @param error - Error to check\n   * @returns true if error is an AuthenticationError or has auth-related cause\n   */\n  static isAuthenticationError(error: unknown): error is AuthenticationError {\n    return error instanceof AuthenticationError ||\n           (error !== null && typeof error === 'object' && (error as any)?.name === 'AuthenticationError') ||\n           (error !== null && typeof error === 'object' && (error as any)?.cause instanceof AuthenticationError);\n  }\n}\n\n/**\n * Type guard function for authentication errors\n */\nexport function isAuthenticationError(error: unknown): error is AuthenticationError {\n  return AuthenticationError.isAuthenticationError(error);\n}\n\n/**\n * Helper function to create authentication errors with consistent formatting\n */\nexport function createAuthenticationError(\n  operation: string,\n  details?: string,\n  cause?: Error\n): AuthenticationError {\n  const message = details \n    ? `${operation} failed: ${details}`\n    : `${operation} failed`;\n  \n  return new AuthenticationError(message, cause);\n}\n\n// Common authentication error factory functions for consistency\nexport const AuthErrors = {\n  /**\n   * User is not authenticated\n   */\n  notAuthenticated: (details?: string) => \n    createAuthenticationError('Authentication check', details || 'User not authenticated'),\n  \n  /**\n   * Login operation failed\n   */\n  loginFailed: (details?: string, cause?: Error) =>\n    createAuthenticationError('Login', details || 'Login operation failed', cause),\n  \n  /**\n   * Logout operation failed  \n   */\n  logoutFailed: (details?: string, cause?: Error) =>\n    createAuthenticationError('Logout', details || 'Logout operation failed', cause),\n  \n  /**\n   * User validation/retrieval failed\n   */\n  userValidationFailed: (details?: string, cause?: Error) =>\n    createAuthenticationError('User validation', details || 'Failed to validate user', cause),\n    \n  /**\n   * Account operation failed\n   */\n  accountOperationFailed: (operation: string, details?: string, cause?: Error) =>\n    createAuthenticationError(`Account ${operation}`, details, cause)\n} as const;","/**\n * Service Reference - Dependency Resolution Without Initialization Order Management\n *\n * Provides lazy service resolution that eliminates the need for complex initialization\n * order management. Services can be resolved on-demand when actually needed, allowing\n * for flexible service registration without dependency ordering constraints.\n *\n * Design Principles:\n * - Lazy resolution: Services resolved only when accessed\n * - No initialization order dependencies\n * - Caching: Services cached after first resolution\n * - Error handling: Clear errors for missing services\n * - Type safety: Generic type support for service resolution\n *\n * Usage:\n * ```typescript\n * const authProvider = new ServiceReference<AuthProvider>(context, 'authProvider');\n * const provider = await authProvider.get(); // Resolves on first access\n * ```\n */\n\nimport type { LayoutContext } from \"../contexts/LayoutContext\";\nimport type { Service } from \"../interfaces/Service\";\nimport { AuthenticationError } from \"../auth/exceptions/AuthenticationExceptions\";\nimport { LoggerFactory } from '../logging/LoggerFactory';\nimport { Logger } from '../logging/Logger';\n\n/**\n * Service reference configuration\n */\nexport interface ServiceReferenceConfig {\n  /** Maximum number of resolution attempts before giving up (default: 3) */\n  maxRetries?: number;\n  /** Delay between retry attempts in milliseconds (default: 100) */\n  retryDelay?: number;\n  /** Whether to cache resolved services (default: true) */\n  enableCaching?: boolean;\n  /** Whether to log resolution attempts (default: false) */\n  enableLogging?: boolean;\n}\n\n/**\n * Service reference for on-demand service resolution\n *\n * Wraps service resolution to provide lazy loading without initialization order dependencies.\n * Supports retries, caching, and type-safe service access.\n */\nexport class ServiceReference<T extends Service> {\n  private readonly config: Required<ServiceReferenceConfig>;\n  private readonly context: LayoutContext;\n  private readonly serviceName: string;\n  private readonly logger: Logger;\n  private cachedService: T | null = null;\n  private resolutionAttempts = 0;\n\n  constructor(\n    context: LayoutContext,\n    serviceName: string,\n    config: ServiceReferenceConfig = {},\n  ) {\n    this.context = context;\n    this.serviceName = serviceName;\n    this.config = {\n      maxRetries: 3,\n      retryDelay: 100,\n      enableCaching: true,\n      enableLogging: false,\n      ...config,\n    };\n\n    this.logger = LoggerFactory.getInstance().getLogger(`ServiceReference:${serviceName}`);\n\n    if (this.config.enableLogging) {\n      this.logger.debug(`ServiceReference created for service '${serviceName}'`);\n    }\n  }\n\n  /**\n   * Get the wrapped service, resolving lazily on first access\n   *\n   * @returns Promise<T> - resolved service instance\n   * @throws AuthenticationError if service cannot be resolved after retries\n   */\n  async get(): Promise<T> {\n    // Return cached service if available and caching is enabled\n    if (this.config.enableCaching && this.cachedService) {\n      if (this.config.enableLogging) {\n        this.logger.debug(`Using cached service '${this.serviceName}'`);\n      }\n      return this.cachedService;\n    }\n\n    // Attempt to resolve service\n    const service = await this.resolveServiceWithRetry();\n\n    // Cache the resolved service if caching is enabled\n    if (this.config.enableCaching) {\n      this.cachedService = service;\n    }\n\n    return service;\n  }\n\n  /**\n   * Get the wrapped service synchronously if already resolved\n   *\n   * @returns T | null - cached service instance or null if not yet resolved\n   */\n  getCached(): T | null {\n    return this.config.enableCaching ? this.cachedService : null;\n  }\n\n  /**\n   * Check if service is available without resolving it\n   *\n   * @returns boolean - true if service is registered in LayoutContext\n   */\n  isAvailable(): boolean {\n    return this.context.hasService(this.serviceName);\n  }\n\n  /**\n   * Clear cached service (forces re-resolution on next get())\n   */\n  clearCache(): void {\n    if (this.config.enableCaching) {\n      this.cachedService = null;\n      this.resolutionAttempts = 0;\n\n      if (this.config.enableLogging) {\n        this.logger.debug(`Cache cleared for service '${this.serviceName}'`);\n      }\n    }\n  }\n\n  /**\n   * Get service information without resolving the service\n   *\n   * @returns object with service metadata\n   */\n  getServiceInfo(): {\n    serviceName: string;\n    isAvailable: boolean;\n    isCached: boolean;\n    resolutionAttempts: number;\n  } {\n    return {\n      serviceName: this.serviceName,\n      isAvailable: this.isAvailable(),\n      isCached: this.config.enableCaching && this.cachedService !== null,\n      resolutionAttempts: this.resolutionAttempts,\n    };\n  }\n\n  // Private helper methods\n\n  /**\n   * Resolve service with retry logic\n   */\n  private async resolveServiceWithRetry(): Promise<T> {\n    let lastError: Error | null = null;\n\n    for (let attempt = 1; attempt <= this.config.maxRetries; attempt++) {\n      this.resolutionAttempts = attempt;\n\n      try {\n        const service = this.context.getService<T>(this.serviceName);\n\n        if (service) {\n          if (this.config.enableLogging) {\n            this.logger.debug(`Resolved service '${this.serviceName}' on attempt ${attempt}`);\n          }\n          return service;\n        } else {\n          throw new AuthenticationError(\n            `Service '${this.serviceName}' not found in LayoutContext`,\n          );\n        }\n      } catch (error) {\n        lastError = error as Error;\n\n        if (this.config.enableLogging) {\n          this.logger.warn(`Resolution attempt ${attempt} failed for '${this.serviceName}'`, error);\n        }\n\n        // Wait before retry (except on last attempt)\n        if (attempt < this.config.maxRetries) {\n          await this.delay(this.config.retryDelay);\n        }\n      }\n    }\n\n    // All attempts failed\n    const availableServices = this.context.getServiceNames();\n    throw new AuthenticationError(\n      `Failed to resolve service '${this.serviceName}' after ${this.config.maxRetries} attempts. ` +\n        `Available services: [${availableServices.join(\", \")}]. ` +\n        `Last error: ${lastError?.message || \"Unknown error\"}`,\n    );\n  }\n\n  /**\n   * Delay helper for retry logic\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n\n/**\n * Factory function to create service references with less boilerplate\n */\nexport function createServiceReference<T extends Service>(\n  context: LayoutContext,\n  serviceName: string,\n  config?: ServiceReferenceConfig,\n): ServiceReference<T> {\n  return new ServiceReference<T>(context, serviceName, config);\n}\n\n/**\n * Utility class for managing multiple service references\n */\nexport class ServiceReferenceManager {\n  private readonly context: LayoutContext;\n  private readonly references = new Map<string, ServiceReference<any>>();\n  private readonly config: ServiceReferenceConfig;\n\n  constructor(context: LayoutContext, config: ServiceReferenceConfig = {}) {\n    this.context = context;\n    this.config = config;\n  }\n\n  /**\n   * Create and register a service reference\n   */\n  register<T extends Service>(serviceName: string): ServiceReference<T> {\n    const reference = new ServiceReference<T>(\n      this.context,\n      serviceName,\n      this.config,\n    );\n    this.references.set(serviceName, reference);\n    return reference;\n  }\n\n  /**\n   * Get a registered service reference\n   */\n  get<T extends Service>(serviceName: string): ServiceReference<T> | null {\n    return this.references.get(serviceName) || null;\n  }\n\n  /**\n   * Clear all cached services\n   */\n  clearAllCaches(): void {\n    this.references.forEach((reference) => reference.clearCache());\n  }\n\n  /**\n   * Get status of all managed services\n   */\n  getServiceStatuses(): Record<string, any> {\n    const statuses: Record<string, any> = {};\n    this.references.forEach((reference, serviceName) => {\n      statuses[serviceName] = reference.getServiceInfo();\n    });\n    return statuses;\n  }\n}\n","/**\n * Layout Context Implementation - Manages sidebar dimensions and layout coordination\n * Provides a centralized event system for layout components\n */\n\nimport type { Sidebar } from \"../components/Sidebar\";\n\nimport type { AppHeader } from \"../components/AppHeader\";\nimport type { AppFooter } from \"../components/AppFooter\";\nimport type { MainContent } from \"../components/MainContent\";\nimport type { Messages } from \"../interfaces/Messages\";\nimport type {\n  LayoutContext,\n  LayoutEventType,\n  LayoutModeType,\n  LayoutEvent,\n  LayoutEventListener,\n  LayoutViewPort,\n} from \"./LayoutContext\";\nimport type {\n  ActivePage,\n  ActivePageConsumer,\n} from \"../interfaces/ActivePage\";\nimport type { Service } from \"../interfaces/Service\";\nimport { ServiceError } from \"../interfaces/Service\";\nimport type { EventBus, Consumer } from \"../lib/EventBus\";\nimport { EventBusImpl } from \"../lib/EventBusImpl\";\nimport {\n  LayoutEventFactory,\n} from \"./LayoutEventFactory\";\nimport {\n  ChainHotkeyManager,\n  ChainHotkeyProvider,\n  ChainExecutionResult,\n} from \"../hotkeys/HotkeyChainSystem\";\nimport { ChainHotkeyManagerImpl } from \"../hotkeys/ChainHotkeyManagerImpl\";\nimport { ServiceReference, ServiceReferenceConfig } from \"../services/ServiceReference\";\nimport { LoggerFactory } from \"../logging/LoggerFactory\";\nimport { Logger } from \"../logging/Logger\";\n\nexport class LayoutContextImpl implements LayoutContext {\n  // Note: Removed dedicated listeners map - now using EventBus for all events\n  private viewport: LayoutViewPort;\n  private modeType: LayoutModeType;\n  private resizeObserver: ResizeObserver | null = null;\n  private resizeTimeout: NodeJS.Timeout | null = null;\n  private sidebarInstance: Sidebar | null = null;\n  private isLayoutReady: boolean = false;\n\n\n  // Component registry\n  private headerInstance: AppHeader | null = null;\n  private footerInstance: AppFooter | null = null;\n  private mainContentInstance: MainContent | null = null;\n  private messagesInstance: Messages | null = null;\n\n  // Chain-Based Hotkey Management (Only System)\n  private chainHotkeyManager!: ChainHotkeyManager;\n\n  // Active Page Management\n  private currentActivePage: ActivePage | null = null;\n  private activePageConsumers: Set<ActivePageConsumer> = new Set();\n\n  // Service Registry Management\n  private serviceRegistry: Map<string, Service> = new Map();\n\n  // EventBus Management\n  private eventBus!: EventBus; // Initialized in setupEventBus() called from constructor\n  private eventBusConsumers: Map<string, Consumer[]> = new Map(); // Track consumers by component\n\n  // PageContext Management (deprecated - now handled by RouterService)\n  // private pageContexts: Map<string, PageContext> = new Map();\n\n  // Failure Tracking\n  private failureError: Error | null = null;\n  private hasFailed: boolean = false;\n  \n  // Logger instance\n  private logger: Logger;\n\n  public constructor() {\n    // Initialize logger first\n    this.logger = LoggerFactory.getInstance().getLogger(LayoutContextImpl);\n    \n    this.viewport = this.calculateViewPort();\n    this.modeType = this.identifyModeType(this.viewport);\n    this.setupViewportObserver();\n    this.setupChainHotkeySystem();\n    this.setupEventBus();\n    this.logger.info('Initialized with viewport', this.viewport);\n    this.logger.info('Initialized layout mode type', this.modeType);\n  }\n\n  public getModeType(): LayoutModeType {\n    return this.modeType;\n  }\n\n  private identifyModeType(viewport: LayoutViewPort): LayoutModeType {\n    const isMobile = viewport.width <= 768;\n    const isTablet = viewport.width > 768 && viewport.width <= 1024;\n\n    // Determine layout mode type\n    let layoutModeType: LayoutModeType;\n    if (isMobile) {\n      layoutModeType = \"mobile\";\n    } else if (isTablet) {\n      layoutModeType = \"tablet\";\n    } else {\n      layoutModeType = \"desktop\"; // Default to non-compact desktop\n    }\n\n    return layoutModeType;\n  }\n\n  /**\n   * Get current viewport dimensions\n   */\n  private calculateViewPort(): LayoutViewPort {\n    return {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n  }\n\n  /**\n   * Setup viewport observer for responsive updates\n   */\n  private setupViewportObserver(): void {\n    // Use ResizeObserver for better performance if available\n    if (window.ResizeObserver) {\n      this.resizeObserver = new ResizeObserver(() => {\n        this.handleViewportChange();\n      });\n      this.resizeObserver.observe(document.body);\n    }\n\n    // Fallback to resize event listener\n    window.addEventListener(\"resize\", () => {\n      if (this.resizeTimeout) {\n        clearTimeout(this.resizeTimeout);\n      }\n      this.resizeTimeout = setTimeout(() => {\n        this.handleViewportChange();\n      }, 100);\n    });\n  }\n\n  /**\n   * Handle viewport changes - Pure event-driven approach\n   */\n  private handleViewportChange(): void {\n    const oldModeType = this.modeType;\n\n    const newViewPort = this.calculateViewPort();\n    const newModeType = this.identifyModeType(this.viewport);\n\n    this.viewport = newViewPort;\n\n    // Check if layout mode type changed\n    const layoutModeTypeChanged = oldModeType !== newModeType;\n    this.logger.debug(`Viewport changed: ${newViewPort.width}x${newViewPort.height}`);\n    \n    // Only log if layout mode type changed, not every pixel change\n    if (layoutModeTypeChanged) {\n      this.modeType = newModeType;\n      this.logger.info(`Layout mode type changed: (${oldModeType} → ${newModeType})`);\n\n      // Emit layout mode change event when layout mode type actually changes\n      this.emitLayoutModeChange(newViewPort, newModeType, oldModeType);\n    }\n  }\n\n  /**\n   * Subscribe to layout events\n   */\n  public subscribe(\n    eventType: LayoutEventType,\n    listener: LayoutEventListener,\n  ): () => void {\n    this.logger.debug(`Adding listener for event: ${eventType}`);\n\n    // Delegate to EventBus - wrap the listener to handle LayoutEvent structure\n    const wrappedListener = (data: unknown) => {\n      // If data is already a LayoutEvent, use it directly\n      // Otherwise wrap it in a LayoutEvent structure\n      let event: LayoutEvent;\n      if (\n        data &&\n        typeof data === \"object\" &&\n        \"type\" in data &&\n        \"timestamp\" in data\n      ) {\n        event = data as LayoutEvent;\n      } else {\n        event = {\n          type: eventType,\n          data,\n          timestamp: Date.now(),\n        };\n      }\n\n      return listener(event);\n    };\n\n    // Use EventBus consume method and return its unsubscribe function\n    const consumer = this.eventBus.consume(eventType, wrappedListener);\n\n    return () => {\n      this.logger.debug(`Removing listener for event: ${eventType}`);\n      consumer.unregister();\n    };\n  }\n\n  /**\n   * Emit layout event\n   */\n  public emit(eventType: LayoutEventType, data: unknown): void {\n    const event: LayoutEvent = {\n      type: eventType,\n      data,\n      timestamp: Date.now(),\n    };\n\n    this.logger.debug(`Emitting event: ${eventType}`);\n\n    // Delegate to EventBus publish method\n    this.eventBus.publish(eventType, event);\n  }\n\n  /**\n   * Get current viewport info\n   */\n  public getViewport(): LayoutViewPort {\n    return { ...this.viewport };\n  }\n\n  /**\n   * Mark layout as ready (called when all components are initialized)\n   */\n  public markReady(): void {\n    this.logger.info('Layout marked as ready');\n\n    // Set ready state\n    this.isLayoutReady = true;\n\n    // Create properly typed layout-ready event\n    const event = LayoutEventFactory.createLayoutReadyEvent(this);\n    this.emit(\"layout-ready\", event.data);\n  }\n\n  /**\n   * Check if layout is ready\n   */\n  public isReady(): boolean {\n    return this.isLayoutReady;\n  }\n\n  /**\n   * Emit layout mode change event and coordinate component states\n   */\n  private emitLayoutModeChange(\n    newViewPort: LayoutViewPort,\n    newModeType: LayoutModeType,\n    previousModeType?: LayoutModeType,\n  ): void {\n    this.logger.info(`Layout mode switching to: ${newModeType}`);\n\n    // Coordinate component states during layout mode switches\n    this.coordinateComponentsForLayoutMode(newModeType);\n\n    // Emit layout mode change event for components that need to respond\n    this.logger.debug('Firing layout-mode-change event');\n\n    // Create properly typed event using the factory\n    const event = LayoutEventFactory.createLayoutModeChangeEvent(\n      this,\n      newViewPort,\n      newModeType,\n      previousModeType || this.modeType,\n    );\n\n    // Emit the typed event\n    this.emit(\"layout-mode-change\", event.data);\n  }\n\n  /**\n   * Coordinate registered components during mobile/non-mobile layout mode switches\n   */\n  private coordinateComponentsForLayoutMode(newModeType: LayoutModeType): void {\n    this.logger.debug(`Coordinating components for ${newModeType} mode...`);\n\n    const isMobile = newModeType === \"mobile\";\n\n    // Coordinate sidebar behavior during layout mode transitions\n    if (this.sidebarInstance) {\n      this.logger.debug(`Coordinating sidebar for ${newModeType} mode`);\n\n      // Sidebar will handle its own DOM changes via layout-mode-change subscription\n      // This coordination ensures proper sequencing of state changes\n      if (isMobile) {\n        this.logger.debug('Switching TO mobile: Sidebar will hide and enable overlay mode');\n      } else {\n        this.logger.debug('Switching FROM mobile: Sidebar will show and disable overlay mode');\n      }\n    }\n\n    // Future: Other component coordination can be added here\n    // - Header responsive behavior\n    // - Footer layout adjustments\n    // - MainContent responsive classes\n\n    this.logger.debug(`Component coordination for ${newModeType} complete`);\n  }\n\n  // =================================================================================\n  // Helper Methods for Viewport Type Checking\n  // =================================================================================\n\n  /**\n   * Check if current layout mode type is mobile\n   */\n  public isLayoutMobile(): boolean {\n    return this.modeType === \"mobile\";\n  }\n\n  /**\n   * Check if current layout mode type is tablet\n   */\n  public isLayoutTablet(): boolean {\n    return this.modeType === \"tablet\";\n  }\n\n  /**\n   * Check if current layout mode type is desktop\n   */\n  public isLayoutDesktop(): boolean {\n    return this.modeType === \"desktop\";\n  }\n\n  // =================================================================================\n  // Sidebar Instance Management\n  // =================================================================================\n\n  /**\n   * Register a sidebar instance with the LayoutContext\n   */\n  public registerSidebar(sidebar: Sidebar): void {\n    if (this.sidebarInstance && this.sidebarInstance !== sidebar) {\n      this.logger.warn('Replacing existing sidebar instance. This might indicate a setup issue.');\n    }\n\n    this.sidebarInstance = sidebar;\n    this.logger.info('Sidebar instance registered successfully');\n  }\n\n  /**\n   * Get the current sidebar instance\n   */\n  public getSidebar(): Sidebar | null {\n    return this.sidebarInstance;\n  }\n\n  /**\n   * Unregister the sidebar instance from the LayoutContext\n   */\n  public unregisterSidebar(): void {\n    if (this.sidebarInstance) {\n      this.logger.info('Sidebar instance unregistered');\n      this.sidebarInstance = null;\n    }\n  }\n\n  // =================================================================================\n  // Component Registration System\n  // =================================================================================\n\n  /**\n   * Register the Header component instance with the context\n   * Allows the context to coordinate header-related layout changes\n   */\n  public registerHeader(header: AppHeader): void {\n    if (this.headerInstance && this.headerInstance !== header) {\n      this.logger.warn('Replacing existing Header instance. This might indicate a setup issue.');\n    }\n\n    this.headerInstance = header;\n    this.logger.info('Header component registered successfully');\n  }\n\n  /**\n   * Register the Footer component instance with the context\n   * Allows the context to coordinate footer-related layout changes\n   */\n  public registerFooter(footer: AppFooter): void {\n    if (this.footerInstance && this.footerInstance !== footer) {\n      this.logger.warn('Replacing existing Footer instance. This might indicate a setup issue.');\n    }\n\n    this.footerInstance = footer;\n    this.logger.info('Footer component registered successfully');\n  }\n\n  /**\n   * Register the MainContent component instance with the context\n   * Allows the context to coordinate content area layout changes\n   */\n  public registerMainContent(mainContent: MainContent): void {\n    if (this.mainContentInstance && this.mainContentInstance !== mainContent) {\n      this.logger.warn('Replacing existing MainContent instance. This might indicate a setup issue.');\n    }\n\n    this.mainContentInstance = mainContent;\n    this.logger.info('MainContent component registered successfully');\n  }\n\n  /**\n   * Register the Messages component instance with the context\n   * Allows the context to coordinate message display\n   */\n  public registerMessages(messages: Messages): void {\n    if (this.messagesInstance && this.messagesInstance !== messages) {\n      this.logger.warn('Replacing existing Messages instance. This might indicate a setup issue.');\n    }\n\n    this.messagesInstance = messages;\n    this.logger.info('Messages component registered successfully');\n  }\n\n  /**\n   * Get the registered Header instance\n   */\n  public getHeader(): AppHeader | null {\n    return this.headerInstance;\n  }\n\n  /**\n   * Get the registered Footer instance\n   */\n  public getFooter(): AppFooter | null {\n    return this.footerInstance;\n  }\n\n  /**\n   * Get the registered MainContent instance\n   */\n  public getMainContent(): MainContent | null {\n    return this.mainContentInstance;\n  }\n\n  /**\n   * Get the registered Messages instance\n   */\n  public getMessagesComponent(): Messages | null {\n    return this.messagesInstance;\n  }\n\n  /**\n   * Get all registered component instances\n   * Useful for debugging and coordination purposes\n   */\n  public getRegisteredComponents(): {\n    header: AppHeader | null;\n    footer: AppFooter | null;\n    mainContent: MainContent | null;\n    messages: Messages | null;\n    sidebar: Sidebar | null;\n  } {\n    return {\n      header: this.headerInstance,\n      footer: this.footerInstance,\n      mainContent: this.mainContentInstance,\n      messages: this.messagesInstance,\n      sidebar: this.sidebarInstance,\n    };\n  }\n\n  /**\n   * Check if all core components are registered\n   */\n  public areAllComponentsRegistered(): boolean {\n    return !!(\n      this.headerInstance &&\n      this.footerInstance &&\n      this.mainContentInstance &&\n      this.messagesInstance\n    );\n  }\n\n  /**\n   * Unregister all components (used during cleanup)\n   */\n  public unregisterAllComponents(): void {\n    this.logger.info('Unregistering all components');\n\n    this.headerInstance = null;\n    this.footerInstance = null;\n    this.mainContentInstance = null;\n    this.messagesInstance = null;\n    this.sidebarInstance = null;\n\n    this.logger.info('All components unregistered');\n  }\n\n  // =================================================================================\n  // Messages Interface Access - All message functionality accessed via getMessages()\n  // =================================================================================\n\n  /**\n   * Get Messages interface - exclusive access point to messages functionality\n   * Returns MessagesComponent instance that implements Messages interface\n   */\n  public getMessages(): import(\"../interfaces/Messages\").Messages | null {\n    const messagesComponent = this.getMessagesComponent();\n    // MessagesComponent implements Messages interface directly\n    return messagesComponent;\n  }\n\n  /**\n   * Setup the chain-based hotkey management system\n   */\n  private setupChainHotkeySystem(): void {\n    this.logger.debug('Setting up chain-based hotkey system...');\n    \n    // Initialize chain manager (it will setup its own global listener)\n    this.chainHotkeyManager = new ChainHotkeyManagerImpl();\n    \n    this.logger.info('Chain hotkey system initialized');\n  }\n\n\n\n\n\n  // =================================================================================\n  // Chain-Based Hotkey Management System\n  // =================================================================================\n\n  /**\n   * Get the chain hotkey manager instance\n   */\n  public getChainHotkeyManager(): ChainHotkeyManager {\n    return this.chainHotkeyManager;\n  }\n\n  /**\n   * Register a chain hotkey provider\n   */\n  public registerChainProvider(provider: ChainHotkeyProvider): () => void {\n    const unregister = this.chainHotkeyManager.registerProvider(provider);\n    \n    this.logger.debug(`Registered chain provider: ${provider.getHotkeyProviderId()} with priority ${provider.getProviderPriority()}`);\n    \n    return unregister;\n  }\n\n  /**\n   * Unregister a chain hotkey provider\n   */\n  public unregisterChainProvider(providerId: string): void {\n    this.chainHotkeyManager.unregisterProvider(providerId);\n    this.logger.debug(`Unregistered chain provider: ${providerId}`);\n  }\n\n  /**\n   * Execute hotkey chain for a specific key (primarily for testing)\n   */\n  public async executeHotkeyChain(key: string, event: KeyboardEvent): Promise<ChainExecutionResult> {\n    return this.chainHotkeyManager.executeChain(key, event);\n  }\n\n  /**\n   * Enable/disable all hotkeys for a chain provider\n   */\n  public setChainProviderEnabled(providerId: string, enabled: boolean): void {\n    this.chainHotkeyManager.setProviderEnabled(providerId, enabled);\n    this.logger.debug(`Chain provider ${providerId} ${enabled ? 'enabled' : 'disabled'}`);\n  }\n\n  /**\n   * Get chain debug information for a specific key\n   */\n  public getChainDebugInfo(key: string): {\n    providers: string[];\n    handlers: Array<{\n      providerId: string;\n      key: string;\n      enabled: boolean;\n      priority: number;\n      description?: string;\n    }>;\n    totalHandlers: number;\n  } {\n    return this.chainHotkeyManager.getChainDebugInfo(key);\n  }\n\n  // =================================================================================\n  // Legacy Hotkey System Removed\n  // =================================================================================\n  // The legacy hotkey system has been completely removed in favor of the\n  // chain-based system. All components now use ChainHotkeyProvider directly.\n\n  // =================================================================================\n  // EventBus Management System\n  // =================================================================================\n\n  /**\n   * Setup the EventBus for cross-component communication\n   */\n  private setupEventBus(): void {\n    this.logger.debug('Setting up EventBus for cross-component communication...');\n\n    this.eventBus = new EventBusImpl({\n      debug: false, // Set to true for development debugging\n      defaultTimeout: 5000,\n      maxConsumersPerEvent: 0, // Unlimited consumers\n    });\n\n    this.logger.info('EventBus initialized');\n  }\n\n  /**\n   * Get the EventBus instance for direct access\n   */\n  public getEventBus(): EventBus {\n    return this.eventBus;\n  }\n\n  /**\n   * PUBLISH - Broadcast event to ALL consumers (non-blocking)\n   */\n  public publish(event: string, data: unknown): void {\n    this.logger.debug(`Publishing event: ${event}`);\n    this.eventBus.publish(event, data);\n  }\n\n  /**\n   * SEND - Deliver event to FIRST consumer only (non-blocking)\n   */\n  public send(event: string, data: unknown): void {\n    this.logger.debug(`Sending event: ${event}`);\n    this.eventBus.send(event, data);\n  }\n\n  /**\n   * REQUEST - Send to FIRST consumer and await response (non-blocking Promise)\n   */\n  public request(event: string, data: unknown, _timeout?: number): Promise<unknown> {\n    this.logger.debug(`Requesting response for event: ${event}`);\n    return this.eventBus.request(event, data);\n  }\n\n  /**\n   * CONSUME - Subscribe to events with component tracking\n   */\n  public consume(\n    event: string,\n    handler: (data: unknown) => unknown,\n    component?: string,\n  ): Consumer {\n    this.logger.debug(`Registering consumer for event: ${event}${component ? ` (component: ${component})` : ''}`);\n\n    const consumer = this.eventBus.consume(event, handler);\n\n    // Track consumer for component cleanup\n    if (component) {\n      if (!this.eventBusConsumers.has(component)) {\n        this.eventBusConsumers.set(component, []);\n      }\n      this.eventBusConsumers.get(component)!.push(consumer);\n    }\n\n    return consumer;\n  }\n\n  /**\n   * Unregister all EventBus consumers for a specific component\n   */\n  public unregisterEventBusConsumers(component: string): number {\n    const consumers = this.eventBusConsumers.get(component);\n    if (!consumers) {\n      return 0;\n    }\n\n    let unregisteredCount = 0;\n    consumers.forEach((consumer) => {\n      if (consumer.isActive()) {\n        consumer.unregister();\n        unregisteredCount++;\n      }\n    });\n\n    this.eventBusConsumers.delete(component);\n\n    this.logger.debug(`Unregistered ${unregisteredCount} EventBus consumers for component: ${component}`);\n    return unregisteredCount;\n  }\n\n  /**\n   * Get EventBus debug information\n   */\n  public getEventBusDebugInfo(): {\n    eventCount: number;\n    totalConsumers: number;\n    events: Array<{ name: string; consumers: number }>;\n    componentConsumers: Array<{ component: string; consumers: number }>;\n  } {\n    const eventNames = this.eventBus.getEventNames();\n    const events = eventNames.map((name) => ({\n      name,\n      consumers: this.eventBus.getConsumerCount(name),\n    }));\n\n    const componentConsumers = Array.from(this.eventBusConsumers.entries()).map(\n      ([component, consumers]) => ({\n        component,\n        consumers: consumers.filter((c) => c.isActive()).length,\n      }),\n    );\n\n    return {\n      eventCount: eventNames.length,\n      totalConsumers: events.reduce((sum, event) => sum + event.consumers, 0),\n      events,\n      componentConsumers,\n    };\n  }\n\n  // =================================================================================\n  // Active Hotkey Provider Management - Removed\n  // =================================================================================\n  // The legacy HotkeyProvider system has been removed. Page components now\n  // register themselves directly as ChainHotkeyProvider instances.\n\n  // =================================================================================\n  // ActivePageProvider Implementation\n  // =================================================================================\n\n  /**\n   * Set the current active page\n   */\n  public setActivePage(page: ActivePage): void {\n    const previousPage = this.currentActivePage;\n\n    if (previousPage === page) {\n      // Same page instance, no change needed\n      return;\n    }\n\n    this.logger.info(`Setting active page: ${page.getPageId()} (${page.getPageInfo().name})`);\n\n    this.currentActivePage = page;\n\n    // Notify all registered consumers\n    this.notifyActivePageConsumers(page, previousPage);\n\n    // Update hotkey context based on active page change\n    this.updateHotkeysForActivePage(page, previousPage);\n  }\n\n  /**\n   * Deactivate the specified page if it's currently active\n   */\n  public deactivatePage(page: ActivePage): boolean {\n    if (this.currentActivePage !== page) {\n      // Page is not currently active\n      this.logger.debug(`Cannot deactivate page ${page.getPageId()}: not currently active`);\n      return false;\n    }\n\n    this.logger.info(`Deactivating active page: ${page.getPageId()} (${page.getPageInfo().name})`);\n\n    const previousPage = this.currentActivePage;\n    this.currentActivePage = null;\n\n    // Notify all registered consumers\n    this.notifyActivePageConsumers(null, previousPage);\n\n    // Update hotkey context based on active page change\n    this.updateHotkeysForActivePage(null, previousPage);\n\n    return true;\n  }\n\n  /**\n   * Get the currently active page\n   */\n  public getActivePage(): ActivePage | null {\n    return this.currentActivePage;\n  }\n\n  /**\n   * Register a consumer to be notified of active page changes\n   */\n  public registerActivePageConsumer(consumer: ActivePageConsumer): () => void {\n    this.activePageConsumers.add(consumer);\n\n    this.logger.debug(`Registered active page consumer (${this.activePageConsumers.size} total)`);\n\n    // Immediately notify the new consumer of current state\n    if (this.currentActivePage) {\n      try {\n        consumer.onActivePageChanged(this.currentActivePage, null);\n      } catch (error) {\n        this.logger.error('Error in immediate active page consumer notification', error as Error);\n      }\n    }\n\n    // Return unregister function\n    return () => {\n      this.unregisterActivePageConsumer(consumer);\n    };\n  }\n\n  /**\n   * Unregister a previously registered consumer\n   */\n  public unregisterActivePageConsumer(consumer: ActivePageConsumer): void {\n    const wasRegistered = this.activePageConsumers.delete(consumer);\n\n    if (wasRegistered) {\n      this.logger.debug(`Unregistered active page consumer (${this.activePageConsumers.size} remaining)`);\n    }\n  }\n\n  /**\n   * Notify all active page consumers of a page change\n   */\n  private notifyActivePageConsumers(\n    activePage: ActivePage | null,\n    previousPage: ActivePage | null,\n  ): void {\n    if (this.activePageConsumers.size === 0) {\n      return;\n    }\n\n    this.logger.debug(`Notifying ${this.activePageConsumers.size} consumers of active page change`);\n\n    // Notify synchronously for immediate UI updates - critical for navigation responsiveness\n    this.activePageConsumers.forEach((consumer) => {\n      try {\n        consumer.onActivePageChanged(activePage, previousPage);\n      } catch (error) {\n        this.logger.error('Error in active page consumer notification', error as Error);\n      }\n    });\n  }\n\n  /**\n   * Update hotkey context when active page changes\n   */\n  private updateHotkeysForActivePage(\n    activePage: ActivePage | null,\n    _previousPage: ActivePage | null,\n  ): void {\n    // Currently the hotkey system uses HotkeyProvider interface\n    // This method provides a hook for future integration between\n    // ActivePage and HotkeyProvider systems\n\n    if (activePage) {\n      this.logger.debug(`Active page context updated for page: ${activePage.getPageId()}`);\n    } else {\n      this.logger.debug('Active page context cleared (no active page)');\n    }\n\n    // Future: Enable/disable hotkeys based on activePage context\n    // This would require extending the hotkey system to be aware of ActivePage instances\n  }\n\n  // =================================================================================\n  // Service Registry Management Implementation\n  // =================================================================================\n\n  /**\n   * Register a service with the LayoutContext\n   * Services must implement the Service interface and will be included in lifecycle management\n   */\n  public registerService<T extends Service>(name: string, service: T): void {\n    if (!name || typeof name !== \"string\" || name.trim() === \"\") {\n      throw new ServiceError(\n        \"Service name must be a non-empty string\",\n        name || \"unknown\",\n        \"register\",\n      );\n    }\n\n    if (!service) {\n      throw new ServiceError(\"Service instance is required\", name, \"register\");\n    }\n\n    // Validate service implements the Service interface\n    if (typeof service.getServiceId !== \"function\") {\n      throw new ServiceError(\n        \"Service must implement the Service interface (getServiceId method missing)\",\n        name,\n        \"register\",\n      );\n    }\n\n    const serviceId = service.getServiceId();\n\n    if (this.serviceRegistry.has(name)) {\n      const existingService = this.serviceRegistry.get(name);\n      this.logger.warn(`Service '${name}' is already registered, replacing existing service`, {\n        existingServiceId: existingService?.getServiceId(),\n        newServiceId: serviceId,\n      });\n    }\n\n    this.serviceRegistry.set(name, service);\n\n    this.logger.info(`Service '${name}' registered (${this.serviceRegistry.size} total services)`, {\n      serviceId, \n      serviceType: service.constructor?.name || 'Unknown'\n    });\n  }\n\n  /**\n   * Retrieve a registered service by name with type safety\n   */\n  public getService<T extends Service>(name: string): T | null {\n    if (!name || typeof name !== \"string\" || name.trim() === \"\") {\n      this.logger.warn('Service name must be a non-empty string');\n      return null;\n    }\n\n    const service = this.serviceRegistry.get(name) as T;\n\n    if (!service) {\n      this.logger.warn(`Service '${name}' not found`);\n      return null;\n    }\n\n    return service;\n  }\n\n  /**\n   * Check if a service is registered\n   */\n  public hasService(name: string): boolean {\n    if (!name || typeof name !== \"string\" || name.trim() === \"\") {\n      return false;\n    }\n\n    return this.serviceRegistry.has(name);\n  }\n\n  /**\n   * Unregister a service by name\n   * Returns true if service was found and removed, false otherwise\n   * Calls destroy on the service if it has a destroy method\n   */\n  public async unregisterService(name: string): Promise<boolean> {\n    if (!name || typeof name !== \"string\" || name.trim() === \"\") {\n      this.logger.warn('Service name must be a non-empty string');\n      return false;\n    }\n\n    const service = this.serviceRegistry.get(name);\n    const wasRegistered = this.serviceRegistry.delete(name);\n\n    if (wasRegistered && service) {\n      // Call destroy on the service if it has a destroy method\n      if (typeof service.destroy === \"function\") {\n        try {\n          const result = service.destroy();\n          if (result instanceof Promise) {\n            await result;\n          }\n          this.logger.info(\n            `LayoutContext - Service '${name}' destroyed during unregistration`,\n            { serviceId: service.getServiceId() },\n          );\n        } catch (error) {\n          this.logger.error(\n            `LayoutContext - Service '${name}' destroy failed during unregistration:`,\n            error,\n          );\n        }\n      }\n\n      this.logger.info(\n        `LayoutContext - Service '${name}' unregistered (${this.serviceRegistry.size} remaining services)`,\n        { serviceId: service.getServiceId() },\n      );\n    } else {\n      this.logger.warn(`LayoutContext - Service '${name}' was not registered`);\n    }\n\n    return wasRegistered;\n  }\n\n  /**\n   * Get all registered services as a Map\n   * Useful for debugging and testing\n   */\n  public getRegisteredServices(): Map<string, Service> {\n    return new Map(this.serviceRegistry);\n  }\n\n  /**\n   * Get names of all registered services\n   */\n  public getServiceNames(): string[] {\n    return Array.from(this.serviceRegistry.keys());\n  }\n\n  /**\n   * Create a service reference for lazy service resolution\n   * Enables service dependency resolution without initialization order management\n   */\n  public getServiceReference<T extends Service>(\n    serviceName: string,\n    config?: ServiceReferenceConfig,\n  ): ServiceReference<T> {\n    return new ServiceReference(\n      this,\n      serviceName,\n      config,\n    ) as ServiceReference<T>;\n  }\n\n  /**\n   * Initialize all registered services\n   * Services with init() method will be called in registration order\n   */\n  public async initializeServices(): Promise<void> {\n    if (this.serviceRegistry.size === 0) {\n      this.logger.info(\"No services to initialize\");\n      return;\n    }\n\n    this.logger.info(\n      `LayoutContext - Initializing ${this.serviceRegistry.size} services...`,\n    );\n\n    const initPromises: Promise<void>[] = [];\n    const errors: { name: string; error: Error }[] = [];\n\n    for (const [name, service] of this.serviceRegistry) {\n      if (typeof service.init === \"function\") {\n        try {\n          const result = service.init();\n\n          if (result instanceof Promise) {\n            initPromises.push(\n              result.catch((error) => {\n                errors.push({ name, error });\n                throw new ServiceError(\n                  `Service '${name}' initialization failed: ${error.message}`,\n                  name,\n                  \"init\",\n                );\n              }),\n            );\n          }\n\n          this.logger.info(`LayoutContext - Service '${name}' initialized`, {\n            serviceId: service.getServiceId(),\n          });\n        } catch (error) {\n          errors.push({ name, error: error as Error });\n          this.logger.error(\n            `LayoutContext - Service '${name}' initialization failed:`,\n            error,\n          );\n        }\n      } else {\n        this.logger.info(\n          `LayoutContext - Service '${name}' has no init method, skipping`,\n          { serviceId: service.getServiceId() },\n        );\n      }\n    }\n\n    // Wait for all async initializations\n    if (initPromises.length > 0) {\n      try {\n        await Promise.all(initPromises);\n      } catch (error) {\n        this.logger.error(\n          \"LayoutContext - Some services failed to initialize:\",\n          error,\n        );\n        // Continue execution - don't fail entire initialization for one service\n      }\n    }\n\n    if (errors.length > 0) {\n      this.logger.warn(\n        `LayoutContext - ${errors.length} services had initialization errors:`,\n        errors,\n      );\n    }\n\n    this.logger.info(\n      `LayoutContext - Service initialization complete (${this.serviceRegistry.size - errors.length}/${this.serviceRegistry.size} successful)`,\n    );\n  }\n\n  /**\n   * Destroy all registered services\n   * Services with destroy() method will be called in reverse registration order\n   */\n  public async destroyServices(): Promise<void> {\n    if (this.serviceRegistry.size === 0) {\n      this.logger.info(\"No services to destroy\");\n      return;\n    }\n\n    this.logger.info(\n      `LayoutContext - Destroying ${this.serviceRegistry.size} services...`,\n    );\n\n    const destroyPromises: Promise<void>[] = [];\n    const errors: { name: string; error: Error }[] = [];\n\n    // Destroy services in reverse order\n    const servicesArray = Array.from(this.serviceRegistry.entries()).reverse();\n\n    for (const [name, service] of servicesArray) {\n      if (typeof service.destroy === \"function\") {\n        try {\n          const result = service.destroy();\n\n          if (result instanceof Promise) {\n            destroyPromises.push(\n              result.catch((error) => {\n                errors.push({ name, error });\n                this.logger.error(\n                  `LayoutContext - Service '${name}' destruction failed:`,\n                  error,\n                );\n              }),\n            );\n          }\n\n          this.logger.info(`LayoutContext - Service '${name}' destroyed`, {\n            serviceId: service.getServiceId(),\n          });\n        } catch (error) {\n          errors.push({ name, error: error as Error });\n          this.logger.error(\n            `LayoutContext - Service '${name}' destruction failed:`,\n            error,\n          );\n        }\n      } else {\n        this.logger.info(\n          `LayoutContext - Service '${name}' has no destroy method, skipping`,\n          { serviceId: service.getServiceId() },\n        );\n      }\n    }\n\n    // Wait for all async destructions\n    if (destroyPromises.length > 0) {\n      try {\n        await Promise.all(destroyPromises);\n      } catch (error) {\n        this.logger.error(\n          \"LayoutContext - Some services failed to destroy cleanly:\",\n          error,\n        );\n        // Continue cleanup - don't fail entire destruction for one service\n      }\n    }\n\n    if (errors.length > 0) {\n      this.logger.warn(\n        `LayoutContext - ${errors.length} services had destruction errors:`,\n        errors,\n      );\n    }\n\n    // Clear the registry after destruction attempts\n    this.serviceRegistry.clear();\n\n    this.logger.info(\"Service destruction complete\");\n  }\n\n  // PageContext management removed - now handled by RouterService\n  // LayoutContext focuses on layout coordination only\n\n  // =================================================================================\n  // Failure Tracking\n  // =================================================================================\n\n  /**\n   * Mark the layout context as failed with an error\n   */\n  public fail(error: Error | string): void {\n    this.hasFailed = true;\n    if (typeof error === 'string') {\n      this.failureError = new Error(error);\n    } else {\n      this.failureError = error;\n    }\n    this.logger.error('LayoutContext marked as failed', this.failureError);\n    \n    // Handle error UI logic\n    const errorMessage = this.failureError.message;\n    const isCritical = errorMessage.includes(\"critical\") || errorMessage.includes(\"layout\");\n    \n    // Show error message if messages component is available\n    const messages = this.getMessages();\n    if (messages) {\n      messages.showError(\n        isCritical ? \"Critical Error\" : \"Initialization Warning\",\n        isCritical\n          ? \"Application failed to initialize. Please refresh the page.\"\n          : \"Some features may be unavailable. You can continue with limited functionality.\",\n      );\n    } else {\n      // No messages component - show full page error\n      const errorStack = this.failureError.stack || \"No stack trace\";\n      document.body.innerHTML = `\n        <div style=\"text-align: center; padding: 50px; font-family: Arial, sans-serif;\">\n          <h2>${isCritical ? \"Critical Error\" : \"Application Error\"}</h2>\n          <p>${\n            isCritical\n              ? \"The application cannot start due to a critical error. Please refresh the page or contact support if the issue persists.\"\n              : \"Failed to load some application features. You may continue with limited functionality or refresh the page to try again.\"\n          }</p>\n          <button onclick=\"window.location.reload()\" style=\"padding: 10px 20px; margin-top: 20px;\">Reload Page</button>\n          <details style=\"margin-top: 20px; text-align: left; max-width: 800px; margin-left: auto; margin-right: auto;\">\n            <summary>Technical Details</summary>\n            <pre style=\"background: #f5f5f5; padding: 10px; overflow: auto;\">${errorStack}</pre>\n          </details>\n        </div>\n      `;\n    }\n  }\n\n  /**\n   * Check if the layout context has failed\n   */\n  public failed(): boolean {\n    return this.hasFailed;\n  }\n\n  /**\n   * Get the failure error (null if not failed)\n   */\n  public failure(): Error | null {\n    return this.failureError;\n  }\n\n  // =================================================================================\n  // Cleanup and Destruction\n  // =================================================================================\n\n  /**\n   * Enhanced destroy method - cleanup all resources: services, hotkeys, active pages, layout state\n   */\n  public destroy(): void {\n    this.logger.info(\"Destroying...\");\n\n    // Cleanup services first (async services will be destroyed synchronously, warnings logged)\n    if (this.serviceRegistry.size > 0) {\n      this.logger.info(\"Cleaning up services during destroy...\");\n\n      // Call destroy synchronously - any async cleanup will be logged as warnings\n      for (const [name, service] of this.serviceRegistry) {\n        if (typeof service.destroy === \"function\") {\n          try {\n            const result = service.destroy();\n            if (result instanceof Promise) {\n              this.logger.warn(\n                `LayoutContext - Service '${name}' returned Promise from destroy() during synchronous cleanup - async cleanup may not complete`,\n              );\n            }\n          } catch (error) {\n            this.logger.error(\n              `LayoutContext - Service '${name}' destruction failed during cleanup:`,\n              error,\n            );\n          }\n        }\n      }\n\n      this.serviceRegistry.clear();\n      this.logger.info(\"Service registry cleared\");\n    }\n\n    // Cleanup EventBus consumers\n    this.logger.info(\"Cleaning up EventBus consumers...\");\n    let totalUnregistered = 0;\n    for (const [component, consumers] of this.eventBusConsumers) {\n      const count = consumers.filter((c) => c.isActive()).length;\n      consumers.forEach((consumer) => {\n        if (consumer.isActive()) {\n          consumer.unregister();\n          totalUnregistered++;\n        }\n      });\n      this.logger.info(\n        `LayoutContext - Unregistered ${count} EventBus consumers for component: ${component}`,\n      );\n    }\n    this.eventBusConsumers.clear();\n    this.eventBus.removeAllConsumers();\n    this.logger.info(\n      `LayoutContext - EventBus cleanup complete (${totalUnregistered} consumers unregistered)`,\n    );\n\n    // Cleanup active page tracking\n    this.currentActivePage = null;\n    this.activePageConsumers.clear();\n\n    // Cleanup chain hotkey system\n    this.logger.info(\"Cleaning up chain hotkey system...\");\n    if (this.chainHotkeyManager) {\n      try {\n        this.chainHotkeyManager.destroy();\n        this.logger.info(\"Chain hotkey manager destroyed\");\n      } catch (error) {\n        this.logger.error(\"Error destroying chain hotkey manager:\", error);\n      }\n    }\n    \n    this.logger.info(\"Hotkey system cleanup complete\");\n\n    // PageContexts cleanup - now handled by RouterService (no longer needed)\n    this.logger.info(\"PageContext cleanup - handled by RouterService\");\n\n    // Reset ready state\n    this.isLayoutReady = false;\n\n    // Note: Layout event listeners now managed by EventBus (cleaned up above)\n\n    // Cleanup resize observer\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n      this.resizeObserver = null;\n    }\n\n    // Clear timeout\n    if (this.resizeTimeout) {\n      clearTimeout(this.resizeTimeout);\n      this.resizeTimeout = null;\n    }\n\n    this.logger.info(\"Destroyed successfully\");\n  }\n}\n\nexport default LayoutContextImpl;\n","/**\n * Layout Context Module - Main Entry Point\n * Provides clean interface-based access to layout management\n */\n\nimport LayoutContextImpl from \"./LayoutContextImpl\";\nimport type {\n  LayoutContext,\n  LayoutEventType,\n  LayoutModeType,\n  LayoutEvent,\n  LayoutEventListener,\n  LayoutViewPort,\n} from \"./LayoutContext\";\n\n// Re-export all types for consumers\nexport type {\n  LayoutContext,\n  LayoutEventType,\n  LayoutModeType,\n  LayoutEvent,\n  LayoutEventListener,\n  LayoutViewPort,\n};\n\n// Re-export the implementation class\nexport { LayoutContextImpl };\n\n// Singleton instance for global access\nlet layoutContextInstance: LayoutContextImpl | null = null;\n\n/**\n * Get the global layout context instance\n * Creates a singleton instance if it doesn't exist\n */\nexport function getLayoutContext(): LayoutContextImpl {\n  if (!layoutContextInstance) {\n    layoutContextInstance = new LayoutContextImpl();\n  }\n  return layoutContextInstance;\n}\n\n// Default export is the implementation class\nexport default LayoutContextImpl;\n","/**\n * App Header Component Implementation - Clean CSS Grid Integration\n * Basic header functionality with clean layout integration\n */\n\n// Import component-scoped CSS\nimport \"../assets/styles/components/header.css\";\n\n// Import required components\nimport { UserMenu } from \"./UserMenu\";\nimport { BreadcrumbsComponent } from \"./BreadcrumbsComponent\";\nimport type { UserMenuItem } from \"./Layout\";\nimport type { BreadcrumbItem } from \"../interfaces/BreadcrumbItem\";\n\n// Type-only import for the interface\n// Import layout context\nimport { getLayoutContext } from \"../contexts/index\";\nimport type { LayoutEvent, LayoutContext } from \"../contexts/LayoutContext\";\nimport { LayoutEventFactory } from \"../contexts/LayoutEventFactory\";\nimport { AppHeader, HeaderUser } from \"./AppHeader\";\nimport {\n  ComponentStatus,\n  ComponentWithStatus,\n} from \"../interfaces/ComponentStatus\";\nimport {\n  ChainHotkeyProvider,\n  ChainHotkeyHandler,\n  HotkeyExecutionContext,\n} from \"../hotkeys/HotkeyChainSystem\";\nimport { LoggerFactory } from \"../logging/LoggerFactory\";\nimport { Logger } from \"../logging/Logger\";\n\nexport interface HeaderConfig {\n  brandTitle?: string; // Header brand/logo title (default: \"Opinion\")\n  brandHref?: string; // Header brand/logo link (default: \"/dashboard\")\n  showMobileToggle?: boolean; // Show mobile menu toggle (default: true)\n  showBreadcrumbs?: boolean; // Show breadcrumb navigation (default: true)\n  showUserMenu?: boolean; // Show user menu (default: true)\n}\n\nexport class AppHeaderImpl\n  implements AppHeader, ChainHotkeyProvider, ComponentWithStatus\n{\n  private userMenuHandler?: (userMenu: UserMenu) => void;\n  private container: HTMLElement | null = null;\n  private userMenu: UserMenu | null = null;\n  private breadcrumbsComponent: BreadcrumbsComponent | null = null;\n  private user: HeaderUser | null = null;\n  private layoutContext: LayoutContext;\n  private logger: Logger;\n  private layoutUnsubscribers: Array<() => void> = [];\n  private config: Required<HeaderConfig>;\n  private chainProviderUnsubscriber: (() => void) | null = null;\n  private isInitialized: boolean = false;\n  private initTime: number | null = null;\n  private domEventListeners: number = 0;\n  private updateCount: number = 0;\n\n  constructor(config: HeaderConfig = {}, layoutContext?: LayoutContext) {\n    // Initialize logger first\n    this.logger = LoggerFactory.getInstance().getLogger('AppHeaderImpl');\n    \n    // Apply configuration with defaults\n    this.config = {\n      brandTitle: config.brandTitle ?? \"Opinion\",\n      brandHref: config.brandHref ?? \"/\",\n      showMobileToggle: config.showMobileToggle ?? true,\n      showBreadcrumbs: config.showBreadcrumbs ?? true,\n      showUserMenu: config.showUserMenu ?? true,\n    };\n\n    this.logger.info(\n      \"AppHeaderImpl - Creating clean header with config:\",\n      this.config,\n    );\n\n    // Use provided LayoutContext or fallback to singleton (for backwards compatibility)\n    this.layoutContext = layoutContext || getLayoutContext();\n    this.logger.debug(`AppHeaderImpl - Using LayoutContext:`, {\n      provided: !!layoutContext,\n      contextType: this.layoutContext.constructor.name,\n    });\n  }\n\n  public setUserMenuHandler(handler: (userMenu: UserMenu) => void): void {\n    this.userMenuHandler = handler;\n  }\n\n  /**\n   * Initialize the header component\n   */\n  async init(): Promise<void> {\n    this.logger.info(\"AppHeaderImpl - Initializing...\");\n\n    try {\n      // Create header first - it should exist independently\n      await this.createHeader();\n\n      // Wait for DOM to be ready and elements to be available\n      await this.waitForDOMReady();\n\n      this.logger.debug(`AppHeaderImpl - Current viewport: ${window.innerWidth}px`);\n\n      // Initialize breadcrumbs component\n      await this.initBreadcrumbs();\n\n      // Initialize user menu component (desktop only)\n      await this.initUserMenu();\n\n      // Setup event listeners\n      this.setupEventListeners();\n\n      // Setup layout subscriptions\n      this.subscribeToLayoutContext();\n\n      this.layoutContext.registerHeader(this);\n\n      // Register as chain hotkey provider for ESC key handling (if user menu enabled)\n      if (this.config.showUserMenu) {\n        this.chainProviderUnsubscriber =\n          this.layoutContext.registerChainProvider(this);\n      }\n\n      this.isInitialized = true;\n      this.initTime = Date.now();\n      this.logger.info(\"AppHeaderImpl - Ready\");\n    } catch (error) {\n      this.logger.error(\"AppHeaderImpl - Initialization failed:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Creates or uses existing header element and populate content\n   */\n  private async createHeader(): Promise<void> {\n    // Find existing header element\n    this.container = document.getElementById(\"app-header\");\n\n    if (!this.container) {\n      // Create the element if it doesn't exist\n      this.container = document.createElement(\"header\");\n      this.container.id = \"app-header\";\n      this.container.className = \"app-header\";\n\n      // Create header container\n      const headerContainer = document.createElement(\"div\");\n      headerContainer.className = \"header-container\";\n      this.container.appendChild(headerContainer);\n\n      // Add to DOM - prefer app-layout container if present\n      const appLayout = document.querySelector(\".app-layout\");\n      if (appLayout) {\n        appLayout.insertBefore(this.container, appLayout.firstChild);\n      } else {\n        document.body.insertBefore(this.container, document.body.firstChild);\n      }\n\n      this.logger.info(\"AppHeaderImpl - Created new header element\");\n    } else {\n      this.logger.info(\"AppHeaderImpl - Using existing element\");\n    }\n\n    this.finalizeHeaderCreation();\n  }\n\n  /**\n   * Finalize header creation after element is found\n   */\n  private finalizeHeaderCreation(): void {\n    // Populate the existing structure with dynamic content\n    this.populateContent();\n\n    this.logger.info(\"AppHeaderImpl - Content populated successfully\");\n  }\n\n  /**\n   * Populate header content into existing HTML structure\n   */\n  private populateContent(): void {\n    if (!this.container) return;\n\n    // Find or create header container\n    let headerContainer = this.container.querySelector(\".header-container\");\n    if (!headerContainer) {\n      headerContainer = document.createElement(\"div\");\n      headerContainer.className = \"header-container\";\n      this.container.appendChild(headerContainer);\n    }\n\n    // Populate header content using configuration\n    const mobileToggleHtml = this.config.showMobileToggle\n      ? `\n        <button class=\"mobile-menu-toggle\" id=\"mobile_menu_toggle\" aria-label=\"Toggle Menu\" title=\"Toggle Menu\">\n          <div class=\"hamburger-icon\">\n            <div class=\"hamburger-line\"></div>\n            <div class=\"hamburger-line\"></div>\n            <div class=\"hamburger-line\"></div>\n          </div>\n        </button>\n    `\n      : \"\";\n\n    const breadcrumbsHtml = this.config.showBreadcrumbs\n      ? `\n        <!-- Breadcrumbs container - managed by BreadcrumbsComponent -->\n        <div class=\"header-breadcrumbs\" id=\"breadcrumbs_container\">\n          <!-- BreadcrumbsComponent will render content here -->\n        </div>\n    `\n      : \"\";\n\n    const userMenuHtml = this.config.showUserMenu\n      ? `\n        <!-- User Menu -->\n        <div id=\"user_menu_container\"></div>\n    `\n      : \"\";\n\n    // Brand logo section\n    const brandLogoHtml = `\n      <div class=\"header-brand\">\n        <a href=\"${this.config.brandHref}\" class=\"logo\" title=\"${this.config.brandTitle}\">\n          <img src=\"/inqwise-opinion.svg\" alt=\"${this.config.brandTitle}\" class=\"brand-logo\" width=\"24\" height=\"24\">\n          <span class=\"brand-text\">${this.config.brandTitle}</span>\n        </a>\n      </div>\n    `;\n\n    headerContainer.innerHTML = `\n      <!-- Left section: Brand logo and mobile toggle button -->\n      <div class=\"header-left\">\n        ${brandLogoHtml}\n        ${mobileToggleHtml}\n      </div>\n\n      <!-- Center section: Enhanced breadcrumbs and page title -->\n      <div class=\"header-center\" style=\"${window.innerWidth <= 767 ? \"padding-left: 16px;\" : \"padding-left: 0;\"}\">\n        ${breadcrumbsHtml}\n      </div>\n\n      <!-- Right section: User menu only -->\n      <div class=\"header-right\">\n        ${userMenuHtml}\n      </div>\n    `;\n  }\n\n  /**\n   * Initialize breadcrumbs component\n   */\n  private async initBreadcrumbs(): Promise<void> {\n    if (!this.config.showBreadcrumbs) {\n      this.logger.info(\n        \"AppHeaderImpl - Breadcrumbs disabled in config, skipping initialization\",\n      );\n      return;\n    }\n\n    const breadcrumbsContainer = await this.waitForElement(\n      \"#breadcrumbs_container\",\n    );\n    if (breadcrumbsContainer) {\n      this.breadcrumbsComponent = new BreadcrumbsComponent(\n        breadcrumbsContainer,\n        this.layoutContext,\n      );\n      await this.breadcrumbsComponent.init();\n      this.logger.info(\"AppHeaderImpl - BreadcrumbsComponent initialized\");\n    } else {\n      this.logger.warn(\"AppHeaderImpl - Breadcrumbs container not found\");\n    }\n  }\n\n  /**\n   * Initialize user menu component (responsive - works on both mobile and desktop)\n   */\n  private async initUserMenu(): Promise<void> {\n    if (!this.config.showUserMenu) {\n      this.logger.info(\n        \"AppHeaderImpl - User menu disabled in config, skipping initialization\",\n      );\n      return;\n    }\n\n    const userMenuContainer = await this.waitForElement(\"#user_menu_container\");\n    if (userMenuContainer) {\n      this.userMenu = new UserMenu(userMenuContainer, this.layoutContext);\n      if (this.userMenuHandler) {\n        this.userMenuHandler(this.userMenu);\n      }\n      await this.userMenu.init();\n      this.logger.info(\n        \"AppHeaderImpl - UserMenu component initialized (responsive)\",\n      );\n    } else {\n      this.logger.warn(\"AppHeaderImpl - User menu container not found\");\n    }\n  }\n\n  /**\n   * Setup event listeners for header interactions\n   */\n  private setupEventListeners(): void {\n    // Register global hotkeys via LayoutContext instead of direct listeners\n    this.registerHotkeys();\n\n    // Handle data-action based interactions\n    document.addEventListener(\"click\", (e) => {\n      const target = e.target as HTMLElement;\n      const actionElement = target.closest(\"[data-action]\") as HTMLElement;\n      if (actionElement && this.container?.contains(actionElement)) {\n        const action = actionElement.getAttribute(\"data-action\");\n        this.handleAction(action, actionElement);\n      }\n    });\n\n    // Mobile menu toggle handler (disabled - managed by LayoutContext + Sidebar)\n    this.setupMobileMenuHandler();\n\n  }\n\n\n  /**\n   * Register chain hotkey provider with LayoutContext\n   */\n  private registerHotkeys(): void {\n    // Chain provider registration is already handled in init() method\n    // This method is kept for potential future hotkey-specific setup\n    this.logger.info(\n      \"AppHeaderImpl - Hotkey setup complete (chain provider already registered in init)\",\n    );\n  }\n\n  /**\n   * Handle ESC key via LayoutContext hotkey system\n   */\n  private handleEscapeKey(_event: KeyboardEvent): void {\n    // Emit user menu request event instead of direct call\n    // This maintains separation between header and user menu components\n    const requestEvent = LayoutEventFactory.createUserMenuRequestEvent(\n      \"hide\", // Request to hide/close\n      \"keyboard\",\n    );\n\n    this.layoutContext.emit(\"user-menu-request\", requestEvent.data);\n    this.logger.info(\n      \"📡 AppHeaderImpl - ESC key: User menu close request emitted (via LayoutContext hotkey)\",\n    );\n  }\n\n  /**\n   * Setup mobile menu toggle handler\n   */\n  private setupMobileMenuHandler(): void {\n    // Intentionally disabled: Sidebar visibility and behavior are coordinated by\n    // LayoutContext (mode changes) and handled internally by Sidebar.\n    // Leaving this as a no-op to avoid cross-component DOM manipulation from header.\n    if (!this.config.showMobileToggle) {\n      return;\n    }\n\n    const mobileMenuToggle = document.getElementById(\"mobile_menu_toggle\");\n    if (mobileMenuToggle) {\n      mobileMenuToggle.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.logger.info(\"📱 AppHeaderImpl - Mobile menu toggle clicked\");\n\n        // Emit mobile menu request event instead of directly calling sidebar\n        // This decouples header from sidebar and allows sidebar to handle the request when ready\n        const requestEvent = LayoutEventFactory.createMobileMenuRequestEvent(\n          \"show\",\n          \"menu-button\",\n        );\n\n        this.layoutContext.emit(\"mobile-menu-request\", requestEvent.data);\n        this.logger.info(\"📡 AppHeaderImpl - Mobile menu request event emitted\");\n      });\n      this.domEventListeners++;\n    }\n  }\n\n  /**\n   * Handle data-action based interactions\n   */\n  private handleAction(action: string | null, _element: HTMLElement): void {\n    if (!action) return;\n\n    switch (action) {\n      case \"feedback\":\n        this.showFeedbackModal();\n        break;\n      case \"logout\":\n        this.handleLogoutAction();\n        break;\n      default:\n        this.logger.warn(`Unknown header action: ${action}`);\n    }\n  }\n\n  /**\n   * Handle logout action - delegate to AppHeaderBinderService via LayoutContext\n   */\n  private async handleLogoutAction(): Promise<void> {\n    this.logger.info(\"😺 AppHeaderImpl - Logout action triggered\");\n\n    try {\n      // Get the AppHeaderBinderService using the helper method\n      const { AppHeaderBinderService } = await import(\n        \"../services/AppHeaderBinderService\"\n      );\n      const binderRef = AppHeaderBinderService.getRegisteredReference(\n        this.layoutContext,\n        {\n          enableLogging: false,\n          maxRetries: 5,\n        },\n      );\n\n      const binderService = await binderRef.get();\n      if (binderService) {\n        // Delegate logout to the binder service\n        await binderService.handleLogoutAction();\n        this.logger.info(\"✅ AppHeaderImpl - Logout action completed successfully\");\n      } else {\n        this.logger.warn(\n          \"⚠️ AppHeaderImpl - AppHeaderBinderService not available for logout\",\n        );\n        // Fallback: redirect to logout page\n        window.location.href = \"/logout\";\n      }\n    } catch (error) {\n      this.logger.error(\"❌ AppHeaderImpl - Error handling logout action:\", error);\n      // Fallback: redirect to logout page\n      window.location.href = \"/logout\";\n    }\n  }\n  /**\n   * Show feedback modal\n   */\n  private showFeedbackModal(): void {\n    const message =\n      \"Thank you for your interest in providing feedback!\\n\\n\" +\n      \"This would typically open a feedback form or modal dialog \" +\n      \"where you could submit your comments and suggestions.\";\n\n    if (\n      confirm(\n        message + \"\\n\\nWould you like to be redirected to our feedback page?\",\n      )\n    ) {\n      this.logger.info(\"Redirecting to feedback page...\");\n      // In a real implementation, this would redirect to the actual feedback page\n    }\n  }\n\n  /**\n   * Update user information in header\n   */\n  updateUser(user: HeaderUser): void {\n    this.user = user;\n    this.updateCount++;\n\n    this.logger.info(`AppHeaderImpl - updateUser called: ${user.username}`);\n\n    // Always use UserMenu - it will handle responsive display via CSS\n    if (this.userMenu) {\n      this.userMenu.updateUser({\n        username: user.username,\n        email: user.email,\n        avatar: user.avatar,\n      });\n      this.logger.info(\"AppHeaderImpl - User updated via UserMenu\");\n    } else {\n      this.logger.warn(\"AppHeaderImpl - UserMenu not available for user update\");\n    }\n  }\n\n  /**\n   * Update user menu items\n   */\n  updateUserMenuItems(items: UserMenuItem[]): void {\n    this.logger.info(\n      `AppHeaderImpl - updateUserMenuItems called with ${items.length} items`,\n    );\n\n    if (this.userMenu) {\n      this.userMenu.updateMenuItems(items);\n      this.logger.info(\"AppHeaderImpl - User menu items updated via UserMenu\");\n    } else {\n      this.logger.warn(\n        \"AppHeaderImpl - UserMenu not available for menu items update\",\n      );\n    }\n  }\n\n  /**\n   * Update logo/brand link\n   */\n  updateBrand(title?: string, href?: string): void {\n    const finalTitle = title ?? this.config.brandTitle;\n    const finalHref = href ?? this.config.brandHref;\n\n    const logo = this.container?.querySelector(\".logo\") as HTMLAnchorElement;\n    if (logo) {\n      // Update href\n      logo.href = finalHref;\n      \n      // Update title attribute\n      logo.title = finalTitle;\n      \n      // Update brand text content\n      const brandText = logo.querySelector(\".brand-text\");\n      if (brandText) {\n        brandText.textContent = finalTitle;\n      }\n      \n      // Update image alt text\n      const brandLogo = logo.querySelector(\".brand-logo\");\n      if (brandLogo && brandLogo.tagName?.toLowerCase() === 'img') {\n        brandLogo.setAttribute('alt', finalTitle);\n      }\n      \n      this.logger.info(\n        `AppHeaderImpl - Brand updated: \"${finalTitle}\" -> ${finalHref}`,\n      );\n    }\n  }\n\n  /**\n   * Set breadcrumb items using new BreadcrumbsComponent\n   */\n  setBreadcrumbItems(items: BreadcrumbItem[]): void {\n    if (this.breadcrumbsComponent) {\n      this.breadcrumbsComponent.setBreadcrumbs(items);\n\n      // Update document title based on breadcrumbs\n      if (items.length > 0) {\n        const titleParts = items.map((item) => item.text).reverse();\n        document.title = `${titleParts.join(\" - \")} - Opinion`;\n      } else {\n        document.title = \"Opinion\";\n      }\n    } else {\n      this.logger.warn(\"AppHeaderImpl - BreadcrumbsComponent not initialized\");\n    }\n  }\n\n  /**\n   * Get breadcrumbs component for direct access\n   */\n  getBreadcrumbsComponent(): BreadcrumbsComponent | null {\n    return this.breadcrumbsComponent;\n  }\n\n  /**\n   * Show/hide header\n   */\n  setVisible(visible: boolean): void {\n    if (this.container) {\n      this.container.style.display = visible ? \"block\" : \"none\";\n    }\n  }\n\n  /**\n   * Get header configuration\n   */\n  public getConfig(): Required<HeaderConfig> {\n    return { ...this.config };\n  }\n\n  /**\n   * Wait for DOM to be ready\n   */\n  private async waitForDOMReady(): Promise<void> {\n    if (document.readyState === \"loading\") {\n      return new Promise((resolve) => {\n        document.addEventListener(\"DOMContentLoaded\", () => resolve(), {\n          once: true,\n        });\n      });\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Wait for a specific element to be available in the DOM\n   */\n  private async waitForElement(\n    selector: string,\n    timeout: number = 5000,\n  ): Promise<HTMLElement | null> {\n    const element = document.querySelector(selector) as HTMLElement;\n    if (element) {\n      return element;\n    }\n\n    return new Promise((resolve) => {\n      const observer = new MutationObserver(() => {\n        const element = document.querySelector(selector) as HTMLElement;\n        if (element) {\n          observer.disconnect();\n          resolve(element);\n        }\n      });\n\n      observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n      });\n\n      // Timeout fallback\n      setTimeout(() => {\n        observer.disconnect();\n        resolve(null);\n      }, timeout);\n    });\n  }\n\n  /**\n   * Update header layout based on current layout mode\n   */\n  private updateHeaderLayout(ctx: LayoutContext): void {\n    if (!this.container) {\n      this.logger.warn(\n        \"AppHeaderImpl - Cannot update layout: container not available\",\n      );\n      return;\n    }\n\n    // Remove all positioning inline styles - let CSS handle layout\n    this.container.style.left = \"\";\n    this.container.style.width = \"\";\n    this.container.style.right = \"\";\n\n    // Update CSS classes based on layout mode\n    const sidebar = ctx.getSidebar();\n    const isCompact = sidebar?.isCompactMode() || false;\n    this.container.classList.toggle(\n      \"header-sidebar-compact\",\n      isCompact && !ctx.isLayoutMobile(),\n    );\n    this.container.classList.toggle(\n      \"header-sidebar-normal\",\n      !isCompact && !ctx.isLayoutMobile(),\n    );\n    this.container.classList.toggle(\"header-mobile\", ctx.isLayoutMobile());\n\n    // Dispatch custom event for other components\n    const event = new CustomEvent(\"header-layout-updated\", {\n      detail: {\n        layoutContext: ctx,\n      },\n    });\n    document.dispatchEvent(event);\n\n    this.logger.info(`✅ AppHeaderImpl - Layout updated`);\n  }\n\n  /**\n   * Subscribe to layout context events\n   */\n  private subscribeToLayoutContext(): void {\n    this.logger.info(\"AppHeaderImpl - Subscribing to layout context events...\");\n\n    // Subscribe to layout mode changes to update header layout\n    const layoutModeChangeUnsubscribe = this.layoutContext.subscribe(\n      \"layout-mode-change\",\n      (event: LayoutEvent) => {\n        this.logger.info(\"AppHeaderImpl - Received layout mode change\", event.data);\n        this.updateHeaderLayout(this.layoutContext);\n      },\n    );\n    this.layoutUnsubscribers.push(layoutModeChangeUnsubscribe);\n\n    // Subscribe to sidebar compact mode changes to update header position\n    const compactModeChangeUnsubscribe = this.layoutContext.subscribe(\n      \"sidebar-compact-mode-change\",\n      (event: LayoutEvent) => {\n        this.logger.info(\n          \"AppHeaderImpl - Received sidebar compact mode change\",\n          event.data,\n        );\n        this.updateHeaderLayout(this.layoutContext);\n      },\n    );\n    this.layoutUnsubscribers.push(compactModeChangeUnsubscribe);\n\n    // Set initial layout based on current layout mode\n    this.updateHeaderLayout(this.layoutContext);\n\n    this.logger.info(\n      \"AppHeaderImpl - Successfully subscribed to layout context events ✅\",\n    );\n  }\n\n  /**\n   * Cleanup when component is destroyed\n   */\n  destroy(): void {\n    this.logger.info(\"AppHeaderImpl - Destroying...\");\n\n    // Unsubscribe from layout context events\n    this.layoutUnsubscribers.forEach((unsubscribe) => {\n      try {\n        unsubscribe();\n      } catch (error) {\n        this.logger.error(\n          \"AppHeaderImpl - Error unsubscribing from layout context:\",\n          error,\n        );\n      }\n    });\n    this.layoutUnsubscribers = [];\n\n    // Cleanup chain provider\n    this.cleanupChainProvider();\n    this.logger.info(\"AppHeaderImpl - Chain hotkey provider cleaned up\");\n\n    // Destroy user menu component\n    if (this.userMenu) {\n      this.userMenu.destroy();\n      this.userMenu = null;\n    }\n\n\n    // Remove event listeners and cleanup resources\n    if (this.container) {\n      this.container.remove();\n    }\n\n    this.container = null;\n    this.user = null;\n  }\n\n  /**\n   * Legacy/test adapter: expose sidebar reference via layout context\n   */\n  public getSidebar(): unknown {\n    return this.layoutContext.getSidebar();\n  }\n\n  /**\n   * Legacy/test adapter: trigger layout update\n   */\n  public updatePosition(): void {\n    this.updateHeaderLayout(this.layoutContext);\n  }\n\n  // =================================================================================\n  // ChainHotkeyProvider Implementation\n  // =================================================================================\n\n  /**\n   * Get provider identifier for chain hotkey system\n   */\n  getHotkeyProviderId(): string {\n    return \"AppHeaderImpl\";\n  }\n\n  /**\n   * Get provider priority - Menu systems get medium-high priority (600)\n   */\n  getProviderPriority(): number {\n    return 600; // Menu systems priority\n  }\n\n  /**\n   * Get chain hotkeys for user menu ESC handling\n   */\n  getChainHotkeys(): Map<string, ChainHotkeyHandler> | null {\n    // Only provide ESC handler if user menu is available and potentially open\n    if (!this.config.showUserMenu || !this.userMenu) {\n      return null;\n    }\n\n    const hotkeys = new Map<string, ChainHotkeyHandler>();\n\n    hotkeys.set(\"Escape\", {\n      key: \"Escape\",\n      providerId: this.getHotkeyProviderId(),\n      enabled: true,\n      handler: (ctx: HotkeyExecutionContext) => {\n        this.handleEscapeKeyChain(ctx);\n      },\n      description: \"Close user menu via chain system\",\n      priority: this.getProviderPriority(),\n      enable: () => {\n        /* User menu ESC is always enabled when menu exists */\n      },\n      disable: () => {\n        /* Could disable if needed */\n      },\n      isEnabled: () => this.config.showUserMenu && !!this.userMenu,\n    });\n\n    return hotkeys;\n  }\n\n  /**\n   * Default chain behavior - continue to next handler (cooperative)\n   */\n  getDefaultChainBehavior(): \"next\" | \"break\" {\n    return \"next\"; // Be cooperative with other components\n  }\n\n  /**\n   * Handle ESC key via chain system with smart cooperation\n   */\n  private handleEscapeKeyChain(ctx: HotkeyExecutionContext): void {\n    this.logger.info(\"🎯 AppHeaderImpl - ESC key pressed via chain system\");\n\n    // Check if user menu is actually open/relevant\n    if (this.shouldHandleEscapeKey()) {\n      // Close user menu by emitting event\n      const requestEvent = LayoutEventFactory.createUserMenuRequestEvent(\n        \"hide\", // Request to hide/close\n        \"keyboard\",\n      );\n\n      this.layoutContext.emit(\"user-menu-request\", requestEvent.data);\n      ctx.preventDefault();\n\n      this.logger.info(\n        \"📡 AppHeaderImpl - ESC handled: User menu close request emitted\",\n      );\n\n      // Smart chain control:\n      // Check if higher priority components (like modals) are in the chain\n      if (ctx.hasProvider(\"ModalDialog\") || ctx.hasProvider(\"MobileSidebar\")) {\n        // Let higher priority components also handle if they need to\n        ctx.next();\n      } else {\n        // We're likely the primary handler, prevent default browser behavior\n        ctx.break();\n      }\n    } else {\n      // User menu not relevant, let others handle\n      ctx.next();\n    }\n  }\n\n  /**\n   * Check if AppHeaderImpl should handle the ESC key\n   * This could check if user menu is open, visible, etc.\n   */\n  private shouldHandleEscapeKey(): boolean {\n    // For now, always handle if user menu is configured and available\n    // In the future, this could check if the user menu is actually open\n    return this.config.showUserMenu && !!this.userMenu;\n  }\n\n  /**\n   * Get current component status for debugging\n   */\n  getStatus(): ComponentStatus {\n    const containerDimensions = this.container\n      ? {\n          width: this.container.offsetWidth,\n          height: this.container.offsetHeight,\n          offsetTop: this.container.offsetTop,\n          offsetLeft: this.container.offsetLeft,\n        }\n      : undefined;\n\n    const issues: string[] = [];\n    const warnings: string[] = [];\n\n    // Check for potential issues\n    if (!this.container) {\n      issues.push(\"DOM container element not found\");\n    }\n    if (this.config.showUserMenu && !this.userMenu) {\n      warnings.push(\"User menu enabled but not initialized\");\n    }\n    if (this.layoutUnsubscribers.length === 0) {\n      warnings.push(\"No layout event subscriptions active\");\n    }\n\n    const currentTime = Date.now();\n    const uptime = this.initTime ? currentTime - this.initTime : 0;\n\n    return {\n      componentType: \"AppHeaderImpl\",\n      id: \"app-header\",\n      initialized: this.isInitialized,\n      initTime: this.initTime,\n      uptime: uptime,\n      domElement: this.container\n        ? {\n            tagName: this.container.tagName,\n            id: this.container.id,\n            className: this.container.className,\n            childCount: this.container.children.length,\n            hasContent: this.container.children.length > 0,\n            isVisible: this.container.style.display !== \"none\",\n            ariaLabel: this.container.getAttribute(\"aria-label\") || undefined,\n            role: this.container.getAttribute(\"role\") || undefined,\n            dimensions: containerDimensions,\n          }\n        : undefined,\n      eventListeners: {\n        domEvents: this.domEventListeners,\n        layoutSubscriptions: this.layoutUnsubscribers.length,\n        eventBusSubscriptions: this.chainProviderUnsubscriber ? 1 : 0,\n      },\n      configuration: {\n        brandTitle: this.config.brandTitle,\n        brandHref: this.config.brandHref,\n        showMobileToggle: this.config.showMobileToggle,\n        showBreadcrumbs: this.config.showBreadcrumbs,\n        showUserMenu: this.config.showUserMenu,\n      },\n      currentState: {\n        userMenuInitialized: !!this.userMenu,\n        userSet: !!this.user,\n        updateCount: this.updateCount,\n        containerVisible: this.container\n          ? this.container.style.display !== \"none\"\n          : false,\n      },\n      performance: {\n        updateCount: this.updateCount,\n        lastUpdate: this.user ? Date.now() : undefined,\n      },\n      issues:\n        issues.length > 0 || warnings.length > 0\n          ? issues.concat(warnings)\n          : undefined,\n      customData: {\n        chainHotkeyProvider: {\n          registered: !!this.chainProviderUnsubscriber,\n          providerId: this.getHotkeyProviderId(),\n          priority: this.getProviderPriority(),\n          hotkeyCount: this.getChainHotkeys()?.size || 0,\n        },\n        userMenuConfig: {\n          enabled: this.config.showUserMenu,\n          instance: !!this.userMenu,\n          userSet: !!this.user,\n          userName: this.user?.username,\n        },\n      },\n    };\n  }\n\n  /**\n   * Cleanup chain provider on destroy\n   */\n  private cleanupChainProvider(): void {\n    if (this.chainProviderUnsubscriber) {\n      this.chainProviderUnsubscriber();\n      this.chainProviderUnsubscriber = null;\n      this.logger.info(\"AppHeaderImpl - Chain provider unregistered\");\n    }\n  }\n}\n\nexport default AppHeaderImpl;\n","/**\n * App Footer Component - Clean CSS Grid Integration\n * Manages the application footer and copyright functionality\n */\n\n// Import component-scoped CSS\nimport \"../assets/styles/components/footer.css\";\n// Import layout context\nimport { getLayoutContext } from \"../contexts/index\";\nimport type { LayoutEvent, LayoutContext } from \"../contexts/LayoutContext\";\nimport { AppFooter, FooterConfig } from \"./AppFooter\";\nimport { ComponentStatus, ComponentWithStatus } from \"../interfaces/ComponentStatus\";\nimport { LoggerFactory } from \"../logging/LoggerFactory\";\nimport { Logger } from \"../logging/Logger\";\n\nexport class AppFooterImpl implements AppFooter, ComponentWithStatus {\n  private container: HTMLElement | null = null;\n  private config: FooterConfig;\n  private elements: {\n    navigationPanel?: HTMLElement;\n    copyrightSection?: HTMLElement;\n    copyrightText?: HTMLElement;\n  } = {};\n  private layoutContext: LayoutContext;\n  private logger: Logger;\n  private layoutUnsubscribers: Array<() => void> = [];\n  private isInitialized: boolean = false;\n  private initTime: number | null = null;\n  private navigationClickCount: number = 0;\n  private layoutUpdateCount: number = 0;\n  private lastActionTime: number | null = null;\n  private domEventListenerCount: number = 0;\n\n  constructor(config: FooterConfig = {}, layoutContext?: LayoutContext) {\n    this.config = {\n      showCopyright: true,\n      copyrightText: \"created by inqwise\",\n      showNavigation: true,\n      navigationLinks: [\n        {\n          href: \"/create-bug-report\",\n          title: \"Report a Bug\",\n          text: \"Report a Bug\",\n        },\n      ],\n      ...config,\n    };\n\n    // Use provided LayoutContext or fall back to global one\n    this.layoutContext = layoutContext || getLayoutContext();\n    this.logger = LoggerFactory.getInstance().getLogger('AppFooterImpl');\n  }\n\n  /**\n   * Initialize the footer component\n   */\n  async init(): Promise<void> {\n    this.logger.info(\"AppFooter - Initializing...\");\n\n    // Create footer if it doesn't exist\n    await this.createFooter();\n\n    // Cache DOM elements\n    this.cacheElements();\n\n    // Setup event listeners\n    this.setupEventListeners();\n\n    // Register footer with layout context\n    this.layoutContext.registerFooter(this);\n    \n    // Subscribe to layout context events\n    this.subscribeToLayoutContext();\n\n    this.initTime = Date.now();\n    this.isInitialized = true;\n    this.logger.info(\"AppFooter - Ready\");\n  }\n\n  /**\n   * Use existing footer element and populate content\n   */\n  private async createFooter(): Promise<void> {\n    // Find existing footer element\n    this.container = document.getElementById(\"app-footer\");\n\n    if (!this.container) {\n      // Wait a bit and try again in case DOM is still loading\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.container = document.getElementById(\"app-footer\");\n          if (!this.container) {\n            this.logger.error(\n              \"AppFooter: #app-footer element not found in DOM. Available elements:\",\n              Array.from(document.querySelectorAll(\"[id]\")).map((el) => el.id),\n            );\n            reject(\n              new Error(\n                \"AppFooter: Could not find existing #app-footer element\",\n              ),\n            );\n            return;\n          }\n          this.finalizeFooterCreation();\n          resolve();\n        }, 100);\n      });\n    }\n\n    this.logger.info(\"AppFooter - Using existing element\");\n\n    this.finalizeFooterCreation();\n  }\n\n  /**\n   * Finalize footer creation after element is found\n   */\n  private finalizeFooterCreation(): void {\n    // Populate the existing structure with dynamic content\n    this.populateContent();\n\n    this.logger.info(\"AppFooter - Content populated successfully\");\n  }\n\n  /**\n   * Populate footer content into existing HTML structure\n   */\n  private populateContent(): void {\n    if (!this.container) return;\n\n    // Find footer container\n    const footerContainer = this.container.querySelector(\".footer-container\");\n    if (!footerContainer) return;\n\n    // Build and populate footer content\n    footerContainer.innerHTML = this.buildFooterContent();\n  }\n\n  /**\n   * Build footer content HTML\n   */\n  private buildFooterContent(): string {\n    const navigationHtml = this.config.showNavigation\n      ? this.buildNavigationHtml()\n      : \"\";\n    const copyrightHtml = this.config.showCopyright\n      ? this.buildCopyrightHtml()\n      : \"\";\n\n    return `\n      <div class=\"footer-content\">\n        ${navigationHtml}\n        ${copyrightHtml}\n      </div>\n    `;\n  }\n\n  /**\n   * Build complete footer HTML with wrapper structure\n   */\n  private buildFooterHtml(): string {\n    const navigationHtml = this.config.showNavigation\n      ? this.buildNavigationHtml()\n      : \"\";\n    const copyrightHtml = this.config.showCopyright\n      ? this.buildCopyrightHtml()\n      : \"\";\n\n    return `\n      <div class=\"footer-container\">\n        <div class=\"footer-content\">\n          ${navigationHtml}\n          ${copyrightHtml}\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Build navigation HTML\n   */\n  private buildNavigationHtml(): string {\n    if (!this.config.navigationLinks?.length) return \"\";\n\n    const linksHtml = this.config.navigationLinks\n      .map(\n        (link) => `\n        <li class=\"footer-nav-item\">\n          <a class=\"footer-nav-link\" href=\"${link.href}\" title=\"${link.title}\">${link.text}</a>\n        </li>\n      `,\n      )\n      .join(\"\");\n\n    return `\n      <nav class=\"footer-navigation\" aria-label=\"Footer\">\n        <div class=\"footer-navigation-left-panel\">\n          <ul class=\"footer-nav-list\">\n            ${linksHtml}\n          </ul>\n        </div>\n        <div class=\"footer-navigation-right-panel\"></div>\n      </nav>\n    `;\n  }\n\n  /**\n   * Build copyright HTML\n   */\n  private buildCopyrightHtml(): string {\n    return `\n      <div class=\"footer-copyright-section\">\n        <small class=\"footer-copyright-text\" id=\"footer_copyright_text\">${this.config.copyrightText}</small>\n      </div>\n    `;\n  }\n\n  /**\n   * Cache frequently used DOM elements\n   */\n  private cacheElements(): void {\n    this.elements = {\n      navigationPanel: this.container?.querySelector(\n        \".footer-navigation-left-panel\",\n      ) as HTMLElement,\n      copyrightSection: this.container?.querySelector(\n        \".footer-copyright-section\",\n      ) as HTMLElement,\n      copyrightText: this.container?.querySelector(\n        \".footer-copyright-text\",\n      ) as HTMLElement,\n    };\n  }\n\n  /**\n   * Setup event listeners\n   */\n  private setupEventListeners(): void {\n    this.domEventListenerCount = 0;\n    \n    // Handle navigation link clicks\n    if (this.elements.navigationPanel) {\n      this.elements.navigationPanel.addEventListener(\"click\", (e) => {\n        const target = e.target as HTMLAnchorElement;\n        if (target.tagName === \"A\") {\n          this.handleNavigationClick(target, e);\n        }\n      });\n      this.domEventListenerCount++;\n    }\n  }\n\n  /**\n   * Handle navigation link clicks\n   */\n  private handleNavigationClick(link: HTMLAnchorElement, _event: Event): void {\n    const href = link.getAttribute(\"href\");\n    \n    this.navigationClickCount++;\n    this.lastActionTime = Date.now();\n\n    // Special handling for certain links\n    if (href === \"/create-bug-report\") {\n      // Could open a modal instead of navigating\n      this.logger.info(\"Footer navigation: Report a Bug clicked\");\n    }\n\n    // Allow default navigation behavior\n    // event.preventDefault() could be used here to override default behavior\n  }\n\n  /**\n   * Show/hide footer\n   */\n  setVisible(visible: boolean): void {\n    if (this.container) {\n      this.container.style.display = visible ? \"block\" : \"none\";\n    }\n  }\n\n  /**\n   * Subscribe to layout context events\n   */\n  private subscribeToLayoutContext(): void {\n    this.logger.info(\"AppFooter - Subscribing to layout context events...\");\n\n    // Subscribe to layout mode changes (which include sidebar state changes)\n    const layoutModeChangeUnsubscribe = this.layoutContext.subscribe(\n      \"layout-mode-change\",\n      this.handleLayoutModeChange.bind(this),\n    );\n    this.layoutUnsubscribers.push(layoutModeChangeUnsubscribe);\n\n    // Note: Using layout-mode-change which provides complete layout state information\n\n    // Set initial layout based on current layout mode\n    this.updateFooterLayout();\n\n    this.logger.info(\n      \"AppFooter - Successfully subscribed to layout context events ✅\",\n    );\n  }\n\n  /**\n   * Handle layout mode changes from layout context\n   */\n  private handleLayoutModeChange(event: LayoutEvent): void {\n    const layoutData = event.data;\n    this.logger.info(\"AppFooter - Received layout mode change:\", layoutData);\n    this.updateFooterLayout();\n  }\n\n  /**\n   * Update footer layout based on current layout mode\n   */\n  private updateFooterLayout(): void {\n    if (!this.container) return;\n    \n    this.layoutUpdateCount++;\n    this.lastActionTime = Date.now();\n\n    // Get layout state from LayoutContext\n    const modeType = this.layoutContext.getModeType();\n    const sidebar = this.layoutContext.getSidebar();\n    const isCompact = sidebar?.isCompactMode() || false;\n    const isMobile = modeType === 'mobile';\n\n    this.logger.info(\"AppFooter - Updating layout for layout mode:\", {\n      type: modeType,\n      isCompact,\n      isMobile,\n    });\n\n    // Update CSS classes based on layout mode\n    this.container.classList.toggle(\n      \"footer-sidebar-compact\",\n      isCompact && !isMobile,\n    );\n    this.container.classList.toggle(\n      \"footer-sidebar-normal\",\n      !isCompact && !isMobile,\n    );\n    this.container.classList.toggle(\"footer-mobile\", isMobile);\n\n    // Remove any inline positioning - let CSS Grid handle layout\n    this.container.style.left = \"\";\n    this.container.style.width = \"\";\n    this.container.style.marginLeft = \"\";\n\n    // Always show copyright text\n    if (this.elements.copyrightText) {\n      this.elements.copyrightText.style.display = \"block\";\n    }\n\n    // Dispatch custom event for other components that might need to know\n    const event = new CustomEvent(\"footer-layout-updated\", {\n      detail: {\n        layoutMode: { type: modeType, isCompact, isMobile },\n        footerElement: this.container,\n      },\n    });\n    document.dispatchEvent(event);\n\n    this.logger.info(\"AppFooter - Layout updated:\", {\n      layoutMode: { type: modeType, isCompact, isMobile },\n      cssClasses: Array.from(this.container.classList).filter((cls) =>\n        cls.startsWith(\"footer-\"),\n      ),\n    });\n  }\n\n  /**\n   * Get footer container\n   */\n  getContainer(): HTMLElement | null {\n    return this.container;\n  }\n\n  /**\n   * Get copyright element (for external management by sidebar)\n   */\n  getCopyrightElement(): HTMLElement | null {\n    return this.elements.copyrightText || null;\n  }\n\n  /**\n   * Get detailed status information for this component\n   */\n  getStatus(): ComponentStatus {\n    const currentTime = Date.now();\n    const hasNavigationLinks = this.config.navigationLinks && this.config.navigationLinks.length > 0;\n    \n    return {\n      componentType: 'AppFooterImpl',\n      id: 'app-footer',\n      initialized: this.isInitialized,\n      initTime: this.initTime,\n      uptime: this.initTime ? currentTime - this.initTime : 0,\n      domElement: this.container ? {\n        tagName: this.container.tagName,\n        id: this.container.id,\n        className: this.container.className,\n        childCount: this.container.children.length,\n        hasContent: this.container.children.length > 0,\n        isVisible: this.container.style.display !== 'none',\n        ariaLabel: this.container.getAttribute('aria-label') || undefined,\n        role: this.container.getAttribute('role') || undefined\n      } : undefined,\n      eventListeners: {\n        domEventListeners: this.domEventListenerCount,\n        layoutSubscriptions: this.layoutUnsubscribers.length\n      },\n      configuration: {\n        ...this.config,\n        hasNavigationLinks: hasNavigationLinks,\n        navigationLinksCount: this.config.navigationLinks?.length || 0\n      },\n      currentState: {\n        navigationClickCount: this.navigationClickCount,\n        layoutUpdateCount: this.layoutUpdateCount,\n        lastActionTime: this.lastActionTime,\n        lastActionAgo: this.lastActionTime ? currentTime - this.lastActionTime : null,\n        layoutModeType: this.layoutContext?.getModeType(),\n        isLayoutMobile: this.layoutContext?.isLayoutMobile(),\n        sidebarCompactMode: this.layoutContext?.getSidebar()?.isCompactMode(),\n        elementsCache: {\n          navigationPanel: !!this.elements.navigationPanel,\n          copyrightSection: !!this.elements.copyrightSection,\n          copyrightText: !!this.elements.copyrightText\n        }\n      },\n      performance: {\n        initDuration: this.initTime ? 50 : null // Estimated\n      },\n      issues: this.getIssues(),\n      customData: {\n        navigationLinks: this.config.navigationLinks?.map(link => ({\n          href: link.href,\n          title: link.title,\n          text: link.text\n        })) || [],\n        cssClasses: this.container ? Array.from(this.container.classList) : [],\n        elementsFound: {\n          container: !!this.container,\n          navigationPanel: !!this.elements.navigationPanel,\n          copyrightSection: !!this.elements.copyrightSection,\n          copyrightText: !!this.elements.copyrightText\n        }\n      }\n    };\n  }\n  \n  /**\n   * Get current issues with the component\n   */\n  private getIssues(): string[] {\n    const issues: string[] = [];\n    \n    if (!this.isInitialized) {\n      issues.push('Component not initialized');\n    }\n    \n    if (!this.container) {\n      issues.push('DOM container element missing');\n    }\n    \n    if (!this.layoutContext) {\n      issues.push('LayoutContext not available');\n    }\n    \n    if (this.config.showNavigation && (!this.config.navigationLinks || this.config.navigationLinks.length === 0)) {\n      issues.push('Navigation enabled but no navigation links configured');\n    }\n    \n    if (this.config.showCopyright && !this.config.copyrightText) {\n      issues.push('Copyright enabled but no copyright text configured');\n    }\n    \n    if (!this.elements.copyrightText && this.config.showCopyright) {\n      issues.push('Copyright text element not found in DOM');\n    }\n    \n    if (!this.elements.navigationPanel && this.config.showNavigation) {\n      issues.push('Navigation panel element not found in DOM');\n    }\n    \n    if (this.layoutUnsubscribers.length === 0 && this.isInitialized) {\n      issues.push('No layout subscriptions active (possible memory leak or initialization issue)');\n    }\n    \n    return issues;\n  }\n\n  /**\n   * Cleanup when component is destroyed\n   */\n  destroy(): void {\n    this.logger.info(\"AppFooter - Destroying...\");\n\n    // Unsubscribe from layout context events\n    this.layoutUnsubscribers.forEach((unsubscribe) => {\n      try {\n        unsubscribe();\n      } catch (error) {\n        this.logger.error(\n          \"AppFooter - Error unsubscribing from layout context:\",\n          error,\n        );\n      }\n    });\n    this.layoutUnsubscribers = [];\n\n    // Remove event listeners and cleanup resources\n    if (this.container) {\n      this.container.remove();\n    }\n\n    this.container = null;\n    this.elements = {};\n  }\n}\n\nexport default AppFooterImpl;\n","import { LoggerFactory } from '../logging/LoggerFactory';\nimport { Logger } from '../logging/Logger';\n\n/**\n * Base component class that implements lifecycle methods\n * Other components should extend this instead of implementing LifecycleHandler directly\n */\nexport abstract class BaseComponent {\n  protected _initialized = false;\n  protected _destroyed = false;\n  protected logger: Logger;\n\n  constructor() {\n    this.logger = LoggerFactory.getInstance().getLogger(this.constructor.name);\n  }\n\n  /**\n   * Called before component initialization\n   * Optional hook for setup tasks\n   */\n  protected async onBeforeInit(): Promise<void> {\n    // Optional override\n  }\n\n  /**\n   * Main initialization method \n   * Must be implemented by concrete components\n   */\n  protected abstract onInit(): Promise<void> | void;\n\n  /**\n   * Called after component is fully initialized\n   * Optional hook for post-initialization tasks\n   */\n  protected onPostInit(): Promise<void> | void {\n    // Optional override\n  }\n\n  /**\n   * Called before component destruction\n   * Optional hook for cleanup preparation\n   */\n  protected async onBeforeDestroy(): Promise<void> {\n    // Optional override\n  }\n\n  /**\n   * Main cleanup method\n   * Must be implemented by concrete components\n   */\n  protected abstract onDestroy(): void;\n\n  /**\n   * Called after component is fully destroyed\n   * Optional hook for post-destruction tasks\n   */\n  protected async onAfterDestroy(): Promise<void> {\n    // Optional override\n  }\n\n  /**\n   * Initialize the component\n   * Executes lifecycle hooks in order\n   */\n  public async init(): Promise<void> {\n    if (this._initialized || this._destroyed) {\n      this.logger.warn('Cannot initialize - already initialized or destroyed');\n      return;\n    }\n\n    try {\n      await this.onBeforeInit();\n      await this.onInit();\n      this._initialized = true;\n      await this.onPostInit();\n    } catch (error) {\n      this.logger.error('Initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Destroy the component\n   * Executes lifecycle hooks in order\n   */\n  public async destroy(): Promise<void> {\n    if (this._destroyed) {\n      this.logger.warn('Already destroyed');\n      return;\n    }\n\n    try {\n      await this.onBeforeDestroy();\n      this.onDestroy();\n      this._destroyed = true;\n      this._initialized = false;\n      await this.onAfterDestroy();\n    } catch (error) {\n      this.logger.error('Destruction failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if component is initialized\n   */\n  public isComponentInitialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Check if component is destroyed\n   */\n  public isComponentDestroyed(): boolean {\n    return this._destroyed;\n  }\n}\n\nexport default BaseComponent;","/**\n * MainContent Component Implementation - Clean CSS Grid Integration\n * Manages the semantic main content area with Flexbox layout\n */\n\n// Import component-scoped CSS\nimport \"../assets/styles/components/main-content.css\";\nimport BaseComponent from './BaseComponent';\n// Import layout context\nimport {\n  getLayoutContext,\n  type LayoutContext,\n  type LayoutEvent,\n} from \"../contexts\";\nimport type { MainContent, MainContentConfig } from \"./MainContent\";\nimport { ComponentStatus, ComponentWithStatus } from \"../interfaces/ComponentStatus\";\n\nexport class MainContentImpl extends BaseComponent implements MainContent, ComponentWithStatus {\n  private container: HTMLElement | null = null;\n  private config: MainContentConfig;\n  private isInitialized: boolean = false;\n  private layoutContext: LayoutContext;\n  private layoutUnsubscribers: Array<() => void> = [];\n  private initTime: number | null = null;\n  private contentUpdateCount: number = 0;\n  private lastContentUpdate: number | null = null;\n\n  constructor(config: MainContentConfig = {}, layoutContext?: LayoutContext) {\n    super();\n    this.config = {\n      className: \"app-main main-content\",\n      id: \"app\", // Keep the existing id from HTML\n      ...config,\n    };\n\n    // Use provided LayoutContext or fallback to global one\n    this.layoutContext = layoutContext || getLayoutContext();\n    this.logger.info(\n      \"MainContent - Creating clean component with Flexbox layout...\",\n      layoutContext ? \"(using provided LayoutContext)\" : \"(using global LayoutContext)\"\n    );\n  }\n\n  /**\n   * Initialize the main content area\n   */\n  protected async onInit(): Promise<void> {\n    this.logger.info(\"MainContent - Initializing...\");\n\n    // Init validation now handled by BaseComponent\n\n    // Create the main content element (will use existing app-main if available)\n    await this.createMainElement();\n\n    // Subscribe to layout changes to ensure proper content positioning\n    this.subscribeToLayoutContext();\n\n    this.layoutContext.registerMainContent(this);\n\n    this.initTime = Date.now();\n    this.isInitialized = true;\n    this.logger.info(\"MainContent - Ready ✅\");\n  }\n\n  /**\n   * Create or use the existing main element\n   */\n  private async createMainElement(): Promise<void> {\n    // First, try to find the existing app-main element\n    this.container = document.querySelector(\".app-main\");\n\n    if (this.container) {\n      this.logger.info(\"MainContent - Using existing app-main element\");\n\n      // Clear the existing content (loading spinner)\n      this.container.innerHTML = \"\";\n\n      // Add the main-content class to the existing element\n      this.container.classList.add(\"main-content\");\n\n      // Update the id if specified\n      if (this.config.id && this.config.id !== \"app\") {\n        this.container.id = this.config.id;\n      }\n    } else {\n      // Fallback: Create main element using semantic HTML5 main tag\n      this.logger.info(\"MainContent - Creating new main element (fallback)\");\n      this.container = document.createElement(\"main\");\n\n      // Set basic attributes\n      if (this.config.id) {\n        this.container.id = this.config.id;\n      }\n\n      if (this.config.className) {\n        this.container.className = this.config.className;\n      }\n\n      // Insert main element into the app layout structure\n      this.insertIntoLayout();\n    }\n\n    // Set ARIA attributes for accessibility\n    if (this.config.role) {\n      this.container.setAttribute(\"role\", this.config.role);\n    }\n\n    if (this.config.ariaLabel) {\n      this.container.setAttribute(\"aria-label\", this.config.ariaLabel);\n    } else {\n      // Default aria-label for main content\n      this.container.setAttribute(\"aria-label\", \"Main content\");\n    }\n\n    this.logger.info(\"MainContent - Main element ready\");\n  }\n\n  /**\n   * Insert main element into proper semantic position\n   */\n  private insertIntoLayout(): void {\n    const appLayout = document.querySelector(\".app-layout\");\n\n    if (appLayout) {\n      // Find the header element to insert main after it\n      const header = appLayout.querySelector(\".app-header\");\n      const footer = appLayout.querySelector(\".app-footer\");\n\n      if (header && footer) {\n        // Insert between header and footer\n        appLayout.insertBefore(this.container!, footer);\n        this.logger.info(\n          \"MainContent - Inserted between header and footer in app-layout\",\n        );\n      } else if (header) {\n        // Insert after header\n        if (header.nextSibling) {\n          appLayout.insertBefore(this.container!, header.nextSibling);\n        } else {\n          appLayout.appendChild(this.container!);\n        }\n        this.logger.info(\"MainContent - Inserted after header in app-layout\");\n      } else {\n        // No header found, append to app-layout\n        appLayout.appendChild(this.container!);\n        this.logger.info(\"MainContent - Appended to app-layout\");\n      }\n    } else {\n      // Fallback: insert into body\n      document.body.appendChild(this.container!);\n      this.logger.info(\n        \"MainContent - Fallback: Appended to body (app-layout not found)\",\n      );\n    }\n  }\n\n  /**\n   * Set content in the main area\n   */\n  setContent(content: string | HTMLElement): void {\n    if (!this.container) {\n      this.logger.warn(\"MainContent - Cannot set content: not initialized\");\n      return;\n    }\n\n    if (typeof content === \"string\") {\n      this.container.innerHTML = content;\n    } else {\n      this.container.innerHTML = \"\";\n      this.container.appendChild(content);\n    }\n\n    this.contentUpdateCount++;\n    this.lastContentUpdate = Date.now();\n    this.logger.info(\"MainContent - Content updated\");\n  }\n\n\n  /**\n   * Clear all content from main area\n   */\n  clearContent(): void {\n    if (!this.container) {\n      this.logger.warn(\"MainContent - Cannot clear content: not initialized\");\n      return;\n    }\n\n    this.container.innerHTML = \"\";\n    this.contentUpdateCount++;\n    this.lastContentUpdate = Date.now();\n    this.logger.info(\"MainContent - Content cleared\");\n  }\n\n\n\n  /**\n   * Get the main content element\n   */\n  getElement(): HTMLElement | null {\n    // Throw if the element is not available (destroyed or not created)\n    if (this.container === null) {\n      throw new Error('MainContent element is not available');\n    }\n    return this.container;\n  }\n\n\n  /**\n   * Check if main content is initialized\n   */\n  isReady(): boolean {\n    return this.isInitialized && this.container !== null;\n  }\n\n  /**\n   * Get the LayoutContext instance\n   */\n  getLayoutContext(): LayoutContext {\n    return this.layoutContext;\n  }\n\n  /**\n   * Show main content\n   */\n  show(): void {\n    if (!this.container) return;\n\n    this.container.style.display = \"\";\n    this.container.removeAttribute(\"aria-hidden\");\n  }\n\n  /**\n   * Hide main content\n   */\n  hide(): void {\n    if (!this.container) return;\n\n    this.container.style.display = \"none\";\n    this.container.setAttribute(\"aria-hidden\", \"true\");\n  }\n\n  /**\n   * Set loading state\n   */\n  setLoading(loading: boolean): void {\n    if (!this.container) return;\n\n    if (loading) {\n      this.container.classList.add(\"loading\");\n      this.container.setAttribute(\"aria-busy\", \"true\");\n\n      // Add loading indicator if not already present\n      if (!this.container.querySelector(\".loading-indicator\")) {\n        const loadingIndicator = document.createElement(\"div\");\n        loadingIndicator.className = \"loading-indicator\";\n        loadingIndicator.innerHTML = `\n          <div class=\"loading-spinner\" aria-label=\"Loading content...\">\n            <div class=\"spinner\"></div>\n            <span class=\"loading-text\">Loading...</span>\n          </div>\n        `;\n        this.container.appendChild(loadingIndicator);\n      }\n    } else {\n      this.container.classList.remove(\"loading\");\n      this.container.removeAttribute(\"aria-busy\");\n\n      // Remove loading indicator\n      const loadingIndicator =\n        this.container.querySelector(\".loading-indicator\");\n      if (loadingIndicator) {\n        loadingIndicator.remove();\n      }\n    }\n  }\n\n  /**\n   * Set error state\n   */\n  setError(error: string | null): void {\n    if (!this.container) return;\n\n    if (error) {\n      this.container.classList.add(\"error\");\n\n      // Add error message if not already present\n      if (!this.container.querySelector(\".error-message\")) {\n        const errorElement = document.createElement(\"div\");\n        errorElement.className = \"error-message\";\n        errorElement.innerHTML = `\n          <div class=\"error-content\" role=\"alert\" aria-live=\"assertive\">\n            <h2>Error</h2>\n            <p>${error}</p>\n            <button class=\"retry-button\" onclick=\"window.location.reload()\">\n              Try Again\n            </button>\n          </div>\n        `;\n        this.container.appendChild(errorElement);\n      }\n    } else {\n      this.container.classList.remove(\"error\");\n\n      // Remove error message\n      const errorElement = this.container.querySelector(\".error-message\");\n      if (errorElement) {\n        errorElement.remove();\n      }\n    }\n  }\n\n  /**\n   * Subscribe to layout context events\n   */\n  private subscribeToLayoutContext(): void {\n    this.logger.info(\"MainContent - Subscribing to layout context events...\");\n\n    // Subscribe to sidebar dimension changes\n    const sidebarDimensionsUnsubscribe = this.layoutContext.subscribe(\n      \"sidebar-compact-mode-change\",\n      this.handleSidebarDimensionsChange.bind(this),\n    );\n    this.layoutUnsubscribers.push(sidebarDimensionsUnsubscribe);\n\n    // Note: No longer subscribing to viewport-change - sidebar-dimensions-change is sufficient\n    // The sidebar dimensions already encode all the viewport information we need\n\n    // Set initial layout based on current layout mode\n    this.updateContentLayout();\n\n    this.logger.info(\n      \"MainContent - Successfully subscribed to layout context events ✅\",\n    );\n  }\n\n  /**\n   * Handle sidebar dimension changes from layout context\n   */\n  private handleSidebarDimensionsChange(event: LayoutEvent): void {\n    const sidebarCompactMode = event.data as Boolean;\n    this.logger.info(\n      \"MainContent - Received sidebar dimensions change to:\",\n      sidebarCompactMode ? \"'compact'\" : \"'expanded'\",\n    );\n    this.updateContentLayout();\n  }\n\n  /**\n   * Update content layout based on current layout mode\n   */\n  private updateContentLayout(): void {\n    if (!this.container) return;\n\n    // Get layout state directly from LayoutContext\n    const sidebar = this.layoutContext.getSidebar();\n    const sidebarCompactMode = sidebar?.isCompactMode();\n    const layoutModeType = this.layoutContext.getModeType();\n    const layoutMobile = this.layoutContext.isLayoutMobile();\n\n    this.logger.info(\"MainContent - Updating layout:\", {\n      sidebarCompactMode: sidebarCompactMode,\n      layoutModeType: layoutModeType,\n    });\n\n    // Update CSS classes based on layout mode\n    this.container.classList.toggle(\n      \"content-sidebar-compact\",\n      sidebarCompactMode && !layoutMobile,\n    );\n    this.container.classList.toggle(\n      \"content-sidebar-normal\",\n      !sidebarCompactMode && !layoutMobile,\n    );\n    this.container.classList.toggle(\"content-mobile\", layoutMobile);\n\n    // Remove any inline positioning - let CSS Grid handle layout\n    this.container.style.left = \"\";\n    this.container.style.width = \"\";\n    this.container.style.marginLeft = \"\";\n\n    this.logger.info(\"MainContent - Layout updated:\", {\n      layoutMode: {\n        type: layoutModeType,\n        sidebarCompactMode: sidebarCompactMode,\n      },\n      cssClasses: Array.from(this.container.classList).filter((cls) =>\n        cls.startsWith(\"content-\"),\n      ),\n    });\n  }\n\n  /**\n   * Get detailed status information for this component\n   */\n  getStatus(): ComponentStatus {\n    const currentTime = Date.now();\n    const activeContentElement = this.container?.querySelector(':not(.loading-indicator):not(.error-message)');\n    const hasContent = activeContentElement && (activeContentElement.children.length > 0 || activeContentElement.textContent?.trim());\n    \n    return {\n      componentType: 'MainContent',\n      id: 'main-content',\n      initialized: this.isInitialized,\n      initTime: this.initTime,\n      uptime: this.initTime ? currentTime - this.initTime : 0,\n      domElement: this.container ? {\n        tagName: this.container.tagName,\n        id: this.container.id,\n        className: this.container.className,\n        childCount: this.container.children.length,\n        hasContent: !!hasContent,\n        isVisible: this.container.style.display !== 'none',\n        ariaLabel: this.container.getAttribute('aria-label') || undefined,\n        role: this.container.getAttribute('role') || undefined\n      } : undefined,\n      eventListeners: {\n        layoutSubscriptions: this.layoutUnsubscribers.length\n      },\n      configuration: {\n        ...this.config\n      },\n      currentState: {\n        contentUpdateCount: this.contentUpdateCount,\n        lastContentUpdate: this.lastContentUpdate,\n        lastContentUpdateAgo: this.lastContentUpdate ? currentTime - this.lastContentUpdate : null,\n        isLoading: this.container?.classList.contains('loading') || false,\n        hasError: this.container?.classList.contains('error') || false,\n        layoutModeType: this.layoutContext?.getModeType(),\n        isLayoutMobile: this.layoutContext?.isLayoutMobile(),\n        sidebarCompactMode: this.layoutContext?.getSidebar()?.isCompactMode()\n      },\n      performance: {\n        initDuration: this.initTime ? (this.initTime - (this.initTime - 50)) : null // Rough estimate\n      },\n      issues: this.getIssues(),\n      customData: {\n        layoutUnsubscribers: this.layoutUnsubscribers.length,\n        cssClasses: this.container ? Array.from(this.container.classList) : [],\n        contentElements: this.container ? {\n          total: this.container.children.length,\n          loadingIndicator: !!this.container.querySelector('.loading-indicator'),\n          errorMessage: !!this.container.querySelector('.error-message')\n        } : undefined\n      }\n    };\n  }\n  \n  /**\n   * Get current issues with the component\n   */\n  private getIssues(): string[] {\n    const issues: string[] = [];\n    \n    if (!this.isInitialized) {\n      issues.push('Component not initialized');\n    }\n    \n    if (!this.container) {\n      issues.push('DOM container element missing');\n    }\n    \n    if (this.container?.classList.contains('error')) {\n      issues.push('Component is in error state');\n    }\n    \n    if (!this.layoutContext) {\n      issues.push('LayoutContext not available');\n    }\n    \n    if (this.layoutUnsubscribers.length === 0 && this.isInitialized) {\n      issues.push('No layout subscriptions active (possible memory leak or initialization issue)');\n    }\n    \n    return issues;\n  }\n\n  /**\n   * Destroy the component\n   */\n  protected onDestroy(): void {\n    this.logger.info(\"MainContent - Destroying...\");\n\n    // Unsubscribe from layout context events\n    this.layoutUnsubscribers.forEach((unsubscribe) => {\n      try {\n        unsubscribe();\n      } catch (error) {\n        this.logger.error(\n          \"MainContent - Error unsubscribing from layout context:\",\n          error,\n        );\n      }\n    });\n    this.layoutUnsubscribers = [];\n\n    // Remove DOM element\n    if (this.container) {\n      this.container.remove();\n      this.container = null;\n    }\n\n    // Reset state\n    this.isInitialized = false;\n\n    this.logger.info(\"MainContent - Destroyed successfully\");\n  }\n}\n\nexport default MainContentImpl;\n","/**\n * Build Configuration\n * \n * This file contains build-time configuration for different deployment scenarios.\n * Instead of relying on environment variables, we define explicit configurations\n * that can be selected at build time.\n * \n * Note: This file accesses process.env at build time and is safe for both\n * Node.js (build) and browser (runtime) environments.\n */\n\n/* eslint-env node */\n\nexport interface BuildConfig {\n  /**\n   * Base URL for the application (used for routing and assets)\n   * Examples: '', '/app', '/opinion-front-ui/pr-16'\n   */\n  baseUrl: string;\n  \n  /**\n   * Enable GitHub Pages SPA routing fallback\n   * When true, the app will decode routes from query parameters (e.g., /?/surveys -> /surveys)\n   */\n  enableSpaRouting: boolean;\n  \n  /**\n   * Build environment\n   */\n  environment: 'development' | 'production' | 'test';\n  \n  /**\n   * Enable debug logging\n   */\n  enableDebugLogging: boolean;\n  \n  /**\n   * Asset path prefix (usually same as baseUrl but can be different for CDN)\n   */\n  assetsUrl?: string;\n}\n\n/**\n * Predefined build configurations\n */\nconst BUILD_CONFIGS: Record<string, BuildConfig> = {\n  // Local development\n  development: {\n    baseUrl: '',\n    enableSpaRouting: false,\n    environment: 'development',\n    enableDebugLogging: true\n  },\n  \n  // Production deployment (root domain)\n  production: {\n    baseUrl: '',\n    enableSpaRouting: false,\n    environment: 'production',\n    enableDebugLogging: false\n  },\n  \n  // GitHub Pages PR preview (requires SPA routing)\n  'github-pages-pr': {\n    baseUrl: '', // Will be set dynamically in CI\n    enableSpaRouting: true,\n    environment: 'production',\n    enableDebugLogging: false\n  },\n  \n  // GitHub Pages main branch\n  'github-pages-main': {\n    baseUrl: '/opinion-front-ui',\n    enableSpaRouting: true,\n    environment: 'production',\n    enableDebugLogging: false\n  },\n  \n  // Testing environment\n  test: {\n    baseUrl: '',\n    enableSpaRouting: false,\n    environment: 'test',\n    enableDebugLogging: false\n  }\n};\n\n// Declare the Vite-injected build configuration constant\ndeclare global {\n  const __BUILD_CONFIG__: BuildConfig;\n}\n\n/**\n * Get build configuration from Vite-injected constants\n * This is set at build time via Vite's define option\n */\n/* eslint-disable no-undef */\nfunction getBuildConfig(): BuildConfig {\n  // Use Vite-injected configuration if available, otherwise fallback to development\n  if (typeof __BUILD_CONFIG__ !== 'undefined') {\n    return __BUILD_CONFIG__;\n  }\n  \n  // Fallback for development/testing when Vite define is not available\n  return BUILD_CONFIGS.development;\n}\n/* eslint-enable no-undef */\n\n/**\n * Current build configuration\n */\nexport const buildConfig = getBuildConfig();\n\n/**\n * Helper functions for common checks\n */\nexport const isDevelopment = () => buildConfig.environment === 'development';\nexport const isProduction = () => buildConfig.environment === 'production';\nexport const isTest = () => buildConfig.environment === 'test';","import { buildConfig, isDevelopment, isProduction, isTest } from './build.config';\n\n/**\n * Application configuration\n * Handles environment-specific settings like base URLs for routing\n */\n\nexport interface AppConfig {\n  baseUrl: string;\n  environment: 'development' | 'production' | 'test';\n  enableSpaRouting: boolean;\n  enableDebugLogging: boolean;\n  homepagePageId: string;\n}\n\nexport const appConfig: AppConfig = {\n  baseUrl: buildConfig.baseUrl,\n  environment: buildConfig.environment,\n  enableSpaRouting: buildConfig.enableSpaRouting,\n  enableDebugLogging: buildConfig.enableDebugLogging,\n  homepagePageId: 'dashboard'\n};\n\n/**\n * Get the full URL path with base URL prepended\n * @param path - The route path (e.g., '/dashboard')\n * @returns Full path with base URL (e.g., '/opinion-front-ui/pr-15/dashboard')\n */\nexport function getFullPath(path: string): string {\n  // Ensure path starts with /\n  const normalizedPath = path.startsWith('/') ? path : '/' + path;\n  \n  // If no base URL, return path as-is\n  if (!appConfig.baseUrl) {\n    return normalizedPath;\n  }\n  \n  // Combine base URL with path\n  return appConfig.baseUrl + normalizedPath;\n}\n\n/**\n * Remove base URL from a full path to get the route path\n * @param fullPath - The full path (e.g., '/opinion-front-ui/pr-15/dashboard')\n * @returns Route path (e.g., '/dashboard')\n */\nexport function getRoutePath(fullPath: string): string {\n  if (!appConfig.baseUrl) {\n    return fullPath;\n  }\n  \n  if (fullPath.startsWith(appConfig.baseUrl)) {\n    const routePath = fullPath.slice(appConfig.baseUrl.length);\n    return routePath || '/';\n  }\n  \n  return fullPath;\n}\n\n/**\n * Check if a page ID is the homepage\n */\nexport function isHomepage(pageId: string): boolean {\n  return pageId === appConfig.homepagePageId;\n}\n\n// Export helper functions from build config for compatibility\nexport { isDevelopment, isProduction, isTest };\n","/**\n * Sidebar Component - Clean CSS Grid Integration\n * Basic sidebar functionality with clean layout integration\n */\n\n// Import component-scoped CSS\nimport \"../assets/styles/components/sidebar.css\";\n// Import layout context\nimport { getLayoutContext, type LayoutContext } from \"../contexts/index\";\n// Import app config for base URL handling\nimport { getFullPath } from \"../config/app\";\n// Import sidebar interfaces and types\nimport { Dimensions, NavigationItem, Sidebar, SidebarConfig } from \"./Sidebar\";\n// Import layout event factory for typed events\nimport { LayoutEventFactory } from \"../contexts/LayoutEventFactory\";\n// Import hotkey interfaces\nimport {\n  ChainHotkeyProvider,\n  ChainHotkeyHandler,\n  HotkeyExecutionContext,\n} from \"../hotkeys/HotkeyChainSystem\";\nimport { ComponentStatus, ComponentWithStatus } from \"../interfaces/ComponentStatus\";\nimport { LoggerFactory } from \"../logging/LoggerFactory\";\nimport { Logger } from \"../logging/Logger\";\n\nexport class SidebarComponent implements Sidebar, ChainHotkeyProvider, ComponentWithStatus {\n  private sidebar: HTMLElement | null = null;\n  private isInitialized: boolean = false;\n  private navigationItems: NavigationItem[] = [];\n  private compactMode: boolean = false;\n  private compactModeListeners: Array<(isCompact: boolean) => void> = [];\n  private layoutContext: LayoutContext;\n  private logger: Logger;\n  private toggleCompactModeHandler?: (compactMode: boolean) => void;\n  private chainProviderUnsubscriber: (() => void) | null = null;\n  private initTime: number | null = null;\n  private navigationUpdateCount: number = 0;\n  private compactModeToggleCount: number = 0;\n  private mobileMenuToggleCount: number = 0;\n  private lastActionTime: number | null = null;\n  private domEventListenerCount: number = 0;\n\n  // Configuration\n  private config: Required<SidebarConfig>;\n\n  constructor(config: SidebarConfig = {}, layoutContext?: LayoutContext) {\n    // Apply configuration with hardcoded defaults\n    this.config = {\n      defaultWidth: config.defaultWidth ?? 280,\n      compactWidth: config.compactWidth ?? 80,\n      footer: {\n        text: config.footer?.text ?? \"© 2025 Opinion\",\n        showFooter: config.footer?.showFooter ?? true,\n      },\n    };\n\n    this.logger = LoggerFactory.getInstance().getLogger('SidebarComponent');\n    this.logger.info(\"Sidebar - Creating sidebar with config:\", this.config);\n\n    // Use provided LayoutContext or fallback to singleton (for backwards compatibility)\n    this.layoutContext = layoutContext || getLayoutContext();\n    this.setupDefaultNavigation();\n  }\n\n  public isVisible(): boolean {\n    return !this.layoutContext.isLayoutMobile() || this.isLocked();\n  }\n  /**\n   * Set the toggle compact mode handler\n   */\n  public setToggleCompactModeHandler(\n    handler?: (compactMode: boolean) => void,\n  ): void {\n    this.toggleCompactModeHandler = handler;\n  }\n\n  /**\n   * Get sidebar configuration with width settings\n   */\n  public getConfig(): Required<SidebarConfig> {\n    return { ...this.config };\n  }\n\n  /**\n   * Initialize the sidebar\n   */\n  async init(): Promise<void> {\n    this.logger.info(\"Sidebar - Initializing...\");\n\n    if (this.isInitialized) {\n      this.logger.warn(\"Sidebar - Already initialized\");\n      return;\n    }\n\n    // Create the sidebar structure\n    this.createSidebar();\n\n    // Setup basic event listeners\n    this.setupEventListeners();\n\n    // Setup layout mode subscriptions\n    this.setupLayoutModeSubscriptions();\n\n    // Initialize based on current layout mode (no events, just read state)\n    this.initializeFromLayoutMode();\n\n    // Register the sidebar with the layout context\n    this.layoutContext.registerSidebar(this);\n    \n    // Register as chain hotkey provider for mobile ESC handling\n    this.chainProviderUnsubscriber = this.layoutContext.registerChainProvider(this);\n\n    this.initTime = Date.now();\n    this.isInitialized = true;\n    this.logger.info(\"Sidebar - Ready ✅\");\n  }\n\n  /**\n   * Setup default navigation items with captions\n   */\n  private setupDefaultNavigation(): void {\n    this.navigationItems = [\n      {\n        id: \"dashboard\",\n        text: \"Dashboard\",\n        icon: \"dashboard\",\n        href: \"/dashboard\",\n        caption: \"View analytics, reports and key metrics\",\n        active: false,\n      },\n      {\n        id: \"surveys\",\n        text: \"Surveys\",\n        icon: \"poll\",\n        href: \"/surveys\",\n        caption: \"Create and manage survey questionnaires\",\n      },\n      {\n        id: \"debug\",\n        text: \"Debug\",\n        icon: \"bug_report\",\n        href: \"/\",\n        caption: \"Development tools and troubleshooting\",\n        active: false, // Will be set active by router when on root path\n      },\n    ];\n  }\n\n  /**\n   * Use existing sidebar element and populate content\n   */\n  private createSidebar(): void {\n    // Find existing sidebar element\n    this.sidebar = document.getElementById(\"app-sidebar\");\n\n    if (!this.sidebar) {\n      // Wait a bit and try again in case DOM is still loading\n      //setTimeout(() => {\n      this.sidebar = document.getElementById(\"app-sidebar\");\n      if (!this.sidebar) {\n        this.logger.error(\n          \"Sidebar: #app-sidebar element not found in DOM. Available elements:\",\n          Array.from(document.querySelectorAll(\"[id]\")).map((el) => el.id),\n        );\n        throw new Error(\n          \"Sidebar: Could not find existing #app-sidebar element\",\n        );\n      }\n      this.finalizeSidebarCreation();\n      //}, 100);\n      return;\n    }\n\n    this.logger.info(\"Sidebar - Using existing element\");\n\n    this.finalizeSidebarCreation();\n  }\n\n  /**\n   * Finalize sidebar creation after element is found\n   */\n  private finalizeSidebarCreation(): void {\n    // Populate the existing structure with dynamic content\n    this.populateContent();\n\n    this.logger.info(\"Sidebar - Content populated successfully\");\n  }\n\n  /**\n   * Populate sidebar content into existing HTML structure\n   */\n  private populateContent(): void {\n    if (!this.sidebar) return;\n\n    // Update brand title link and add compact toggle button + mobile close button\n    const sidebarHeader = this.sidebar.querySelector(\".sidebar-header\");\n    if (sidebarHeader) {\n      sidebarHeader.innerHTML = `\n        <div class=\"sidebar-brand\">\n          <a href=\"${getFullPath('/')}\" class=\"brand-title-link\">\n            <img src=\"/inqwise-opinion.svg\" alt=\"Opinion\" class=\"brand-logo-sidebar\" width=\"24\" height=\"24\">\n            <h1 class=\"brand-title\">Opinion</h1>\n          </a>\n        </div>\n        <div class=\"sidebar-controls\">\n          <!-- Desktop/Tablet compact toggle button -->\n          <button class=\"compact-toggle-btn\"\n                  type=\"button\"\n                  aria-label=\"${this.compactMode ? \"Expand sidebar\" : \"Compact sidebar\"}\"\n                  data-compact=\"${this.compactMode}\">\n            <span class=\"material-icons compact-icon\">\n              ${this.compactMode ? \"keyboard_double_arrow_right\" : \"keyboard_double_arrow_left\"}\n            </span>\n          </button>\n\n          <!-- Mobile close button -->\n          <button class=\"mobile-close-btn\"\n                  type=\"button\"\n                  aria-label=\"Close menu\">\n            <span class=\"material-icons\" style=\"font-size: 20px;\">close</span>\n          </button>\n        </div>\n      `;\n    }\n\n    // Populate navigation\n    const navigationContainer = this.sidebar.querySelector(\n      \".sidebar-navigation\",\n    );\n    if (navigationContainer) {\n      navigationContainer.innerHTML = `\n        <ul class=\"nav-list\" role=\"menubar\">\n          ${this.renderNavigationItems(this.navigationItems)}\n        </ul>\n      `;\n    }\n\n    // Populate footer\n    const footerContainer = this.sidebar.querySelector(\".sidebar-footer\");\n    if (footerContainer && this.config.footer.showFooter) {\n      footerContainer.innerHTML = `\n        <p class=\"copyright-text\">${this.config.footer.text}</p>\n      `;\n    } else if (footerContainer && !this.config.footer.showFooter) {\n      (footerContainer as HTMLElement).style.display = \"none\";\n    }\n  }\n\n  /**\n   * Render navigation items HTML\n   */\n  private renderNavigationItems(items: NavigationItem[]): string {\n    return items\n      .map((item) => {\n        const isActive = item.active ? \"nav-link-active\" : \"\";\n        const ariaCurrent = item.active ? 'aria-current=\"page\"' : \"\";\n        const badge = item.badge\n          ? `<span class=\"nav-badge\">${item.badge}</span>`\n          : \"\";\n\n        if (item.expandable && item.children) {\n          return `\n          <li class=\"nav-item nav-item-expandable\">\n            <button class=\"nav-link nav-link-expandable ${isActive}\"\n                    data-nav-id=\"${item.id}\"\n                    data-expandable=\"true\"\n                    aria-expanded=\"${item.expanded ? \"true\" : \"false\"}\"\n                    role=\"menuitem\"\n                    tabindex=\"0\">\n              <span class=\"nav-icon material-icons\" data-icon=\"${item.icon}\">${item.icon}</span>\n              <span class=\"nav-text\">${item.text}</span>\n              ${badge}\n              <span class=\"nav-arrow material-icons\">expand_more</span>\n            </button>\n            <ul class=\"nav-submenu\" aria-expanded=\"${item.expanded ? \"true\" : \"false\"}\" role=\"menu\">\n              ${item.children\n                .map((child) => {\n                  return `\n                  <li class=\"nav-subitem\">\n                    <a class=\"nav-sublink ${child.active ? \"nav-sublink-active\" : \"\"}\"\n                       href=\"${getFullPath(child.href)}\"\n                       data-nav-id=\"${child.id}\"\n                       role=\"menuitem\"\n                       ${child.active ? 'aria-current=\"page\"' : \"\"}>\n                      <span class=\"nav-subicon material-icons\">${child.icon}</span>\n                      <span class=\"nav-subtext\">${child.text}</span>\n                    </a>\n                  </li>\n                `;\n                })\n                .join(\"\")}\n            </ul>\n          </li>\n        `;\n        } else {\n          const captionHtml = item.caption\n            ? `<span class=\"nav-caption\">${item.caption}</span>`\n            : \"\";\n\n          return `\n          <li class=\"nav-item\">\n            <a class=\"nav-link ${isActive}\"\n               href=\"${getFullPath(item.href)}\"\n               data-nav-id=\"${item.id}\"\n               role=\"menuitem\"\n               ${ariaCurrent}\n               tabindex=\"0\">\n              <span class=\"nav-icon material-icons\" data-icon=\"${item.icon}\">${item.icon}</span>\n              <div class=\"nav-content\">\n                <span class=\"nav-text\">${item.text}</span>\n                ${captionHtml}\n              </div>\n              ${badge}\n            </a>\n          </li>\n        `;\n        }\n      })\n      .join(\"\");\n  }\n\n  /**\n   * Setup event listeners\n   */\n  private setupEventListeners(): void {\n    if (!this.sidebar) return;\n    \n    this.domEventListenerCount = 0;\n\n    // Handle expandable navigation items\n    this.sidebar.addEventListener(\"click\", (event) => {\n      const target = event.target as HTMLElement;\n      const expandableButton = target.closest(\n        '[data-expandable=\"true\"]',\n      ) as HTMLElement;\n\n      if (expandableButton) {\n        event.preventDefault();\n        this.toggleExpandable(expandableButton);\n      }\n    });\n\n    // Handle compact toggle button clicks\n    this.sidebar.addEventListener(\"click\", (event) => {\n      const target = event.target as HTMLElement;\n      const toggleButton = target.closest(\n        \".compact-toggle-btn\",\n      ) as HTMLButtonElement;\n\n      if (toggleButton) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Check if sidebar is locked in expanded mode\n        if (this.isLocked() && !this.compactMode) {\n          this.logger.info(\n            \"Sidebar - Toggle blocked: sidebar is locked in expanded mode\",\n          );\n          return;\n        }\n\n        this.toggleCompactMode();\n        return;\n      }\n    });\n\n    // Handle mobile close button clicks\n    this.sidebar.addEventListener(\"click\", (event) => {\n      const target = event.target as HTMLElement;\n      const closeButton = target.closest(\n        \".mobile-close-btn\",\n      ) as HTMLButtonElement;\n\n      if (closeButton) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.logger.info(\"📱 Sidebar - Mobile close button clicked\");\n        this.hideMobileMenu(\"close-button\");\n        return;\n      }\n    });\n\n    // Navigation clicks are now handled globally by LinkInterceptionService\n    // Just update active state when navigation occurs\n    this.sidebar.addEventListener(\"click\", (event) => {\n      const target = event.target as HTMLElement;\n      const navLink = target.closest(\"a[href]\") as HTMLAnchorElement;\n\n      if (navLink && navLink.href.startsWith(window.location.origin)) {\n        // LinkInterceptionService will handle the navigation\n        // We just need to update the active state\n        this.logger.info(\"Sidebar - Navigation link clicked:\", navLink.href);\n        this.setActiveItem(navLink.getAttribute(\"data-nav-id\") || \"\");\n      }\n    });\n    \n    // Track DOM event listener count (4 click listeners on sidebar)\n    this.domEventListenerCount = 4;\n  }\n\n  /**\n   * Toggle expandable navigation item\n   */\n  private toggleExpandable(button: HTMLElement): void {\n    const navId = button.getAttribute(\"data-nav-id\");\n    const isExpanded = button.getAttribute(\"aria-expanded\") === \"true\";\n    const submenu = button.nextElementSibling as HTMLElement;\n\n    if (submenu) {\n      button.setAttribute(\"aria-expanded\", (!isExpanded).toString());\n      submenu.setAttribute(\"aria-expanded\", (!isExpanded).toString());\n\n      // Update the navigation item state\n      const navItem = this.navigationItems.find((item) => item.id === navId);\n      if (navItem) {\n        navItem.expanded = !isExpanded;\n      }\n\n      this.logger.info(`Sidebar - Toggled ${navId} expandable: ${!isExpanded}`);\n    }\n  }\n\n  /**\n   * Set active navigation item\n   */\n  private setActiveItem(navId: string): void {\n    if (!this.sidebar) return;\n\n    // Remove all active classes\n    this.sidebar\n      .querySelectorAll(\".nav-link-active, .nav-sublink-active\")\n      .forEach((el) => {\n        el.classList.remove(\"nav-link-active\", \"nav-sublink-active\");\n        el.removeAttribute(\"aria-current\");\n      });\n\n    // Find and activate the clicked item\n    const targetLink = this.sidebar.querySelector(`[data-nav-id=\"${navId}\"]`);\n    if (targetLink) {\n      if (targetLink.classList.contains(\"nav-link\")) {\n        targetLink.classList.add(\"nav-link-active\");\n        targetLink.setAttribute(\"aria-current\", \"page\");\n      } else if (targetLink.classList.contains(\"nav-sublink\")) {\n        targetLink.classList.add(\"nav-sublink-active\");\n        targetLink.setAttribute(\"aria-current\", \"page\");\n      }\n\n      // Update navigation state\n      this.navigationItems.forEach((item) => {\n        item.active = item.id === navId;\n        if (item.children) {\n          item.children.forEach((child) => {\n            child.active = child.id === navId;\n          });\n        }\n      });\n\n      this.logger.info(`Sidebar - Set active item: ${navId}`);\n    }\n  }\n\n  /**\n   * Update navigation items\n   */\n  public updateNavigation(items: NavigationItem[]): void {\n    this.navigationItems = items;\n\n    if (this.sidebar && this.isInitialized) {\n      const navList = this.sidebar.querySelector(\".nav-list\");\n      if (navList) {\n        navList.innerHTML = this.renderNavigationItems(this.navigationItems);\n        this.navigationUpdateCount++;\n        this.lastActionTime = Date.now();\n        this.logger.info(\"Sidebar - Navigation updated\");\n      }\n    }\n  }\n\n  /**\n   * Set active page programmatically\n   */\n  public setActivePage(navId: string): void {\n    if (!navId) {\n      throw new Error(\"SidebarComponent.setActivePage: navId parameter is required\");\n    }\n    \n    if (!this.isInitialized) {\n      throw new Error(\"SidebarComponent.setActivePage: Sidebar not initialized. Call init() first.\");\n    }\n    \n    this.logger.info(`📍 Sidebar - setActivePage called with: ${navId}`);\n    this.setActiveItem(navId);\n  }\n\n  /**\n   * Update sidebar footer text\n   */\n  public updateFooterText(text: string): void {\n    this.config.footer.text = text;\n\n    if (this.sidebar && this.isInitialized) {\n      const footerContainer = this.sidebar.querySelector(\".sidebar-footer\");\n      const copyrightText = footerContainer?.querySelector(\".copyright-text\");\n\n      if (copyrightText && this.config.footer.showFooter) {\n        copyrightText.textContent = text;\n        this.logger.info(`Sidebar - Footer text updated to: \"${text}\"`);\n      }\n    }\n  }\n\n  /**\n   * Show or hide sidebar footer\n   */\n  public setFooterVisibility(show: boolean): void {\n    this.config.footer.showFooter = show;\n\n    if (this.sidebar && this.isInitialized) {\n      const footerContainer = this.sidebar.querySelector(\".sidebar-footer\");\n\n      if (footerContainer) {\n        const footerEl = footerContainer as HTMLElement;\n        if (show) {\n          footerEl.style.display = \"\";\n          footerEl.innerHTML = `\n            <p class=\"copyright-text\">${this.config.footer.text}</p>\n          `;\n          this.logger.info(\"Sidebar - Footer shown\");\n        } else {\n          footerEl.style.display = \"none\";\n          this.logger.info(\"Sidebar - Footer hidden\");\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if sidebar is in compact mode\n   */\n  public isCompactMode(): boolean {\n    return this.compactMode;\n  }\n\n  /**\n   * Set compact mode state\n   */\n  private setCompactMode(compact: boolean): void {\n    const previousCompactMode = this.compactMode;\n    \n    // Block compact mode on mobile - mobile uses overlay mode instead\n    if (this.layoutContext.isLayoutMobile()) {\n      this.logger.info(\n        \"📱 Sidebar - Compact mode blocked on mobile (uses overlay mode instead)\",\n      );\n      \n      // Emit blocked event\n      this.emitCompactModeChangeEvent(false, previousCompactMode, \"mobile-layout\");\n      return;\n    }\n    \n    // Check if locked in expanded mode\n    if (compact && this.isLocked()) {\n      this.logger.info(\n        \"🔒 Sidebar - Compact mode blocked (sidebar is locked in expanded mode)\",\n      );\n      \n      // Emit blocked event\n      this.emitCompactModeChangeEvent(false, previousCompactMode, \"sidebar-locked\");\n      return;\n    }\n\n    if (this.compactMode !== compact) {\n      // Log the dimension change start\n      this.logger.info(\n        `🔄 Sidebar - Compact mode changing: ${this.compactMode ? \"compact\" : \"expanded\"} → ${compact ? \"compact\" : \"expanded\"}`,\n      );\n\n      this.compactMode = compact;\n      this.compactModeToggleCount++;\n      this.lastActionTime = Date.now();\n\n      // Update sidebar CSS class\n      if (this.sidebar) {\n        if (compact) {\n          this.sidebar.classList.add(\"sidebar-compact\");\n        } else {\n          this.sidebar.classList.remove(\"sidebar-compact\");\n        }\n      }\n\n      // Update app layout for grid adjustments\n      const appLayout = document.querySelector(\".app-layout\");\n      if (appLayout) {\n        if (compact) {\n          appLayout.classList.add(\"sidebar-compact\");\n        } else {\n          appLayout.classList.remove(\"sidebar-compact\");\n        }\n      }\n\n      // Update toggle button\n      this.updateCompactToggleButton();\n\n      // Emit successful compact mode change event\n      this.emitCompactModeChangeEvent(compact, previousCompactMode);\n\n      // Notify local listeners of the change\n      this.notifyCompactModeChange(compact);\n\n      this.logger.info(\n        `✅ Sidebar - Compact mode ${compact ? \"enabled\" : \"disabled\"}`,\n      );\n    }\n  }\n\n  /**\n   * Subscribe to compact mode changes\n   */\n  public onCompactModeChange(\n    callback: (isCompact: boolean) => void,\n  ): () => void {\n    this.compactModeListeners.push(callback);\n\n    // Return unsubscribe function\n    return () => {\n      const index = this.compactModeListeners.indexOf(callback);\n      if (index > -1) {\n        this.compactModeListeners.splice(index, 1);\n      }\n    };\n  }\n\n  /**\n   * Notify all listeners of compact mode changes\n   */\n  private notifyCompactModeChange(isCompact: boolean): void {\n    this.compactModeListeners.forEach((listener) => {\n      try {\n        listener(isCompact);\n      } catch (error) {\n        this.logger.error(\"Sidebar - Error in compact mode change handler:\", error);\n      }\n    });\n  }\n\n  /**\n   * Emit typed compact mode change event to LayoutContext\n   */\n  private emitCompactModeChangeEvent(\n    compactMode: boolean,\n    previousCompactMode: boolean,\n    blockedReason?: \"mobile-layout\" | \"sidebar-locked\",\n  ): void {\n    // Create typed event using the factory\n    const event = LayoutEventFactory.createSidebarCompactModeChangeEvent(\n      compactMode,\n      previousCompactMode,\n      blockedReason,\n    );\n\n    // Emit the event through the LayoutContext\n    this.layoutContext.emit(\"sidebar-compact-mode-change\", event.data);\n\n    this.logger.info(\n      `📡 Sidebar - Emitted compact mode change event: ${previousCompactMode} → ${compactMode}${blockedReason ? ` (blocked: ${blockedReason})` : \"\"}`,\n    );\n  }\n\n  /**\n   * Emit typed mobile menu mode change event to LayoutContext\n   */\n  private emitMobileMenuModeChangeEvent(\n    isVisible: boolean,\n    previousVisibility: boolean,\n    trigger: \"close-button\" | \"backdrop\" | \"menu-button\" | \"programmatic\",\n  ): void {\n    // Create typed event using the factory\n    const event = LayoutEventFactory.createMobileMenuModeChangeEvent(\n      isVisible,\n      previousVisibility,\n      trigger\n    );\n\n    this.layoutContext.emit(\"mobile-menu-mode-change\", event.data);\n\n    this.logger.info(\n      `📡 Sidebar - Emitted mobile menu mode change event: ${previousVisibility} → ${isVisible} (via ${trigger})`,\n    );\n  }\n\n  /**\n   * Toggle compact mode\n   */\n  public toggleCompactMode(): void {\n    this.setCompactMode(!this.compactMode);\n  }\n\n  /**\n   * Expand sidebar (ensure it's not in compact mode)\n   */\n  public expandSidebar(): void {\n    if (this.compactMode) {\n      this.setCompactMode(false);\n      this.logger.info(\"Sidebar - Expanded to full width\");\n    } else {\n      this.logger.info(\"Sidebar - Already expanded\");\n    }\n  }\n\n  /**\n   * Compact sidebar (ensure it's in compact mode)\n   */\n  public compactSidebar(): void {\n    if (!this.compactMode) {\n      this.setCompactMode(true);\n      this.logger.info(\"Sidebar - Compacted to narrow width\");\n    } else {\n      this.logger.info(\"Sidebar - Already compact\");\n    }\n  }\n\n  /**\n   * Lock sidebar in expanded mode (prevents auto-compact)\n   * This is useful when you want to ensure sidebar stays expanded\n   */\n  public lockExpanded(): void {\n    this.expandSidebar();\n    // Add a data attribute to indicate locked state\n    if (this.sidebar) {\n      this.sidebar.setAttribute(\"data-locked-expanded\", \"true\");\n      this.logger.info(\"Sidebar - Locked in expanded mode\");\n    }\n  }\n\n  /**\n   * Unlock sidebar (allows normal compact/expand behavior)\n   */\n  public unlockSidebar(): void {\n    if (this.sidebar) {\n      this.sidebar.removeAttribute(\"data-locked-expanded\");\n      this.logger.info(\"Sidebar - Unlocked, normal toggle behavior restored\");\n    }\n  }\n\n  /**\n   * Check if sidebar is locked in expanded mode\n   */\n  public isLocked(): boolean {\n    return this.sidebar?.hasAttribute(\"data-locked-expanded\") ?? false;\n  }\n\n  /**\n   * Update the compact toggle button appearance\n   */\n  private updateCompactToggleButton(): void {\n    if (!this.sidebar) return;\n\n    const toggleButton = this.sidebar.querySelector(\n      \".compact-toggle-btn\",\n    ) as HTMLButtonElement;\n    const toggleIcon = this.sidebar.querySelector(\n      \".compact-icon\",\n    ) as HTMLElement;\n\n    if (toggleButton && toggleIcon) {\n      // Update button attributes\n      toggleButton.setAttribute(\"data-compact\", this.compactMode.toString());\n      toggleButton.setAttribute(\n        \"title\",\n        this.compactMode ? \"Expand sidebar\" : \"Compact sidebar\",\n      );\n      toggleButton.setAttribute(\n        \"aria-label\",\n        this.compactMode ? \"Expand sidebar\" : \"Compact sidebar\",\n      );\n\n      // Update icon\n      toggleIcon.textContent = this.compactMode\n        ? \"keyboard_double_arrow_right\"\n        : \"keyboard_double_arrow_left\";\n\n      this.logger.info(\n        `Sidebar - Toggle button updated for ${this.compactMode ? \"compact\" : \"normal\"} mode`,\n      );\n    }\n  }\n\n  /**\n   * Wait for CSS transition completion before publishing dimensions\n   */\n  private waitForTransitionAndPublish(): void {\n    if (!this.sidebar) {\n      return;\n    }\n\n    // Check if sidebar has width transition defined\n    const computedStyle = getComputedStyle(this.sidebar);\n    const transitionProperty = computedStyle.transitionProperty;\n    const transitionDuration = computedStyle.transitionDuration;\n\n    // If width transitions are defined and duration > 0\n    if (\n      transitionProperty.includes(\"width\") &&\n      parseFloat(transitionDuration) > 0\n    ) {\n      this.logger.debug(\n        `   ⏳ Waiting for sidebar width transition (${transitionDuration}) to complete...`,\n      );\n\n      // Listen for transitionend event\n      const handleTransitionEnd = (event: TransitionEvent) => {\n        // Only handle width transitions on the sidebar itself\n        if (event.target === this.sidebar && event.propertyName === \"width\") {\n          this.logger.debug(\"   ✅ Sidebar width transition completed\");\n          this.sidebar!.removeEventListener(\n            \"transitionend\",\n            handleTransitionEnd,\n          );\n        }\n      };\n\n      // Add event listener\n      this.sidebar.addEventListener(\"transitionend\", handleTransitionEnd);\n\n      // Fallback timeout in case transitionend doesn't fire (shouldn't happen with proper CSS)\n      setTimeout(\n        () => {\n          this.sidebar!.removeEventListener(\n            \"transitionend\",\n            handleTransitionEnd,\n          );\n          this.logger.warn(\n            \"   ⚠️ Fallback: Publishing dimensions after transition timeout\",\n          );\n        },\n        parseFloat(transitionDuration) * 1000 + 100,\n      ); // Add 100ms buffer\n    } else {\n      // No transition defined, publish immediately\n      this.logger.debug(\n        \"   ⚡ No width transition defined, publishing dimensions immediately\",\n      );\n    }\n  }\n\n  /**\n   * Show mobile sidebar (overlay mode)\n   */\n  public showMobileMenu(trigger: \"close-button\" | \"backdrop\" | \"menu-button\" | \"programmatic\" = \"programmatic\"): void {\n    if (!this.sidebar) {\n      this.logger.warn(\n        \"❌ Sidebar - Cannot show mobile menu: sidebar element not found\",\n      );\n      return;\n    }\n\n    const isMobile = this.layoutContext.isLayoutMobile();\n    if (!isMobile) {\n      this.logger.warn(\n        \"⚠️ Sidebar - showMobileMenu called but not in mobile mode\",\n      );\n      return;\n    }\n\n    const isCurrentlyVisible = !this.sidebar.classList.contains(\"sidebar-hidden\");\n    if (isCurrentlyVisible) {\n      this.logger.info(\"📱 Sidebar - Mobile menu already visible\");\n      return;\n    }\n\n    // Emit mobile menu mode change event\n    this.emitMobileMenuModeChangeEvent(true, false, trigger);\n    this.mobileMenuToggleCount++;\n    this.lastActionTime = Date.now();\n\n    // Show mobile sidebar overlay\n    this.logger.info(\"📱 Sidebar - Showing mobile sidebar overlay\");\n    this.sidebar.classList.remove(\"sidebar-hidden\");\n    this.sidebar.classList.add(\"sidebar-mobile-visible\");\n\n    // Remove inline display:none that was set by responsive mode\n    this.sidebar.style.display = \"\";\n    this.logger.info(\"📱 Sidebar - Removed inline display:none style\");\n    \n    // ESC key handling now provided via ChainHotkeyProvider interface\n\n    // Add body class for blur effect\n    document.body.classList.add(\"sidebar-mobile-open\");\n\n    // Add backdrop for mobile overlay\n    this.createMobileBackdrop();\n\n    this.logger.info(\"✅ Sidebar - Mobile menu shown\");\n  }\n\n  /**\n   * Hide mobile sidebar (overlay mode)\n   */\n  public hideMobileMenu(trigger: \"close-button\" | \"backdrop\" | \"menu-button\" | \"programmatic\" = \"programmatic\"): void {\n    if (!this.sidebar) {\n      this.logger.warn(\n        \"❌ Sidebar - Cannot hide mobile menu: sidebar element not found\",\n      );\n      return;\n    }\n\n    const isMobile = this.layoutContext.isLayoutMobile();\n    if (!isMobile) {\n      this.logger.warn(\n        \"⚠️ Sidebar - hideMobileMenu called but not in mobile mode\",\n      );\n      return;\n    }\n\n    const isCurrentlyVisible = !this.sidebar.classList.contains(\"sidebar-hidden\");\n    if (!isCurrentlyVisible) {\n      this.logger.info(\"📱 Sidebar - Mobile menu already hidden\");\n      return;\n    }\n\n    // Emit mobile menu mode change event\n    this.emitMobileMenuModeChangeEvent(false, true, trigger);\n    this.mobileMenuToggleCount++;\n    this.lastActionTime = Date.now();\n\n    // Hide mobile sidebar overlay\n    this.logger.info(\"📱 Sidebar - Hiding mobile sidebar overlay\");\n    this.sidebar.classList.add(\"sidebar-hidden\");\n    this.sidebar.classList.remove(\"sidebar-mobile-visible\");\n\n    // Remove body class for blur effect\n    document.body.classList.remove(\"sidebar-mobile-open\");\n\n    // Remove backdrop if it exists\n    const backdrop = document.querySelector(\".mobile-sidebar-backdrop\");\n    if (backdrop) {\n      backdrop.classList.remove(\"show\");\n      backdrop.remove();\n    }\n    \n    // ESC key handling automatically disabled when mobile menu is hidden\n\n    this.logger.info(\"✅ Sidebar - Mobile menu hidden\");\n  }\n\n  /**\n   * Toggle mobile sidebar visibility (overlay mode)\n   */\n  public toggleMobileVisibility(trigger: \"close-button\" | \"backdrop\" | \"menu-button\" | \"programmatic\" = \"programmatic\"): void {\n    if (!this.sidebar) {\n      this.logger.warn(\n        \"❌ Sidebar - Cannot toggle mobile visibility: sidebar element not found\",\n      );\n      return;\n    }\n\n    // Use layout context to check if we're in mobile mode\n    const isMobile = this.layoutContext.isLayoutMobile();\n    if (!isMobile) {\n      this.logger.warn(\n        \"⚠️ Sidebar - toggleMobileVisibility called but not in mobile mode\",\n      );\n      return;\n    }\n\n    const isCurrentlyVisible =\n      !this.sidebar.classList.contains(\"sidebar-hidden\");\n    const newVisibility = !isCurrentlyVisible;\n    \n    this.logger.info(\n      `📱 Sidebar - Toggling mobile visibility: ${isCurrentlyVisible} → ${newVisibility}`,\n    );\n    this.logger.debug(`📱 Sidebar - Current classes: ${this.sidebar.className}`);\n\n    // Emit mobile menu mode change event before changing state\n    this.emitMobileMenuModeChangeEvent(\n      newVisibility,\n      isCurrentlyVisible,\n      trigger,\n    );\n\n    if (isCurrentlyVisible) {\n      // Hide mobile sidebar overlay\n      this.logger.info(\"📱 Sidebar - Hiding mobile sidebar overlay\");\n      this.sidebar.classList.add(\"sidebar-hidden\");\n      this.sidebar.classList.remove(\"sidebar-mobile-visible\");\n\n      // Remove body class for blur effect\n      document.body.classList.remove(\"sidebar-mobile-open\");\n\n      // Remove backdrop if it exists\n      const backdrop = document.querySelector(\".mobile-sidebar-backdrop\");\n      if (backdrop) {\n        backdrop.classList.remove(\"show\");\n        // Remove after transition\n        //setTimeout(() => {\n        backdrop.remove();\n        //}, 300);\n      }\n      \n      // ESC key handling automatically disabled when mobile menu is hidden\n    } else {\n      // Show mobile sidebar overlay\n      this.logger.info(\"📱 Sidebar - Showing mobile sidebar overlay\");\n      this.sidebar.classList.remove(\"sidebar-hidden\");\n      this.sidebar.classList.add(\"sidebar-mobile-visible\");\n\n      // CRITICAL: Remove inline display:none that was set by responsive mode\n      this.sidebar.style.display = \"\";\n      this.logger.info(\"📱 Sidebar - Removed inline display:none style\");\n\n      // Add body class for blur effect\n      document.body.classList.add(\"sidebar-mobile-open\");\n\n      // Add backdrop for mobile overlay\n      this.createMobileBackdrop();\n      \n      // ESC key handling provided via ChainHotkeyProvider interface\n\n      // Debug: Log the sidebar's computed styles\n      const computedStyle = getComputedStyle(this.sidebar);\n      this.logger.debug(\"📱 Sidebar - After show - computed styles:\");\n      this.logger.debug(`   display: ${computedStyle.display}`);\n      this.logger.debug(`   visibility: ${computedStyle.visibility}`);\n      this.logger.debug(`   opacity: ${computedStyle.opacity}`);\n      this.logger.debug(`   transform: ${computedStyle.transform}`);\n      this.logger.debug(`   z-index: ${computedStyle.zIndex}`);\n    }\n\n    this.logger.info(\n      `✅ Sidebar - Mobile visibility toggled to: ${newVisibility}`,\n    );\n    this.logger.debug(`📱 Sidebar - Final classes: ${this.sidebar.className}`);\n  }\n\n  /**\n   * Create mobile backdrop for overlay sidebar\n   */\n  private createMobileBackdrop(): void {\n    // Remove existing backdrop\n    const existingBackdrop = document.querySelector(\".mobile-sidebar-backdrop\");\n    if (existingBackdrop) {\n      existingBackdrop.remove();\n    }\n\n    // Create new backdrop with blur effects\n    const backdrop = document.createElement(\"div\");\n    backdrop.className = \"mobile-sidebar-backdrop\";\n\n    // Add backdrop to document body\n    document.body.appendChild(backdrop);\n\n    // Animate backdrop in with show class\n    requestAnimationFrame(() => {\n      backdrop.classList.add(\"show\");\n    });\n\n    // Close sidebar when backdrop is clicked\n    backdrop.addEventListener(\"click\", () => {\n      this.hideMobileMenu(\"backdrop\");\n    });\n\n    this.logger.info(\"📱 Sidebar - Mobile backdrop created with blur effects\");\n  }\n\n  /**\n   * Get current sidebar dimensions for layout context\n   *\n   * IMPORTANT: This method must not call layoutContext.getLayoutMode() to avoid circular dependency!\n   */\n  public getCurrentDimensions() {\n    if (!this.sidebar) return null;\n\n    // Use direct viewport calculation instead of layoutContext to avoid circular dependency\n    const isMobile = this.layoutContext.isLayoutMobile();\n    const isVisible = !isMobile;\n\n    let width = 0;\n    if (isVisible) {\n      // Use configured widths from sidebar config\n      width = this.compactMode\n        ? this.config.compactWidth\n        : this.config.defaultWidth;\n    }\n\n    return {\n      width,\n      isVisible,\n    };\n  }\n\n  /**\n   * Get current sidebar dimensions (ISidebar interface implementation)\n   * Returns sidebar dimensions following the Dimensions interface\n   *\n   * IMPORTANT: This method must not call layoutContext.getLayoutMode() to avoid circular dependency!\n   * The LayoutContext calls this method to calculate layout mode, so we can't call back.\n   */\n  public getDimensions(): Dimensions {\n    // Calculate dimensions based on current viewport and sidebar state\n    // WITHOUT calling layoutContext to avoid circular dependency\n    const isMobile = window.innerWidth <= 768;\n\n    // Determine visibility based on viewport (mobile hides sidebar by default)\n    const isVisible = !isMobile;\n\n    // Calculate dimensions based on current state\n    let width = 0;\n\n    if (isVisible) {\n      // Use configured widths from sidebar config\n      width = this.compactMode\n        ? this.config.compactWidth\n        : this.config.defaultWidth;\n    }\n\n    return {\n      width,\n      isVisible,\n    };\n  }\n\n  /**\n   * Setup layout mode subscriptions\n   */\n  private setupLayoutModeSubscriptions(): void {\n    this.logger.info(\"Sidebar - Setting up layout mode subscriptions...\");\n\n    // Subscribe to layout mode changes only (not viewport changes)\n    // Sidebar only cares about mode transitions (mobile ↔ tablet ↔ desktop), not pixel-level viewport changes\n    this.layoutContext.subscribe(\n      \"layout-mode-change\",\n      (event) => {\n        this.handleLayoutModeChange(event.data);\n      },\n    );\n\n    // Subscribe to mobile menu requests from other components (e.g., header)\n    this.layoutContext.subscribe(\n      \"mobile-menu-request\",\n      (event) => {\n        this.handleMobileMenuRequest(event.data);\n      },\n    );\n\n    // Subscribe to sidebar compact mode requests from other components (e.g., debug page)\n    this.layoutContext.subscribe(\n      \"sidebar-compact-request\",\n      (event) => {\n        this.handleSidebarCompactRequest(event.data);\n      },\n    );\n\n    this.logger.info(\"Sidebar - Layout mode, mobile menu, and compact mode request subscriptions setup complete\");\n  }\n\n  /**\n   * Initialize sidebar based on current layout mode\n   */\n  private initializeFromLayoutMode(): void {\n    const currentModeType = this.layoutContext.getModeType();\n    \n    this.logger.info(\"Sidebar - Initializing from current layout mode:\", currentModeType);\n    \n    this.updateSidebarForModeType(currentModeType);\n  }\n\n  /**\n   * Handle layout mode changes\n   */\n  private handleLayoutModeChange(eventData: any): void {\n    this.logger.info(`Sidebar - Layout mode changed to: ${eventData.modeType}`, eventData);\n    \n    // Clean up mobile overlay if transitioning FROM mobile mode\n    if (eventData.previousModeType === 'mobile' && eventData.modeType !== 'mobile') {\n      this.cleanupMobileOverlayState();\n    }\n    \n    // Update sidebar for new mode\n    this.updateSidebarForModeType(eventData.modeType);\n  }\n\n  /**\n   * Handle mobile menu requests from other components\n   */\n  private handleMobileMenuRequest(requestData: any): void {\n    this.logger.info(`Sidebar - Mobile menu request received:`, requestData);\n    \n    // Only handle mobile menu requests when in mobile mode\n    if (!this.layoutContext.isLayoutMobile()) {\n      this.logger.info(`Sidebar - Ignoring mobile menu request: not in mobile mode`);\n      return;\n    }\n    \n    const { requestedAction, trigger } = requestData;\n    \n    switch (requestedAction) {\n      case \"show\":\n        this.showMobileMenu(trigger);\n        break;\n      case \"hide\":\n        this.hideMobileMenu(trigger);\n        break;\n      case \"toggle\":\n        this.toggleMobileVisibility(trigger);\n        break;\n      default:\n        this.logger.warn(`Sidebar - Unknown mobile menu request action: ${requestedAction}`);\n    }\n  }\n\n  /**\n   * Handle sidebar compact mode requests from other components\n   */\n  private handleSidebarCompactRequest(requestData: any): void {\n    this.logger.info(`Sidebar - Sidebar compact request received:`, requestData);\n    \n    const { requestedAction } = requestData;\n    \n    switch (requestedAction) {\n      case \"show\":\n        // Show = expand (not compact)\n        this.expandSidebar();\n        break;\n      case \"hide\":\n        // Hide = compact\n        this.compactSidebar();\n        break;\n      case \"toggle\":\n        this.toggleCompactMode();\n        break;\n      default:\n        this.logger.warn(`Sidebar - Unknown compact mode request action: ${requestedAction}`);\n    }\n  }\n\n  /**\n   * Update sidebar visibility and style based on layout mode type\n   */\n  private updateSidebarForModeType(modeType: \"mobile\" | \"tablet\" | \"desktop\"): void {\n    if (!this.sidebar) return;\n\n    const isMobile = modeType === \"mobile\";\n    const isTablet = modeType === \"tablet\";\n    const isDesktop = modeType === \"desktop\";\n    const isVisible = !isMobile; // Hide on mobile, show on tablet/desktop\n    const canToggle = !isMobile; // Can toggle on tablet/desktop, not on mobile\n\n    this.logger.info(`Sidebar - Updating for ${modeType} mode:`);\n    this.logger.debug(`  - Visible: ${isVisible}`);\n    this.logger.debug(`  - Can Toggle: ${canToggle}`);\n\n    // Update sidebar visibility\n    if (isVisible) {\n      this.logger.debug(\"  ✅ Showing sidebar: display=flex, removing .sidebar-hidden\");\n      this.sidebar.style.display = \"flex\";\n      this.sidebar.classList.remove(\"sidebar-hidden\");\n    } else {\n      this.logger.debug(\"  ❌ Hiding sidebar: display=none, adding .sidebar-hidden\");\n      this.sidebar.style.display = \"none\";\n      this.sidebar.classList.add(\"sidebar-hidden\");\n    }\n\n    // Update toggle button availability\n    const toggleButton = this.sidebar.querySelector(\".compact-toggle-btn\") as HTMLButtonElement;\n    if (toggleButton) {\n      if (canToggle) {\n        toggleButton.style.display = \"flex\";\n        toggleButton.disabled = false;\n        toggleButton.classList.remove(\"disabled\");\n      } else {\n        toggleButton.style.display = \"none\";\n        toggleButton.disabled = true;\n        toggleButton.classList.add(\"disabled\");\n      }\n    }\n\n    // Update CSS classes for layout mode\n    this.sidebar.classList.toggle(\"sidebar-mobile\", isMobile);\n    this.sidebar.classList.toggle(\"sidebar-tablet\", isTablet);\n    this.sidebar.classList.toggle(\"sidebar-desktop\", isDesktop);\n\n    // Update CSS custom properties for dimensions\n    if (isVisible) {\n      const currentWidth = this.compactMode ? this.config.compactWidth : this.config.defaultWidth;\n      this.sidebar.style.setProperty(\"--sidebar-default-width\", `${this.config.defaultWidth}px`);\n      this.sidebar.style.setProperty(\"--sidebar-compact-width\", `${this.config.compactWidth}px`);\n      this.sidebar.style.setProperty(\"--sidebar-current-width\", `${currentWidth}px`);\n    }\n\n    this.logger.info(`Sidebar - Updated for ${modeType} mode complete`);\n  }\n\n  /**\n   * Clean up mobile overlay state when transitioning from mobile to desktop/tablet\n   */\n  private cleanupMobileOverlayState(): void {\n    if (!this.sidebar) return;\n    \n    this.logger.info(\"🧹 Sidebar - Cleaning up mobile overlay state\");\n    \n    // Remove mobile overlay classes\n    this.sidebar.classList.remove(\"sidebar-mobile-visible\");\n    document.body.classList.remove(\"sidebar-mobile-open\");\n    \n    // Remove backdrop if it exists\n    const backdrop = document.querySelector(\".mobile-sidebar-backdrop\");\n    if (backdrop) {\n      backdrop.remove();\n      this.logger.info(\"🧹 Sidebar - Removed mobile backdrop\");\n    }\n    \n    // Emit cleanup event for debugging\n    this.emitMobileMenuModeChangeEvent(false, true, \"programmatic\");\n    \n    this.logger.info(\"✅ Sidebar - Mobile overlay state cleaned up\");\n  }\n\n  // Legacy HotkeyProvider methods removed - using ChainHotkeyProvider only\n  \n  /**\n   * Check if mobile menu is currently visible\n   */\n  private isMobileMenuVisible(): boolean {\n    if (!this.sidebar) return false;\n    \n    return this.sidebar.classList.contains('sidebar-mobile-visible') && \n           !this.sidebar.classList.contains('sidebar-hidden');\n  }\n  \n  // Legacy hotkey provider methods removed - now using ChainHotkeyProvider directly\n  \n  // =================================================================================\n  // ChainHotkeyProvider Implementation (New System)\n  // =================================================================================\n  \n  /**\n   * Get provider identifier for chain hotkey system\n   */\n  getHotkeyProviderId(): string {\n    return 'MobileSidebar'; // Use semantic name for debugging\n  }\n  \n  /**\n   * Get provider priority - Mobile/overlay components get high priority (800)\n   */\n  getProviderPriority(): number {\n    return 800; // High priority for mobile overlay components\n  }\n  \n  /**\n   * Get chain hotkeys - only provide ESC when mobile menu is visible\n   */\n  getChainHotkeys(): Map<string, ChainHotkeyHandler> | null {\n    // Only provide ESC hotkey when in mobile mode and mobile menu is visible\n    const isMobile = this.layoutContext.isLayoutMobile();\n    const isMobileMenuVisible = this.isMobileMenuVisible();\n    \n    if (!isMobile || !isMobileMenuVisible) {\n      return null; // No hotkeys when not applicable\n    }\n    \n    const hotkeys = new Map<string, ChainHotkeyHandler>();\n    \n    hotkeys.set('Escape', {\n      key: 'Escape',\n      providerId: this.getHotkeyProviderId(),\n      enabled: true,\n      handler: (ctx: HotkeyExecutionContext) => {\n        this.handleEscapeKeyChain(ctx);\n      },\n      description: 'Close mobile sidebar menu via chain system',\n      priority: this.getProviderPriority(),\n      enable: () => { /* Mobile ESC is enabled when mobile menu is visible */ },\n      disable: () => { /* Could disable if needed */ },\n      isEnabled: () => this.layoutContext.isLayoutMobile() && this.isMobileMenuVisible()\n    });\n    \n    return hotkeys;\n  }\n  \n  /**\n   * Default chain behavior - cooperative with user menu\n   */\n  getDefaultChainBehavior(): 'next' | 'break' {\n    return 'next'; // Allow user menu to also close on ESC\n  }\n  \n  /**\n   * Handle ESC key via chain system with smart cooperation\n   */\n  private handleEscapeKeyChain(ctx: HotkeyExecutionContext): void {\n    this.logger.info('📱 MobileSidebar - ESC key pressed via chain system');\n    \n    // Close mobile menu\n    this.hideMobileMenu('programmatic');\n    ctx.preventDefault();\n    \n    this.logger.info('📡 MobileSidebar - ESC handled: mobile menu closed');\n    \n    // Smart chain control:\n    // Check if user menu is also in the chain and potentially open\n    if (ctx.hasProvider('AppHeaderImpl') || ctx.hasProvider('UserMenu')) {\n      // Let user menu also handle ESC if it needs to\n      ctx.next();\n    } else {\n      // We're the primary handler, stop chain\n      ctx.break();\n    }\n  }\n  \n  /**\n   * Cleanup chain provider\n   */\n  private cleanupChainProvider(): void {\n    if (this.chainProviderUnsubscriber) {\n      this.chainProviderUnsubscriber();\n      this.chainProviderUnsubscriber = null;\n      this.logger.info('MobileSidebar - Chain provider unregistered');\n    }\n  }\n\n  /**\n   * Get detailed status information for this component\n   */\n  getStatus(): ComponentStatus {\n    const currentTime = Date.now();\n    const isMobile = this.layoutContext?.isLayoutMobile() || false;\n    const isMobileMenuVisible = this.isMobileMenuVisible();\n    \n    return {\n      componentType: 'SidebarComponent',\n      id: 'app-sidebar',\n      initialized: this.isInitialized,\n      initTime: this.initTime,\n      uptime: this.initTime ? currentTime - this.initTime : 0,\n      domElement: this.sidebar ? {\n        tagName: this.sidebar.tagName,\n        id: this.sidebar.id,\n        className: this.sidebar.className,\n        childCount: this.sidebar.children.length,\n        hasContent: this.sidebar.children.length > 0,\n        isVisible: this.sidebar.style.display !== 'none' && !this.sidebar.classList.contains('sidebar-hidden'),\n        ariaLabel: this.sidebar.getAttribute('aria-label') || undefined,\n        role: this.sidebar.getAttribute('role') || undefined\n      } : undefined,\n      eventListeners: {\n        domEventListeners: this.domEventListenerCount,\n        layoutSubscriptions: 3, // layout-mode-change, mobile-menu-request, sidebar-compact-request\n        compactModeListeners: this.compactModeListeners.length\n      },\n      configuration: {\n        ...this.config,\n        navigationItemsCount: this.navigationItems.length,\n        locked: this.isLocked()\n      },\n      currentState: {\n        compactMode: this.compactMode,\n        isMobile: isMobile,\n        isMobileMenuVisible: isMobileMenuVisible,\n        layoutModeType: this.layoutContext?.getModeType(),\n        isLocked: this.isLocked(),\n        navigationUpdateCount: this.navigationUpdateCount,\n        compactModeToggleCount: this.compactModeToggleCount,\n        mobileMenuToggleCount: this.mobileMenuToggleCount,\n        lastActionTime: this.lastActionTime,\n        lastActionAgo: this.lastActionTime ? currentTime - this.lastActionTime : null,\n        chainProviderActive: this.chainProviderUnsubscriber !== null\n      },\n      performance: {\n        initDuration: this.initTime ? 50 : null, // Estimated\n        dimensions: this.getCurrentDimensions()\n      },\n      issues: this.getIssues(),\n      customData: {\n        navigationItems: this.navigationItems.map(item => ({\n          id: item.id,\n          text: item.text,\n          active: item.active,\n          expandable: item.expandable,\n          expanded: item.expanded,\n          childrenCount: item.children?.length || 0\n        })),\n        hotkeyProvider: {\n          chainProviderRegistered: this.chainProviderUnsubscriber !== null,\n          providesEscKey: isMobile && isMobileMenuVisible,\n          priority: this.getProviderPriority(),\n          providerId: this.getHotkeyProviderId()\n        },\n        cssClasses: this.sidebar ? Array.from(this.sidebar.classList) : []\n      }\n    };\n  }\n  \n  /**\n   * Get current issues with the component\n   */\n  private getIssues(): string[] {\n    const issues: string[] = [];\n    \n    if (!this.isInitialized) {\n      issues.push('Component not initialized');\n    }\n    \n    if (!this.sidebar) {\n      issues.push('DOM sidebar element missing');\n    }\n    \n    if (!this.layoutContext) {\n      issues.push('LayoutContext not available');\n    }\n    \n    if (this.navigationItems.length === 0) {\n      issues.push('No navigation items configured');\n    }\n    \n    if (this.domEventListenerCount === 0 && this.isInitialized) {\n      issues.push('No DOM event listeners active (possible initialization issue)');\n    }\n    \n    if (this.chainProviderUnsubscriber === null && this.isInitialized) {\n      issues.push('Chain hotkey provider not registered');\n    }\n    \n    const isMobile = this.layoutContext?.isLayoutMobile();\n    if (isMobile && this.compactMode) {\n      issues.push('Compact mode active on mobile (should use overlay mode instead)');\n    }\n    \n    return issues;\n  }\n\n  /**\n   * Destroy the sidebar and cleanup\n   */\n  public destroy(): void {\n    this.logger.info(\"Sidebar - Destroying...\");\n    \n    // Cleanup chain provider\n    this.cleanupChainProvider();\n\n    if (this.sidebar) {\n      this.sidebar.remove();\n      this.sidebar = null;\n    }\n\n    this.isInitialized = false;\n    this.logger.info(\"Sidebar - Destroyed\");\n  }\n}\n\nexport default SidebarComponent;\n","/**\n * Messages Component - Clean Implementation\n *\n * Simple, clean messages that display under the header.\n * Access via LayoutContext only - never directly from other components.\n */\n\n// Import clean CSS\nimport { LayoutContext } from \"../contexts/LayoutContext\";\nimport \"../assets/styles/components/error-messages.css\";\n\n// Import interfaces\nimport type {\n  Messages,\n  Message,\n  MessageOptions,\n  MessageType,\n} from \"../interfaces/Messages\";\nimport { ComponentStatus, ComponentWithStatus } from \"../interfaces/ComponentStatus\";\nimport { LoggerFactory } from \"../logging/LoggerFactory\";\nimport { Logger } from \"../logging/Logger\";\n\nexport class MessagesComponent implements Messages, ComponentWithStatus {\n  private container: HTMLElement | null = null;\n  private messages: Map<string, Message> = new Map();\n  private autoHideTimers: Map<string, NodeJS.Timeout> = new Map();\n  private layoutContext: LayoutContext;\n  private isInitialized: boolean = false;\n  private initTime: number | null = null;\n  private messageAddCount: number = 0;\n  private messageRemoveCount: number = 0;\n  private autoHideTriggeredCount: number = 0;\n  private lastActionTime: number | null = null;\n  private closeButtonClickCount: number = 0;\n  private logger: Logger;\n  private idCounter: number = 0; // Counter to ensure unique IDs\n  private messageOrder: string[] = []; // Track message order for positioning\n  private resizeHandler: (() => void) | null = null;\n\n  constructor(layoutContext: LayoutContext) {\n    this.layoutContext = layoutContext;\n    this.logger = LoggerFactory.getInstance().getLogger('MessagesComponent');\n  }\n\n  /**\n   * Generate unique message ID to prevent collisions\n   */\n  private generateUniqueId(prefix: string): string {\n    const timestamp = Date.now();\n    const counter = ++this.idCounter;\n    return `${prefix}-${timestamp}-${counter}`;\n  }\n\n  /**\n   * Update deck positioning for all messages using CSS custom properties\n   */\n  private updateDeckPositions(): void {\n    if (!this.container) return;\n\n    // Determine if we're on mobile\n    const isMobile = window.innerWidth <= 768;\n    const pixelOffset = isMobile ? 1 : 2;\n\n    this.messageOrder.forEach((messageId, index) => {\n      const messageElement = this.container?.querySelector(\n        `[data-message-id=\"${messageId}\"]`\n      ) as HTMLElement;\n\n      if (messageElement) {\n        // Cap positioning at 7 messages - don't change position beyond that\n        const effectiveIndex = Math.min(index, 6); // Max index of 6 (7th message)\n        const offsetX = effectiveIndex * pixelOffset;\n        const offsetY = effectiveIndex * pixelOffset;\n        const zIndex = Math.max(10 - index, 1); // Z-index still increments for all messages\n        \n        // Set overflow based on position: visible for first message, hidden for others\n        const overflowValue = index === 0 ? 'visible' : 'hidden';\n\n        messageElement.style.setProperty('--deck-offset-x', `${offsetX}px`);\n        messageElement.style.setProperty('--deck-offset-y', `${offsetY}px`);\n        messageElement.style.setProperty('--deck-z-index', zIndex.toString());\n        messageElement.style.setProperty('--deck-overflow', overflowValue);\n      }\n    });\n  }\n\n  /**\n   * Initialize - find the container\n   */\n  public async init(): Promise<void> {\n    this.container = document.getElementById(\"app-error-messages\");\n\n    if (!this.container) {\n      this.logger.error(\"Container #app-error-messages not found\");\n      return;\n    }\n\n    this.layoutContext.registerMessages(this);\n    \n    // Set up resize listener to update positions when switching mobile/desktop\n    this.resizeHandler = () => this.updateDeckPositions();\n    window.addEventListener('resize', this.resizeHandler);\n    \n    this.initTime = Date.now();\n    this.isInitialized = true;\n\n    this.logger.info(\"Ready \\u2705\");\n  }\n\n  /**\n   * Add a message - clean implementation\n   */\n  public addMessage(message: Message): void {\n    if (!this.container) {\n      this.logger.warn(\"Container not available\");\n      return;\n    }\n\n    // Set simple defaults\n    const messageWithDefaults: Message = {\n      dismissible: true,\n      autoHide: message.type === \"success\" || message.type === \"info\",\n      autoHideDelay: 5000,\n      persistent: false,\n      ...message,\n    };\n\n    // Remove existing message with same ID\n    this.removeMessage(message.id);\n\n    // Store and create message\n    this.messages.set(message.id, messageWithDefaults);\n    const messageElement = this.createMessageElement(messageWithDefaults);\n    // Prepend new messages so they appear first in DOM (newest at top of deck)\n    this.container.prepend(messageElement);\n    \n    // Track message order (newest first)\n    this.messageOrder.unshift(message.id);\n    \n    // Update deck positions for all messages\n    this.updateDeckPositions();\n    \n    // Track message addition\n    this.messageAddCount++;\n    this.lastActionTime = Date.now();\n\n    // Auto-hide timer if needed\n    if (messageWithDefaults.autoHide && messageWithDefaults.autoHideDelay) {\n      const timer = setTimeout(\n        () => {\n          // Check if message still exists before trying to remove it\n          if (this.messages.has(message.id)) {\n            this.autoHideTriggeredCount++;\n            this.removeMessage(message.id);\n          }\n        },\n        messageWithDefaults.autoHideDelay,\n      );\n      this.autoHideTimers.set(message.id, timer);\n    }\n\n    this.logger.info(`Added ${message.type}: ${message.title}`);\n  }\n\n  /**\n   * Remove an error message with smooth fade-out animation\n   */\n  public removeMessage(id: string): void {\n    if (!this.container) return;\n\n    // Check if message still exists to prevent double removal\n    if (!this.messages.has(id)) {\n      this.logger.debug(`Message ${id} already removed or doesn't exist`);\n      return;\n    }\n\n    // Clear auto-hide timer if exists\n    const timer = this.autoHideTimers.get(id);\n    if (timer) {\n      clearTimeout(timer);\n      this.autoHideTimers.delete(id);\n    }\n\n    // Find the DOM element before removing from messages map\n    const messageElement = this.container.querySelector(\n      `[data-message-id=\"${id}\"]`,\n    ) as HTMLElement;\n    \n    // Remove from messages map and order tracking immediately to prevent race conditions\n    this.messages.delete(id);\n    this.messageOrder = this.messageOrder.filter(messageId => messageId !== id);\n    \n    // Track message removal\n    this.messageRemoveCount++;\n    this.lastActionTime = Date.now();\n    \n    // Update positions for remaining messages\n    this.updateDeckPositions();\n\n    // Handle DOM removal with animation\n    if (messageElement) {\n      // Prevent multiple animations on the same element\n      if (messageElement.getAttribute('data-removing') === 'true') {\n        this.logger.debug(`Message element ${id} already being removed`);\n        return;\n      }\n      \n      messageElement.setAttribute('data-removing', 'true');\n      messageElement.style.animation = \"messageFadeOut 0.3s ease-in forwards\";\n\n      // Remove after animation completes\n      setTimeout(() => {\n        if (messageElement.parentNode) {\n          messageElement.remove();\n        }\n      }, 300);\n    }\n\n    this.logger.info(`Removed message:`, id);\n  }\n\n  /**\n   * Clear all messages\n   */\n  public clearAll(includesPersistent: boolean = false): void {\n    if (!this.container) return;\n\n    const messagesToRemove: string[] = [];\n\n    this.messages.forEach((message, id) => {\n      if (includesPersistent || !message.persistent) {\n        messagesToRemove.push(id);\n      }\n    });\n\n    // Clear all auto-hide timers first\n    messagesToRemove.forEach((id) => {\n      const timer = this.autoHideTimers.get(id);\n      if (timer) {\n        clearTimeout(timer);\n        this.autoHideTimers.delete(id);\n      }\n    });\n\n    messagesToRemove.forEach((id) => this.removeMessage(id));\n\n    // Reset order tracking\n    this.messageOrder = [];\n\n    // Cleanup any remaining orphaned elements after batch removal\n    setTimeout(() => this.cleanupOrphanedMessages(), 400);\n\n    this.logger.info(`Cleared ${messagesToRemove.length} messages`);\n  }\n\n  /**\n   * Clear messages by type\n   */\n  public clearByType(type: MessageType): void {\n    const messagesToRemove: string[] = [];\n\n    this.messages.forEach((message, id) => {\n      if (message.type === type && !message.persistent) {\n        messagesToRemove.push(id);\n      }\n    });\n\n    messagesToRemove.forEach((id) => this.removeMessage(id));\n\n    this.logger.info(\n      `Cleared ${messagesToRemove.length} ${type} messages`,\n    );\n  }\n\n  /**\n   * Get current messages\n   */\n  public getMessages(): Message[] {\n    return Array.from(this.messages.values());\n  }\n\n  /**\n   * Check if has messages of specific type\n   */\n  public hasMessages(type?: MessageType): boolean {\n    if (!type) {\n      return this.messages.size > 0;\n    }\n\n    return Array.from(this.messages.values()).some(\n      (message) => message.type === type,\n    );\n  }\n\n  /**\n   * Create message element - simplified version\n   */\n  private createMessageElement(message: Message): HTMLElement {\n    const messageEl = document.createElement(\"div\");\n    messageEl.className = `error-message ${message.type}`;\n    messageEl.setAttribute(\"data-message-id\", message.id);\n\n    // Simple structure with close button and debug ID in title\n    messageEl.innerHTML = `\n      <div class=\"error-content\">\n        <div class=\"error-title\">${this.escapeHtml(message.title)} <span style=\"font-size: 8px; opacity: 0.3; font-family: monospace; font-weight: normal; user-select: text;\">[${this.escapeHtml(message.id)}]</span></div>\n        ${message.description ? `<div class=\"error-description\">${this.escapeHtml(message.description)}</div>` : \"\"}\n      </div>\n      ${message.dismissible ? `<button type=\"button\" class=\"error-close\">×</button>` : \"\"}\n    `;\n\n    // Setup close button event listener\n    if (message.dismissible) {\n      const closeButton = messageEl.querySelector(\".error-close\");\n      if (closeButton) {\n        closeButton.addEventListener(\"click\", () => {\n          this.closeButtonClickCount++;\n          this.removeMessage(message.id);\n        });\n      }\n    }\n\n    return messageEl;\n  }\n\n  /**\n   * Escape HTML for safety\n   */\n  private escapeHtml(unsafe: string): string {\n    return unsafe\n      .replace(/&/g, \"&amp;\")\n      .replace(/</g, \"&lt;\")\n      .replace(/>/g, \"&gt;\")\n      .replace(/\"/g, \"&quot;\")\n      .replace(/'/g, \"&#039;\");\n  }\n\n  /**\n   * Convenience methods for different message types\n   */\n  public showError(\n    title: string,\n    description?: string,\n    options?: MessageOptions,\n  ): void {\n    this.addMessage({\n      id: options?.id || this.generateUniqueId('error'),\n      type: \"error\",\n      title,\n      description,\n      autoHide: false, // Errors should not auto-hide by default\n      ...options,\n    });\n  }\n\n  public showWarning(\n    title: string,\n    description?: string,\n    options?: MessageOptions,\n  ): void {\n    this.addMessage({\n      id: options?.id || this.generateUniqueId('warning'),\n      type: \"warning\",\n      title,\n      description,\n      autoHide: false, // Warnings should not auto-hide by default\n      ...options,\n    });\n  }\n\n  public showInfo(\n    title: string,\n    description?: string,\n    options?: MessageOptions,\n  ): void {\n    this.addMessage({\n      id: options?.id || this.generateUniqueId('info'),\n      type: \"info\",\n      title,\n      description,\n      autoHide: true, // Info messages can auto-hide\n      ...options,\n    });\n  }\n\n  public showSuccess(\n    title: string,\n    description?: string,\n    options?: MessageOptions,\n  ): void {\n    this.addMessage({\n      id: options?.id || this.generateUniqueId('success'),\n      type: \"success\",\n      title,\n      description,\n      autoHide: true, // Success messages can auto-hide\n      ...options,\n    });\n  }\n\n  /**\n   * Check if the messages system is ready\n   */\n  public isReady(): boolean {\n    return this.container !== null;\n  }\n\n  /**\n   * Clean up orphaned DOM elements that might be stuck\n   */\n  public cleanupOrphanedMessages(): void {\n    if (!this.container) return;\n\n    const domMessages = this.container.querySelectorAll('[data-message-id]');\n    let cleanedCount = 0;\n\n    domMessages.forEach((element) => {\n      const messageId = element.getAttribute('data-message-id');\n      if (messageId && !this.messages.has(messageId)) {\n        // This is an orphaned message in DOM but not in our tracking\n        element.remove();\n        cleanedCount++;\n        this.logger.debug(`Cleaned up orphaned message element: ${messageId}`);\n      }\n    });\n\n    if (cleanedCount > 0) {\n      this.logger.info(`Cleaned up ${cleanedCount} orphaned message elements`);\n    }\n  }\n\n  /**\n   * Force remove a message immediately without animation (for debugging)\n   */\n  public forceRemoveMessage(id: string): void {\n    if (!this.container) return;\n\n    // Clear timer\n    const timer = this.autoHideTimers.get(id);\n    if (timer) {\n      clearTimeout(timer);\n      this.autoHideTimers.delete(id);\n    }\n\n    // Remove from tracking\n    this.messages.delete(id);\n\n    // Remove from DOM immediately\n    const messageElement = this.container.querySelector(\n      `[data-message-id=\"${id}\"]`,\n    ) as HTMLElement;\n    if (messageElement) {\n      messageElement.remove();\n    }\n\n    this.messageRemoveCount++;\n    this.lastActionTime = Date.now();\n    this.logger.info(`Force removed message: ${id}`);\n  }\n\n  /**\n   * Get detailed status information for this component\n   */\n  getStatus(): ComponentStatus {\n    const currentTime = Date.now();\n    const activeMessages = Array.from(this.messages.values());\n    const messagesByType = {\n      error: activeMessages.filter(m => m.type === 'error').length,\n      warning: activeMessages.filter(m => m.type === 'warning').length,\n      info: activeMessages.filter(m => m.type === 'info').length,\n      success: activeMessages.filter(m => m.type === 'success').length\n    };\n    \n    return {\n      componentType: 'MessagesComponent',\n      id: 'app-error-messages',\n      initialized: this.isInitialized,\n      initTime: this.initTime,\n      uptime: this.initTime ? currentTime - this.initTime : 0,\n      domElement: this.container ? {\n        tagName: this.container.tagName,\n        id: this.container.id,\n        className: this.container.className,\n        childCount: this.container.children.length,\n        hasContent: this.container.children.length > 0,\n        isVisible: this.container.style.display !== 'none',\n        ariaLabel: this.container.getAttribute('aria-label') || undefined,\n        role: this.container.getAttribute('role') || undefined\n      } : undefined,\n      eventListeners: {\n        closeButtonListeners: this.container ? this.container.querySelectorAll('.error-close').length : 0\n      },\n      configuration: {\n        // MessagesComponent doesn't have a persistent config, all determined at runtime\n        supportsAutoHide: true,\n        supportsDismissible: true,\n        supportsPersistent: true,\n        supportsTypes: ['error', 'warning', 'info', 'success']\n      },\n      currentState: {\n        activeMessagesCount: this.messages.size,\n        messagesByType: messagesByType,\n        activeAutoHideTimers: this.autoHideTimers.size,\n        messageAddCount: this.messageAddCount,\n        messageRemoveCount: this.messageRemoveCount,\n        autoHideTriggeredCount: this.autoHideTriggeredCount,\n        closeButtonClickCount: this.closeButtonClickCount,\n        lastActionTime: this.lastActionTime,\n        lastActionAgo: this.lastActionTime ? currentTime - this.lastActionTime : null,\n        isReady: this.isReady()\n      },\n      performance: {\n        initDuration: this.initTime ? 20 : null, // Estimated - Messages init is very fast\n        averageMessageLifetime: this.messageRemoveCount > 0 ? \n          (this.initTime ? (currentTime - this.initTime) / this.messageRemoveCount : null) : null\n      },\n      issues: this.getIssues(),\n      customData: {\n        activeMessages: activeMessages.map(msg => ({\n          id: msg.id,\n          type: msg.type,\n          title: msg.title,\n          hasDescription: !!msg.description,\n          dismissible: msg.dismissible,\n          autoHide: msg.autoHide,\n          autoHideDelay: msg.autoHideDelay,\n          persistent: msg.persistent\n        })),\n        timerInfo: {\n          activeTimers: this.autoHideTimers.size,\n          timerIds: Array.from(this.autoHideTimers.keys())\n        },\n        domElements: {\n          container: !!this.container,\n          messageElements: this.container ? this.container.children.length : 0,\n          closeButtons: this.container ? this.container.querySelectorAll('.error-close').length : 0\n        }\n      }\n    };\n  }\n  \n  /**\n   * Get current issues with the component\n   */\n  private getIssues(): string[] {\n    const issues: string[] = [];\n    \n    if (!this.isInitialized) {\n      issues.push('Component not initialized');\n    }\n    \n    if (!this.container) {\n      issues.push('DOM container element missing');\n    }\n    \n    if (!this.layoutContext) {\n      issues.push('LayoutContext not available');\n    }\n    \n    // Check for potential memory leaks\n    if (this.autoHideTimers.size > 10) {\n      issues.push(`High number of active auto-hide timers (${this.autoHideTimers.size}) - possible memory leak`);\n    }\n    \n    if (this.messages.size > 20) {\n      issues.push(`High number of active messages (${this.messages.size}) - consider clearing old messages`);\n    }\n    \n    // Check for timer/message mismatch\n    const messagesWithAutoHide = Array.from(this.messages.values()).filter(m => m.autoHide);\n    if (messagesWithAutoHide.length !== this.autoHideTimers.size) {\n      issues.push('Mismatch between auto-hide messages and active timers');\n    }\n    \n    // Check for persistent errors\n    const persistentErrors = Array.from(this.messages.values()).filter(m => m.type === 'error' && m.persistent);\n    if (persistentErrors.length > 5) {\n      issues.push(`High number of persistent error messages (${persistentErrors.length})`);\n    }\n    \n    return issues;\n  }\n\n  /**\n   * Destroy the component\n   */\n  public destroy(): void {\n    this.logger.info(\"Destroying...\");\n\n    // Clear all auto-hide timers\n    this.autoHideTimers.forEach((timer) => clearTimeout(timer));\n    this.autoHideTimers.clear();\n\n    // Clear all messages\n    this.clearAll(true);\n\n    // Remove resize listener\n    if (this.resizeHandler) {\n      window.removeEventListener('resize', this.resizeHandler);\n      this.resizeHandler = null;\n    }\n\n    // Clean up references\n    this.messages.clear();\n    this.messageOrder = [];\n    this.container = null;\n\n    this.logger.info(\"Destroyed\");\n  }\n}\n\nexport default MessagesComponent;\n","/**\n * Layout Handler Type Definitions\n * \n * Provides TypeScript interfaces for the Layout handler pattern system.\n * Supports both simple context handlers and advanced lifecycle handlers.\n */\n\nimport type { LayoutContext } from '../contexts/LayoutContext';\n\n/**\n * Basic context handler that receives LayoutContext when ready\n * Used for simple configuration and setup tasks\n */\nexport type ContextHandler<T = void> = (layoutContext: LayoutContext) => T | Promise<T>;\n\n/**\n * Handler execution result with timing information\n */\nexport interface HandlerResult {\n  success: boolean;\n  executionTime: number;\n  error?: Error;\n  result?: any;\n}\n\n/**\n * Advanced lifecycle handler with pre/post hooks\n * Used for complex initialization scenarios requiring multiple phases\n */\nexport interface LifecycleHandler {\n  /**\n   * Optional handler called before LayoutContext is fully ready\n   * Can be used for early setup tasks that don't require context\n   */\n  onPreInit?: () => void | Promise<void>;\n\n  /**\n   * Main handler called when LayoutContext is ready\n   * Primary configuration and setup logic goes here\n   */\n  onContextReady: ContextHandler;\n\n  /**\n   * Optional handler called after main context handler completes\n   * Can be used for cleanup or post-setup tasks\n   */\n  onPostInit?: (context: LayoutContext) => void | Promise<void>;\n\n  /**\n   * Optional handler called if context initialization fails\n   * Can be used for error recovery or cleanup\n   */\n  onError?: (error: Error, context?: LayoutContext) => void | Promise<void>;\n\n  /**\n   * Optional identifier for this handler (useful for logging/debugging)\n   */\n  id?: string;\n\n  /**\n   * Optional priority for handler execution order (higher = earlier)\n   * Default: 0\n   */\n  priority?: number;\n}\n\n/**\n * Handler configuration options\n */\nexport interface HandlerConfig {\n  /**\n   * Maximum time to wait for handler execution (ms)\n   * Default: 5000ms\n   */\n  timeout?: number;\n\n  /**\n   * Whether to continue if this handler fails\n   * Default: true\n   */\n  continueOnError?: boolean;\n\n  /**\n   * Whether to log handler execution details\n   * Default: true\n   */\n  enableLogging?: boolean;\n}\n\n/**\n * Handler registration entry\n */\nexport interface HandlerRegistration {\n  handler: ContextHandler | LifecycleHandler;\n  config: HandlerConfig;\n  registered: Date;\n}\n\n/**\n * Type guard to check if handler is a lifecycle handler\n */\nexport function isLifecycleHandler(handler: ContextHandler | LifecycleHandler): handler is LifecycleHandler {\n  return typeof handler === 'object' && 'onContextReady' in handler;\n}\n\n/**\n * Type guard to check if handler is a simple context handler\n */\nexport function isContextHandler(handler: ContextHandler | LifecycleHandler): handler is ContextHandler {\n  return typeof handler === 'function';\n}\n\n/**\n * Handler execution priority levels (convenience constants)\n */\nexport const HandlerPriority = {\n  CRITICAL: 1000,     // System-critical handlers (e.g., error handling)\n  HIGH: 500,          // Important setup (e.g., service registration)\n  NORMAL: 0,          // Regular configuration (default)\n  LOW: -500,          // Optional enhancements\n  CLEANUP: -1000,     // Final cleanup tasks\n} as const;\n\n/**\n * Utility type for creating strongly-typed handler factories\n */\nexport type HandlerFactory<TConfig = any> = (config: TConfig) => ContextHandler | LifecycleHandler;\n\n/**\n * Service registration handler specifically for service architecture\n */\nexport interface ServiceRegistrationHandler extends LifecycleHandler {\n  /**\n   * Services to register during context ready phase\n   */\n  services?: Array<{\n    name: string;\n    factory: (context: LayoutContext) => any;\n    dependencies?: string[];\n  }>;\n}","/**\n * Layout Controller\n * Manages all master page components (Header, Sidebar, Footer) and their coordination\n */\n\nimport AppHeaderImpl from \"./AppHeaderImpl\";\nimport { HeaderUser } from \"./AppHeader\";\nimport AppFooterImpl from \"./AppFooterImpl\";\nimport { FooterConfig } from \"./AppFooter\";\nimport MainContentImpl from \"./MainContentImpl\";\nimport { NavigationItem, Sidebar, SidebarConfig } from \"./Sidebar\";\nimport SidebarComponent from \"./SidebarComponent\";\nimport MessagesComponent from \"./MessagesComponent\";\nimport type { Messages } from \"../interfaces/Messages\";\n// Import layout context\nimport {\n  type LayoutContext,\n  type LayoutEvent,\n  type LayoutModeType,\n} from \"../contexts/index\";\nimport LayoutContextImpl from \"../contexts/LayoutContextImpl\";\nimport type {\n  ContextHandler,\n  LifecycleHandler,\n  HandlerConfig,\n  HandlerRegistration,\n  HandlerResult,\n  HandlerPriority,\n} from \"../types/LayoutHandlers\";\nimport { isLifecycleHandler } from \"../types/LayoutHandlers\";\nimport { LoggerFactory } from \"../logging/LoggerFactory\";\nimport { Logger } from \"../logging/Logger\";\n\n// Re-export handler types for convenience\nexport type { ContextHandler, LifecycleHandler, HandlerConfig, HandlerResult };\nexport { HandlerPriority };\n\n/**\n * User menu item interface for configurable user menu\n */\nexport interface UserMenuItem {\n  id: string;\n  text: string;\n  icon: string;\n  href?: string;\n  action?: string; // For JavaScript actions like \"feedback\", \"logout\"\n  type?: \"link\" | \"action\" | \"divider\"; // Default is 'link'\n  className?: string; // Additional CSS classes\n  style?: string; // Additional inline styles\n}\n\n/**\n * Layout configuration interface\n */\nexport interface LayoutConfig {\n  header?: {\n    enabled?: boolean;\n    brandTitle?: string;\n    brandHref?: string;\n    showMobileToggle?: boolean;\n    showBreadcrumbs?: boolean;\n    showUserMenu?: boolean;\n  };\n  sidebar?: {\n    enabled?: boolean;\n    defaultWidth?: number; // Default sidebar width\n    compactWidth?: number; // Compact sidebar width\n    footer?: {\n      text?: string; // Footer text (default: \"© 2025 Opinion\")\n      showFooter?: boolean; // Whether to show footer (default: true)\n    };\n  };\n  footer?: FooterConfig & {\n    enabled?: boolean;\n  };\n  navigation?: NavigationItem[]; // Configuration for sidebar navigation items\n  userMenu?: UserMenuItem[]; // Configuration for user menu items\n}\n\nexport class Layout {\n  private header: AppHeaderImpl;\n  private footer: AppFooterImpl;\n  private mainContent: MainContentImpl;\n  private sidebar: SidebarComponent | null = null;\n  private messagesComponent: MessagesComponent | null = null;\n  private config: LayoutConfig;\n  private isInitialized: boolean = false;\n  private layoutContext: LayoutContextImpl;\n  private layoutUnsubscribers: Array<() => void> = [];\n  // Unified handler system (replaces old onReadyHandlers)\n  private registeredHandlers: Array<HandlerRegistration> = [];\n  private contextHandlers: Array<ContextHandler | LifecycleHandler> = [];\n  private readonly logger: Logger;\n\n  // Navigation and user menu state\n  private navigationItems: NavigationItem[] = [];\n  private userMenuItems: UserMenuItem[] = [];\n\n  constructor(config: LayoutConfig = {}) {\n    this.config = {\n      header: {\n        enabled: true,\n        brandTitle: \"Opinion\",\n        brandHref: \"/dashboard\",\n        showMobileToggle: true,\n        showBreadcrumbs: true,\n        showUserMenu: true,\n        ...config.header,\n      },\n      sidebar: {\n        enabled: true,\n        defaultWidth: 280,\n        compactWidth: 80,\n        footer: {\n          text: \"© 2025 Opinion\",\n          showFooter: true,\n        },\n        ...config.sidebar,\n      },\n      footer: {\n        enabled: true,\n        showCopyright: true,\n        copyrightText: \"© 2025 Inqwise Ltd\",\n        showNavigation: true,\n        ...config.footer,\n      },\n      navigation: config.navigation || [],\n      userMenu: config.userMenu || [],\n    };\n\n    // Initialize logger\n    this.logger = LoggerFactory.getInstance().getLogger(\"Layout\");\n\n    // Initialize layout context first\n    this.layoutContext = new LayoutContextImpl();\n\n    // Pass the layoutContext to components so they register with the correct instance\n    this.header = new AppHeaderImpl(this.config.header, this.layoutContext);\n    this.footer = new AppFooterImpl(this.config.footer, this.layoutContext);\n    this.mainContent = new MainContentImpl(\n      {\n        className: \"main-content\",\n        id: \"app\",\n        ariaLabel: \"Main application content\",\n      },\n      this.layoutContext,\n    );\n\n    // Note: Components will be registered with LayoutContext at the start of init()\n  }\n\n  /**\n   * Initialize the layout and all components\n   */\n  async init(): Promise<void> {\n    this.logger.debug(\"init() START\");\n\n    try {\n      this.logger.info(\"Starting layout initialization...\");\n\n      // Initialize header\n      if (this.config.header?.enabled) {\n        this.logger.debug(\"Header enabled, initializing...\");\n        await this.header.init();\n        this.logger.debug(\"Header initialized successfully\");\n\n        // Update brand if configured\n        if (this.config.header.brandTitle) {\n          this.logger.debug(\"Updating header brand...\");\n          this.header.updateBrand(\n            this.config.header.brandTitle,\n            this.config.header.brandHref,\n          );\n          this.logger.debug(\"Header brand updated\");\n        }\n\n        // Apply user menu items to header\n        this.logger.debug(\"Applying user menu items to header...\");\n\n        this.logger.debug(\"User menu items applied to header\");\n      } else {\n        this.logger.warn(\"Header disabled in config\");\n      }\n\n      // Initialize MainContent area (manages existing element)\n      this.logger.debug(\"Initializing MainContent...\");\n      this.mainContent.init();\n      this.logger.debug(\"MainContent initialized\");\n\n      // Initialize Messages component\n      this.logger.debug(\"Initializing MessagesComponent...\");\n      this.messagesComponent = new MessagesComponent(this.layoutContext);\n      await this.messagesComponent.init();\n\n      this.logger.debug(\"MessagesComponent initialized\");\n\n      // Initialize sidebar component if enabled\n      if (this.config.sidebar?.enabled) {\n        this.logger.debug(\"Sidebar enabled, initializing...\");\n        await this.initSidebar();\n        this.logger.debug(\"Sidebar initialized successfully\");\n      } else {\n        this.logger.warn(\"Sidebar disabled in config\");\n      }\n\n      // Initialize footer\n      if (this.config.footer?.enabled) {\n        this.logger.debug(\"Footer enabled, initializing...\");\n        await this.footer.init();\n        this.logger.debug(\"Footer initialized successfully\");\n      } else {\n        this.logger.warn(\"Footer disabled in config\");\n      }\n\n      // Setup component coordination\n      this.logger.debug(\"Setting up component coordination...\");\n      this.setupComponentCoordination();\n      this.logger.debug(\"Component coordination setup complete\");\n\n      // Setup responsive behavior\n      this.logger.debug(\"Setting up responsive behavior...\");\n      this.setupResponsiveBehavior();\n      this.logger.debug(\"Responsive behavior setup complete\");\n\n      // Subscribe to layout context events\n      this.logger.debug(\"Subscribing to layout context events...\");\n      this.subscribeToLayoutContext();\n      this.logger.debug(\"Layout context subscription complete\");\n\n      // Mark layout as ready\n      this.layoutContext.markReady();\n\n      // Execute all registered handlers (unified system)\n      await this.executeRegisteredHandlers();\n\n      this.isInitialized = true;\n      this.logger.info(\"Layout initialization completed successfully!\");\n    } catch (error) {\n      this.logger.error(\"Layout initialization failed\", error);\n      throw error;\n    }\n\n    this.logger.debug(\"init() END\");\n  }\n\n  /**\n   * Initialize the sidebar component\n   */\n  private async initSidebar(): Promise<void> {\n    try {\n      // Create sidebar configuration\n      const sidebarConfig: SidebarConfig = {\n        defaultWidth: this.config.sidebar?.defaultWidth ?? 280,\n        compactWidth: this.config.sidebar?.compactWidth ?? 80,\n        footer: {\n          text: this.config.sidebar?.footer?.text ?? \"© 2025 Opinion\",\n          showFooter: this.config.sidebar?.footer?.showFooter ?? true,\n        },\n      };\n\n      this.logger.debug(\"Creating sidebar with config\", sidebarConfig);\n      this.sidebar = new SidebarComponent(sidebarConfig, this.layoutContext);\n\n      // Initialize the sidebar\n      await this.sidebar.init();\n    } catch (error) {\n      this.logger.error(\"Sidebar initialization failed\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Setup coordination between components\n   */\n  private setupComponentCoordination(): void {\n    // Note: Component coordination is now handled by the layout context\n    // All components subscribe to layout context events for coordination\n    this.logger.debug(\"Component coordination delegated to layout context\");\n  }\n\n  /**\n   * Setup responsive behavior for the entire layout\n   */\n  private setupResponsiveBehavior(): void {\n    // Initial responsive setup based on current mode\n    this.updateComponentCSSClasses(this.layoutContext);\n  }\n\n  /**\n   * Get header component reference\n   */\n  getHeader(): AppHeaderImpl {\n    return this.header;\n  }\n\n  /**\n   * Get footer component reference\n   */\n  getFooter(): AppFooterImpl {\n    return this.footer;\n  }\n\n  /**\n   * Get main content component reference\n   */\n  getMainContent(): MainContentImpl {\n    return this.mainContent;\n  }\n\n  /**\n   * Get sidebar component reference\n   */\n  getSidebar(): Sidebar | null {\n    return this.sidebar;\n  }\n\n  /**\n   * Get layout context reference\n   */\n  getLayoutContext(): LayoutContext {\n    return this.layoutContext;\n  }\n\n  // Layout context access removed - use onContextReady() for setup/configuration\n  // Direct context access is available to pages via PageComponent.layoutContext\n\n  /**\n   * Update user information across all components\n   */\n  updateUser(user: HeaderUser): void {\n    if (this.config.header?.enabled) {\n      this.header.updateUser(user);\n    }\n\n    this.logger.debug(\"User updated across components\");\n  }\n\n  /**\n   * Update layout configuration\n   */\n  updateConfig(config: Partial<LayoutConfig>): void {\n    this.config = { ...this.config, ...config };\n\n    // Update header config\n    if (config.header) {\n      if (config.header.brandTitle || config.header.brandHref) {\n        this.header.updateBrand(\n          config.header.brandTitle ||\n            this.config.header?.brandTitle ||\n            \"Opinion\",\n          config.header.brandHref ||\n            this.config.header?.brandHref ||\n            \"/dashboard\",\n        );\n      }\n    }\n\n    // Footer config cannot be updated after initialization\n    // Footer configuration is set only at construction time\n  }\n\n  /**\n   * Show/hide header\n   */\n  showHeader(show: boolean): void {\n    this.header.setVisible(show);\n    this.config.header!.enabled = show;\n  }\n\n  /**\n   * Show/hide footer\n   */\n  showFooter(show: boolean): void {\n    this.footer.setVisible(show);\n    this.config.footer!.enabled = show;\n  }\n\n  /**\n   * Show/hide sidebar\n   */\n  showSidebar(show: boolean): void {\n    // Note: Sidebar visibility is now managed by the page component\n    this.config.sidebar!.enabled = show;\n  }\n\n  /**\n   * Check if layout is initialized\n   */\n  isReady(): boolean {\n    return this.isInitialized;\n  }\n\n  /**\n   * Get current layout state\n   */\n  getLayoutState(): {\n    headerVisible: boolean;\n    footerVisible: boolean;\n    sidebarEnabled: boolean;\n    viewport: \"mobile\" | \"tablet\" | \"desktop\";\n  } {\n    const width = window.innerWidth;\n    const isMobile = width <= 768;\n    const isTablet = width <= 1024;\n\n    return {\n      headerVisible: this.config.header?.enabled || false,\n      footerVisible: this.config.footer?.enabled || false,\n      sidebarEnabled: this.config.sidebar?.enabled || false,\n      viewport: isMobile ? \"mobile\" : isTablet ? \"tablet\" : \"desktop\",\n    };\n  }\n\n  /**\n   * Update copyright text across components\n   * Note: Footer copyright is now immutable (set at construction time)\n   */\n  updateCopyrightText(text: string): void {\n    // Footer copyright is immutable - set only during construction\n    this.logger.warn(\n      \"Footer copyright text cannot be updated after initialization\",\n    );\n\n    // Update sidebar copyright (if it exists) - this may still be dynamic\n    const sidebarCopyright = document.querySelector(\n      \".sidebar-footer .copyright-text\",\n    ) as HTMLElement;\n    if (sidebarCopyright) {\n      sidebarCopyright.textContent = text;\n      this.logger.debug(`Sidebar copyright text updated: ${text}`);\n    }\n  }\n\n  /**\n   * Subscribe to layout context events\n   */\n  private subscribeToLayoutContext(): void {\n    this.logger.debug(\"Subscribing to layout context events...\");\n\n    // Subscribe to layout ready events\n    const layoutReadyUnsubscribe = this.layoutContext.subscribe(\n      \"layout-ready\",\n      this.handleLayoutReady.bind(this),\n    );\n    this.layoutUnsubscribers.push(layoutReadyUnsubscribe);\n\n    // Subscribe to layout mode changes for CSS class management\n    const layoutModeUnsubscribe = this.layoutContext.subscribe(\n      \"layout-mode-change\",\n      (event) => {\n        if (event && event.data) {\n          this.handleLayoutModeChange(event);\n        } else {\n          this.logger.error(\n            \"Layout - Received invalid layout-mode-change event:\",\n            event,\n          );\n        }\n      },\n    );\n    this.layoutUnsubscribers.push(layoutModeUnsubscribe);\n\n    this.logger.debug(\"Successfully subscribed to layout context events\");\n  }\n\n  /**\n   * Handle layout ready event\n   */\n  private handleLayoutReady(event: unknown): void {\n    this.logger.debug(\"Layout context marked as ready\", event && typeof event === 'object' && event !== null ? (event as any).data : event);\n\n    // Perform any final coordination between components\n    this.finalizeComponentCoordination();\n  }\n\n  /**\n   * Finalize component coordination after layout is ready\n   */\n  private finalizeComponentCoordination(): void {\n    this.logger.debug(\"Finalizing component coordination...\");\n  }\n\n  /**\n   * Handle layout mode changes and update component CSS classes\n   */\n  private handleLayoutModeChange(event: LayoutEvent): void {\n    const layoutMode = event.data as LayoutModeType;\n    this.logger.debug(\"Received layout mode change\", layoutMode);\n\n    if (layoutMode) {\n      this.updateComponentCSSClasses(this.layoutContext);\n    } else {\n      this.logger.error(\"Received undefined layout mode data in event\", event);\n    }\n  }\n\n  /**\n   * Update CSS classes for all layout components based on layout mode\n   */\n  private updateComponentCSSClasses(ctx: LayoutContextImpl): void {\n    const type = ctx.getModeType();\n    const isMobile = ctx.isLayoutMobile();\n    const isTablet = ctx.isLayoutTablet();\n    const isDesktop = ctx.isLayoutDesktop();\n    const sidebarCompactMode = ctx.getSidebar()?.isCompactMode();\n\n    this.logger.info(`Layout - Updating component CSS classes for mode: ${type}`);\n\n    // Get all layout components\n    const components = {\n      layout: document.querySelector(\".app-layout\") as HTMLElement,\n      sidebar: document.querySelector(\".app-sidebar\") as HTMLElement,\n      header: document.querySelector(\".app-header\") as HTMLElement,\n      content: document.querySelector(\n        \".app-content-scroll, .app-main\",\n      ) as HTMLElement,\n      footer: document.querySelector(\".app-footer\") as HTMLElement,\n    };\n\n    // Define CSS class mappings for each mode\n    const modeClasses = {\n      mobile: \"layout-mode-mobile\",\n      tablet: \"layout-mode-tablet\",\n      desktop: \"layout-mode-desktop\",\n      \"desktop-compact\": \"layout-mode-desktop-compact\",\n    };\n\n    const stateClasses = {\n      compact: \"layout-compact\",\n      mobile: \"layout-mobile\",\n      tablet: \"layout-tablet\",\n      desktop: \"layout-desktop\",\n    };\n\n    // Remove all existing layout mode classes and add current ones\n    Object.values(components).forEach((element) => {\n      if (element) {\n        // Remove all previous layout mode classes\n        Object.values(modeClasses).forEach((className) => {\n          element.classList.remove(className);\n        });\n        Object.values(stateClasses).forEach((className) => {\n          element.classList.remove(className);\n        });\n\n        // Add current layout mode class\n        element.classList.add(modeClasses[type]);\n\n        // Add state-based classes\n        if (sidebarCompactMode) element.classList.add(stateClasses.compact);\n        if (isMobile) element.classList.add(stateClasses.mobile);\n        if (isTablet) element.classList.add(stateClasses.tablet);\n        if (isDesktop) element.classList.add(stateClasses.desktop);\n      }\n    });\n\n    // Update body classes for global CSS targeting\n    const body = document.body;\n    Object.values(modeClasses).forEach((className) => {\n      body.classList.remove(className);\n    });\n    Object.values(stateClasses).forEach((className) => {\n      body.classList.remove(className);\n    });\n\n    body.classList.add(modeClasses[type]);\n    if (sidebarCompactMode) body.classList.add(stateClasses.compact);\n    if (isMobile) body.classList.add(stateClasses.mobile);\n    if (isTablet) body.classList.add(stateClasses.tablet);\n    if (isDesktop) body.classList.add(stateClasses.desktop);\n\n    // Set CSS custom properties for mode-specific styling\n    const root = document.documentElement;\n    root.style.setProperty(\"--layout-mode\", type);\n    root.style.setProperty(\"--is-compact\", sidebarCompactMode ? \"1\" : \"0\");\n    root.style.setProperty(\"--is-mobile\", isMobile ? \"1\" : \"0\");\n    root.style.setProperty(\"--is-tablet\", isTablet ? \"1\" : \"0\");\n    root.style.setProperty(\"--is-desktop\", isDesktop ? \"1\" : \"0\");\n\n    this.logger.info(\"Layout - CSS classes updated:\", {\n      mode: type,\n      addedClasses: [\n        modeClasses[type],\n        ...(sidebarCompactMode ? [stateClasses.compact] : []),\n        ...(isMobile ? [stateClasses.mobile] : []),\n        ...(isTablet ? [stateClasses.tablet] : []),\n        ...(isDesktop ? [stateClasses.desktop] : []),\n      ],\n      components: Object.keys(components).filter(\n        (key) => components[key as keyof typeof components] !== null,\n      ),\n    });\n  }\n\n  // =================================================================================\n  // Navigation and User Menu Building Methods\n  // =================================================================================\n\n  /**\n   * Set navigation items for the sidebar\n   */\n  public setNavigationItems(items: NavigationItem[]): void {\n    this.navigationItems = [...items];\n    this.logger.info(\n      \"Layout - Navigation items updated:\",\n      this.navigationItems.length,\n      \"items\",\n    );\n\n    // Update sidebar if it's available through layout context\n    const sidebar = this.layoutContext.getSidebar();\n    if (sidebar) {\n      sidebar.updateNavigation(this.navigationItems);\n      this.logger.info(\"Layout - Navigation items applied to existing sidebar\");\n    } else {\n      this.logger.info(\n        \"Layout - Navigation items stored, will be applied when sidebar is registered\",\n      );\n    }\n  }\n\n  /**\n   * Get current navigation items\n   */\n  public getNavigationItems(): NavigationItem[] {\n    return [...this.navigationItems];\n  }\n\n  /**\n   * Update a specific navigation item\n   */\n  public updateNavigationItem(\n    id: string,\n    updates: Partial<NavigationItem>,\n  ): void {\n    const index = this.navigationItems.findIndex((item) => item.id === id);\n    if (index !== -1) {\n      this.navigationItems[index] = {\n        ...this.navigationItems[index],\n        ...updates,\n      };\n\n      // Update sidebar if available\n      const sidebar = this.layoutContext.getSidebar();\n      if (sidebar) {\n        sidebar.updateNavigation(this.navigationItems);\n      }\n\n      this.logger.info(`Layout - Navigation item '${id}' updated`);\n    } else {\n      this.logger.warn(`Layout - Navigation item with id '${id}' not found`);\n    }\n  }\n\n  /**\n   * Add a navigation item\n   */\n  public addNavigationItem(item: NavigationItem, position?: number): void {\n    if (\n      position !== undefined &&\n      position >= 0 &&\n      position <= this.navigationItems.length\n    ) {\n      this.navigationItems.splice(position, 0, item);\n    } else {\n      this.navigationItems.push(item);\n    }\n\n    // Update sidebar if available\n    const sidebar = this.layoutContext.getSidebar();\n    if (sidebar) {\n      sidebar.updateNavigation(this.navigationItems);\n    }\n\n    this.logger.info(`Layout - Navigation item '${item.id}' added`);\n  }\n\n  /**\n   * Remove a navigation item\n   */\n  public removeNavigationItem(id: string): void {\n    const index = this.navigationItems.findIndex((item) => item.id === id);\n    if (index !== -1) {\n      this.navigationItems.splice(index, 1);\n\n      // Update sidebar if available\n      const sidebar = this.layoutContext.getSidebar();\n      if (sidebar) {\n        sidebar.updateNavigation(this.navigationItems);\n      }\n\n      this.logger.info(`Navigation item '${id}' removed`);\n    } else {\n      this.logger.warn(`Navigation item with id '${id}' not found`);\n    }\n  }\n\n  /**\n   * Set active navigation item\n   * @deprecated Use NavigationService.setActiveItem() instead for centralized navigation state management\n   */\n  public setActiveNavigationItem(id: string): void {\n    this.logger.warn(\n      `Layout.setActiveNavigationItem is deprecated. Use NavigationService.setActiveItem('${id}') instead.`,\n    );\n\n    // Delegate to NavigationService if available\n    const navService = this.layoutContext.getService(\"navigation.service\");\n    if (navService && \"setActiveItem\" in navService) {\n      (navService as any).setActiveItem(id);\n    } else {\n      this.logger.error(\n        \"NavigationService not available. Cannot set active navigation item.\",\n      );\n    }\n  }\n\n  /**\n   * Set user menu items\n   */\n  public setUserMenuItems(items: UserMenuItem[]): void {\n    this.userMenuItems = [...items];\n    this.logger.info(\n      \"User menu items updated:\",\n      this.userMenuItems.length,\n      \"items\",\n    );\n\n    // Update header/user menu if it's available\n    if (this.header) {\n      this.header.updateUserMenuItems(this.userMenuItems);\n      this.logger.info(\"User menu items applied to header\");\n    } else {\n      this.logger.info(\n        \"User menu items stored, will be applied when header is available\",\n      );\n    }\n  }\n\n  /**\n   * Get current user menu items\n   */\n  public getUserMenuItems(): UserMenuItem[] {\n    return [...this.userMenuItems];\n  }\n\n  /**\n   * Update a specific user menu item\n   */\n  public updateUserMenuItem(id: string, updates: Partial<UserMenuItem>): void {\n    const index = this.userMenuItems.findIndex((item) => item.id === id);\n    if (index !== -1) {\n      this.userMenuItems[index] = { ...this.userMenuItems[index], ...updates };\n\n      // Update header if available\n      if (this.header) {\n        this.header.updateUserMenuItems(this.userMenuItems);\n      }\n\n      this.logger.info(`User menu item '${id}' updated`);\n    } else {\n      this.logger.warn(`User menu item with id '${id}' not found`);\n    }\n  }\n\n  /**\n   * Add a user menu item\n   */\n  public addUserMenuItem(item: UserMenuItem, position?: number): void {\n    if (\n      position !== undefined &&\n      position >= 0 &&\n      position <= this.userMenuItems.length\n    ) {\n      this.userMenuItems.splice(position, 0, item);\n    } else {\n      this.userMenuItems.push(item);\n    }\n\n    // Update header if available\n    if (this.header) {\n      this.header.updateUserMenuItems(this.userMenuItems);\n    }\n\n    this.logger.info(`User menu item '${item.id}' added`);\n  }\n\n  /**\n   * Remove a user menu item\n   */\n  public removeUserMenuItem(id: string): void {\n    const index = this.userMenuItems.findIndex((item) => item.id === id);\n    if (index !== -1) {\n      this.userMenuItems.splice(index, 1);\n\n      // Update header if available\n      if (this.header) {\n        this.header.updateUserMenuItems(this.userMenuItems);\n      }\n\n      this.logger.info(`User menu item '${id}' removed`);\n    } else {\n      this.logger.warn(`User menu item with id '${id}' not found`);\n    }\n  }\n\n  /**\n   * Get the navigation items to pass to sidebar components\n   * This method is called by page components when creating sidebars\n   */\n  public getNavigationForSidebar(): NavigationItem[] {\n    return this.getNavigationItems();\n  }\n\n  /**\n   * Get the user menu items to pass to header components\n   * This method is called during header initialization\n   */\n  public getUserMenuForHeader(): UserMenuItem[] {\n    return this.getUserMenuItems();\n  }\n\n  /**\n   * Get sidebar footer configuration to pass to sidebar components\n   * This method is called by page components when creating sidebars\n   */\n  public getSidebarFooterConfig(): { text: string; showFooter: boolean } {\n    return {\n      text: this.config.sidebar?.footer?.text || \"© 2025 Opinion\",\n      showFooter: this.config.sidebar?.footer?.showFooter ?? true,\n    };\n  }\n\n  /**\n   * Get sidebar configuration\n   */\n  public getSidebarConfig(): SidebarConfig {\n    return {\n      defaultWidth: this.config.sidebar?.defaultWidth ?? 280,\n      compactWidth: this.config.sidebar?.compactWidth ?? 80,\n      footer: {\n        text: this.config.sidebar?.footer?.text ?? \"© 2025 Opinion\",\n        showFooter: this.config.sidebar?.footer?.showFooter ?? true,\n      },\n    };\n  }\n\n  // =================================================================================\n  // Error Messages Methods\n  // =================================================================================\n\n  /**\n   * Get Messages interface - delegates to LayoutContext (exclusive access point)\n   */\n  public getMessages(): Messages | null {\n    return this.layoutContext.getMessages();\n  }\n\n  /**\n   * Check if layout is fully initialized\n   */\n  public get isLayoutInitialized(): boolean {\n    return this.isInitialized;\n  }\n\n  /**\n   * Register a callback to execute when LayoutContext is ready\n   * Provides safe access to LayoutContext with proper error handling\n   * Defers handler execution until LayoutContext is fully initialized\n   *\n   * NOTE: This method now uses the unified handler system internally\n   *\n   * @param handler - Function that receives the LayoutContext instance when ready\n   * @returns Layout instance for method chaining\n   */\n  public onContextReady<T extends void>(\n    handler: (layoutContext: LayoutContext) => T,\n  ): Layout {\n    // Convert simple handler to ContextHandler and use new system\n    const contextHandler: ContextHandler<T> = handler;\n\n    return this.setContextHandler(contextHandler, {\n      enableLogging: false, // Keep simple usage quiet by default\n      continueOnError: true,\n      timeout: 5000,\n    });\n  }\n\n  /**\n   * Convenience method: Register a simple handler with standard configuration\n   * For more advanced scenarios, use setContextHandler() directly\n   *\n   * @param handler - Simple context handler function\n   * @param priority - Execution priority (optional)\n   * @returns Layout instance for method chaining\n   */\n  public addHandler(handler: ContextHandler, _priority?: number): Layout {\n    return this.setContextHandler(handler, {\n      enableLogging: false,\n      continueOnError: true,\n      timeout: 5000,\n    });\n  }\n\n  /**\n   * Convenience method: Register a service registration handler\n   *\n   * @param services - Array of services to register\n   * @param id - Handler identifier (optional)\n   * @param priority - Execution priority (optional)\n   * @returns Layout instance for method chaining\n   */\n  public addServiceRegistration(\n    services: Array<{\n      name: string;\n      factory: (context: LayoutContext) => any;\n      dependencies?: string[];\n    }>,\n    id?: string,\n    priority: number = 500, // Default to high priority for service registration\n  ): Layout {\n    const lifecycleHandler: LifecycleHandler = {\n      id: id || \"service-registration\",\n      priority,\n      onContextReady: (context) => {\n        services.forEach(\n          ({ name, factory, dependencies: _dependencies = [] }) => {\n            const service = factory(context);\n            context.registerService(name, service);\n          },\n        );\n      },\n    };\n\n    return this.setContextHandler(lifecycleHandler, {\n      enableLogging: true,\n      continueOnError: false, // Service registration should not fail silently\n      timeout: 10000, // More time for service initialization\n    });\n  }\n\n  // =====================================================================================\n  // FORMAL HANDLER SYSTEM (Advanced Pattern)\n  // =====================================================================================\n\n  /**\n   * Register a formal context handler with lifecycle support\n   * This is the advanced handler pattern for complex service registration scenarios\n   *\n   * @param handler - ContextHandler or LifecycleHandler\n   * @param config - Handler configuration options\n   * @returns Layout instance for method chaining\n   */\n  public setContextHandler(\n    handler: ContextHandler | LifecycleHandler,\n    config: HandlerConfig = {},\n  ): Layout {\n    const defaultConfig: HandlerConfig = {\n      timeout: 5000,\n      continueOnError: true,\n      enableLogging: true,\n      ...config,\n    };\n\n    const registration: HandlerRegistration = {\n      handler,\n      config: defaultConfig,\n      registered: new Date(),\n    };\n\n    this.registeredHandlers.push(registration);\n    this.contextHandlers.push(handler);\n\n    if (defaultConfig.enableLogging) {\n      const handlerType = isLifecycleHandler(handler)\n        ? \"LifecycleHandler\"\n        : \"ContextHandler\";\n      const id = isLifecycleHandler(handler) ? handler.id : \"anonymous\";\n      this.logger.debug(`Registered ${handlerType} (${id})`);\n    }\n\n    // If layout is already initialized, execute immediately\n    if (this.isInitialized && this.layoutContext.isReady()) {\n      this.executeHandler(registration);\n    }\n\n    return this;\n  }\n\n  /**\n   * Register multiple context handlers at once\n   * Handlers will be executed in the order they are provided\n   *\n   * @param handlers - Array of handler configurations\n   * @returns Layout instance for method chaining\n   */\n  public setContextHandlers(\n    handlers: Array<{\n      handler: ContextHandler | LifecycleHandler;\n      config?: HandlerConfig;\n    }>,\n  ): Layout {\n    handlers.forEach(({ handler, config }) => {\n      this.setContextHandler(handler, config);\n    });\n    return this;\n  }\n\n  /**\n   * Execute a single formal handler with full lifecycle support\n   * @private\n   */\n  private async executeHandler(\n    registration: HandlerRegistration,\n  ): Promise<HandlerResult> {\n    const { handler, config } = registration;\n    const startTime = Date.now();\n\n    const result: HandlerResult = {\n      success: false,\n      executionTime: 0,\n    };\n\n    try {\n      if (isLifecycleHandler(handler)) {\n        await this.executeLifecycleHandler(handler, config);\n      } else {\n        await this.executeContextHandler(handler, config);\n      }\n\n      result.success = true;\n    } catch (error) {\n      result.error = error as Error;\n      if (config.enableLogging) {\n        this.logger.error(\"Handler execution failed\", error);\n      }\n\n      // Execute error handler if it's a lifecycle handler\n      if (isLifecycleHandler(handler) && handler.onError) {\n        try {\n          await handler.onError(error as Error, this.layoutContext);\n        } catch (errorHandlerError) {\n          this.logger.error(\"Error handler also failed\", errorHandlerError);\n        }\n      }\n\n      if (!config.continueOnError) {\n        throw error;\n      }\n    } finally {\n      result.executionTime = Date.now() - startTime;\n    }\n\n    return result;\n  }\n\n  /**\n   * Execute a lifecycle handler with all phases\n   * @private\n   */\n  private async executeLifecycleHandler(\n    handler: LifecycleHandler,\n    config: HandlerConfig,\n  ): Promise<void> {\n    const id = handler.id || \"anonymous\";\n\n    if (config.enableLogging) {\n      this.logger.debug(`Executing LifecycleHandler: ${id}`);\n    }\n\n    // Phase 1: Pre-init\n    if (handler.onPreInit) {\n      if (config.enableLogging) {\n        this.logger.debug(`Executing onPreInit for: ${id}`);\n      }\n      await this.executeWithTimeout(handler.onPreInit, config.timeout!);\n    }\n\n    // Phase 2: Main context ready\n    if (config.enableLogging) {\n      this.logger.debug(`Executing onContextReady for: ${id}`);\n    }\n    await this.executeWithTimeout(\n      () => handler.onContextReady(this.layoutContext),\n      config.timeout!,\n    );\n\n    // Phase 3: Post-init\n    if (handler.onPostInit) {\n      if (config.enableLogging) {\n        this.logger.debug(`Executing onPostInit for: ${id}`);\n      }\n      await this.executeWithTimeout(\n        () => handler.onPostInit!(this.layoutContext),\n        config.timeout!,\n      );\n    }\n\n    if (config.enableLogging) {\n      this.logger.debug(`Completed LifecycleHandler: ${id}`);\n    }\n  }\n\n  /**\n   * Execute a simple context handler\n   * @private\n   */\n  private async executeContextHandler(\n    handler: ContextHandler,\n    config: HandlerConfig,\n  ): Promise<void> {\n    if (config.enableLogging) {\n      this.logger.debug(\"Executing ContextHandler\");\n    }\n\n    await this.executeWithTimeout(\n      () => handler(this.layoutContext),\n      config.timeout!,\n    );\n  }\n\n  /**\n   * Execute a function with timeout support\n   * @private\n   */\n  private async executeWithTimeout<T>(\n    fn: () => T | Promise<T>,\n    timeoutMs: number,\n  ): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        reject(new Error(`Handler execution timed out after ${timeoutMs}ms`));\n      }, timeoutMs);\n\n      Promise.resolve(fn())\n        .then((result) => {\n          clearTimeout(timeoutId);\n          resolve(result);\n        })\n        .catch((error) => {\n          clearTimeout(timeoutId);\n          reject(error);\n        });\n    });\n  }\n\n  /**\n   * Execute all registered formal handlers\n   * Called during layout initialization\n   * @private\n   */\n  private async executeRegisteredHandlers(): Promise<void> {\n    if (this.registeredHandlers.length === 0) {\n      return;\n    }\n\n    this.logger.debug(\n      `Executing ${this.registeredHandlers.length} registered handlers`,\n    );\n\n    // Sort handlers by priority (higher priority = executed first)\n    const sortedRegistrations = [...this.registeredHandlers].sort((a, b) => {\n      const priorityA = isLifecycleHandler(a.handler)\n        ? a.handler.priority || 0\n        : 0;\n      const priorityB = isLifecycleHandler(b.handler)\n        ? b.handler.priority || 0\n        : 0;\n      return priorityB - priorityA;\n    });\n\n    for (const registration of sortedRegistrations) {\n      await this.executeHandler(registration);\n    }\n\n    this.logger.debug(\"All registered handlers executed\");\n  }\n\n  /**\n   * Get information about registered handlers\n   */\n  public getRegisteredHandlers(): Array<{\n    type: \"ContextHandler\" | \"LifecycleHandler\";\n    id?: string;\n    priority?: number;\n    registered: Date;\n  }> {\n    return this.registeredHandlers.map(({ handler, registered }) => ({\n      type: isLifecycleHandler(handler) ? \"LifecycleHandler\" : \"ContextHandler\",\n      id: isLifecycleHandler(handler) ? handler.id : undefined,\n      priority: isLifecycleHandler(handler) ? handler.priority : undefined,\n      registered,\n    }));\n  }\n\n  // All message methods are now accessed exclusively through LayoutContext.getMessages()\n  // Use layout.getMessages() or layoutContext.getMessages() instead\n\n  /**\n   * Cleanup when layout is destroyed\n   */\n  destroy(): void {\n    this.logger.info(\"Destroying...\");\n\n    // Unsubscribe from layout context events\n    this.layoutUnsubscribers.forEach((unsubscribe) => {\n      try {\n        unsubscribe();\n      } catch (error) {\n        this.logger.error(\"Error unsubscribing from layout context\", error);\n      }\n    });\n    this.layoutUnsubscribers = [];\n\n    // Clear all registered handlers (unified system)\n    if (this.registeredHandlers.length > 0) {\n      this.logger.debug(\n        `Clearing ${this.registeredHandlers.length} registered handlers`,\n      );\n      this.registeredHandlers = [];\n      this.contextHandlers = [];\n    }\n\n    // Unregister all components from LayoutContext\n    this.layoutContext.unregisterAllComponents();\n\n    // Destroy LayoutContext\n    if (this.layoutContext) {\n      this.layoutContext.destroy();\n    }\n\n    // Destroy all components\n    if (this.header) {\n      this.header.destroy();\n    }\n\n    if (this.sidebar) {\n      this.layoutContext.unregisterSidebar();\n      this.sidebar.destroy();\n      this.sidebar = null;\n    }\n\n    if (this.footer) {\n      this.footer.destroy();\n    }\n\n    if (this.messagesComponent) {\n      this.messagesComponent.destroy();\n      this.messagesComponent = null; // Clear reference after destruction\n    }\n\n    // Note: Sidebar destruction is now handled by the page component\n\n    // Clean up global CSS variables\n    const root = document.documentElement;\n    root.style.removeProperty(\"--sidebar-width\");\n    root.style.removeProperty(\"--sidebar-right-border\");\n    root.style.removeProperty(\"--content-margin-left\");\n    root.style.removeProperty(\"--layout-mode\");\n    root.style.removeProperty(\"--is-compact\");\n    root.style.removeProperty(\"--is-mobile\");\n    root.style.removeProperty(\"--is-tablet\");\n    root.style.removeProperty(\"--is-desktop\");\n\n    // Clean up layout mode classes from body\n    const layoutModeClasses = [\n      \"layout-mode-mobile\",\n      \"layout-mode-tablet\",\n      \"layout-mode-desktop\",\n      \"layout-mode-desktop-compact\",\n      \"layout-compact\",\n      \"layout-mobile\",\n      \"layout-tablet\",\n      \"layout-desktop\",\n    ];\n    layoutModeClasses.forEach((className) => {\n      document.body.classList.remove(className);\n    });\n\n    // Remove window event listeners\n    // Note: In a real app, you'd want to keep track of listeners to remove them properly\n\n    this.isInitialized = false;\n    this.logger.info(\"Destroyed\");\n  }\n}\n\nexport default Layout;\n","/**\n * Authentication Events - Typed Event Constants for EventBus Communication\n * \n * Defines authentication-related events that flow through the EventBus system.\n * Enables decoupled communication between AuthService and UI components.\n * \n * Design Principles:\n * - Minimal event set - only implement what's actually needed\n * - Each event requires explicit user approval before addition\n * - Events emitted before operation completion, only on success\n * - Strongly typed event payloads for type safety\n * \n * Current Status: Only user.authenticated event approved\n * Future events will be added based on implementation needs and user approval\n */\n\nimport { AuthenticatedUser } from './AuthenticatedUser';\n\n/**\n * Authentication event names as constants\n * \n * Using const assertions for literal type inference and IDE autocomplete.\n * Each event name represents a successful authentication operation.\n */\nexport const AUTH_EVENTS = {\n  /** \n   * User successfully authenticated\n   * Emitted when authentication validation succeeds\n   */\n  USER_AUTHENTICATED: 'user.authenticated'\n} as const;\n\n/**\n * Type representing valid authentication event names\n */\nexport type AuthEventName = typeof AUTH_EVENTS[keyof typeof AUTH_EVENTS];\n\n/**\n * Event payload for user authenticated event\n * \n * Contains authenticated user information including account context.\n * Emitted when authentication validation completes successfully.\n */\nexport interface UserAuthenticatedPayload {\n  /** Authenticated user with account context */\n  user: AuthenticatedUser;\n  /** Operation that triggered this authentication (e.g., 'login', 'session-validation') */\n  operation: string;\n  /** Timestamp when authentication was validated */\n  timestamp: Date;\n}\n\n/**\n * Authentication event payload types mapping\n * \n * Maps event names to their corresponding payload types.\n * Enables type-safe event handling in EventBus consumers.\n */\nexport interface AuthEventPayloads {\n  [AUTH_EVENTS.USER_AUTHENTICATED]: UserAuthenticatedPayload;\n}\n\n/**\n * Type-safe authentication event descriptor\n * \n * Generic type for authentication events that ensures payload type\n * matches the event name.\n */\nexport interface AuthEvent<T extends AuthEventName> {\n  name: T;\n  payload: AuthEventPayloads[T];\n}\n\n/**\n * Helper function to create type-safe authentication events\n * \n * @param name - Event name (must be from AUTH_EVENTS)\n * @param payload - Event payload (type checked against event name)\n * @returns Typed authentication event\n */\nexport function createAuthEvent<T extends AuthEventName>(\n  name: T,\n  payload: AuthEventPayloads[T]\n): AuthEvent<T> {\n  return { name, payload };\n}\n\n/**\n * Factory functions for creating specific authentication events\n * \n * Provides consistent event creation with proper typing and validation.\n */\nexport const AuthEventFactory = {\n  /**\n   * Create user authenticated event\n   * \n   * @param user - Authenticated user instance\n   * @param operation - Operation that triggered authentication\n   * @returns UserAuthenticated event\n   */\n  userAuthenticated(\n    user: AuthenticatedUser, \n    operation: string = 'authentication'\n  ): AuthEvent<typeof AUTH_EVENTS.USER_AUTHENTICATED> {\n    return createAuthEvent(AUTH_EVENTS.USER_AUTHENTICATED, {\n      user,\n      operation,\n      timestamp: new Date()\n    });\n  }\n} as const;\n\n/**\n * Type guard to check if an event is an authentication event\n * \n * @param event - Event to check\n * @returns true if event is an authentication event\n */\nexport function isAuthEvent(event: unknown): event is AuthEvent<AuthEventName> {\n  return event !== null &&\n         typeof event === 'object' &&\n         event !== null &&\n         typeof (event as any).name === 'string' &&\n         Object.values(AUTH_EVENTS).includes((event as any).name as AuthEventName) &&\n         (event as any).payload &&\n         typeof (event as any).payload === 'object';\n}\n\n// Mark for future development\n/**\n * FUTURE EVENTS (pending user approval):\n * \n * Potential events that may be added based on implementation needs:\n * - user.logout - When user logs out successfully\n * - user.authentication.failed - When authentication validation fails\n * - user.session.expired - When session expires\n * - user.account.switched - When user switches account context\n * \n * Each of these will require explicit user approval before implementation.\n */","/**\n * Base Service Implementation\n * \n * Abstract base class providing common service functionality including\n * LayoutContext access, EventBus integration via LayoutContext, lifecycle \n * management, and standardized error handling.\n */\n\nimport type { LayoutContext } from '../contexts/LayoutContext';\nimport type { EventBus } from '../lib/EventBus';\nimport type { Service, ServiceConfig } from '../interfaces/Service';\nimport { ServiceError } from '../interfaces/Service';\nimport { LoggerFactory } from '../logging/LoggerFactory';\nimport { Logger } from '../logging/Logger';\n\n/**\n * Abstract base service implementation\n * \n * Provides common functionality for all services:\n * - LayoutContext access for service discovery and component integration\n * - EventBus access via LayoutContext for reactive communication\n * - Standardized lifecycle management\n * - Error handling and logging\n * - Helper methods for service operations\n */\nexport abstract class BaseService implements Service {\n  protected readonly _context: LayoutContext;\n  protected readonly _config: ServiceConfig;\n  protected readonly _logger: Logger;\n  protected _initialized = false;\n  protected _destroyed = false;\n\n  constructor(context: LayoutContext, config: ServiceConfig = {}) {\n    this._context = context;\n    this._config = {\n      autoInit: true,\n      allowReplace: false,\n      initTimeout: 5000,\n      ...config,\n    };\n\n    // Initialize logger with service-specific name\n    this._logger = LoggerFactory.getInstance().getLogger(`Service:${this.getServiceId()}`);\n    this._logger.debug('Service created');\n  }\n\n  /**\n   * Get service identifier - must be implemented by subclasses\n   */\n  abstract getServiceId(): string;\n\n  /**\n   * Initialize the service using template method pattern\n   */\n  async init(): Promise<void> {\n    if (this._initialized) {\n      this._log('⚠️', 'Service already initialized');\n      return;\n    }\n\n    if (this._destroyed) {\n      throw new ServiceError(\n        'Cannot initialize destroyed service',\n        this.getServiceId(),\n        'init'\n      );\n    }\n\n    this._log('🚀', 'Initializing service...');\n\n    const startTime = Date.now();\n\n    try {\n      // Template method - subclasses implement onInit()\n      await this.onInit();\n\n      this._initialized = true;\n      const initTime = Date.now() - startTime;\n\n      this._log('✅', `Service initialized successfully in ${initTime}ms`);\n\n      // Emit initialization event\n      this._emitEvent('service:initialized', {\n        service: this.getServiceId(),\n        initTime,\n      });\n\n    } catch (error) {\n      const initTime = Date.now() - startTime;\n      const serviceError = new ServiceError(\n        `Service initialization failed: ${error}`,\n        this.getServiceId(),\n        'init'\n      );\n\n      this._log('❌', `Service initialization failed after ${initTime}ms:`, error);\n\n      // Emit error event\n      this._emitEvent('service:error', {\n        service: this.getServiceId(),\n        error: serviceError,\n        operation: 'init',\n      });\n\n      throw serviceError;\n    }\n  }\n\n  /**\n   * Destroy the service using template method pattern\n   */\n  async destroy(): Promise<void> {\n    if (this._destroyed) {\n      this._log('⚠️', 'Service already destroyed');\n      return;\n    }\n\n    this._log('🧹', 'Destroying service...');\n\n    try {\n      // Template method - subclasses implement onDestroy()\n      if (this._initialized) {\n        await this.onDestroy();\n      }\n\n      this._destroyed = true;\n      this._initialized = false;\n\n      this._log('✅', 'Service destroyed successfully');\n\n      // Emit destruction event\n      this._emitEvent('service:destroyed', {\n        service: this.getServiceId(),\n      });\n\n    } catch (error) {\n      const serviceError = new ServiceError(\n        `Service destruction failed: ${error}`,\n        this.getServiceId(),\n        'destroy'\n      );\n\n      this._log('❌', 'Service destruction failed:', error);\n\n      // Emit error event\n      this._emitEvent('service:error', {\n        service: this.getServiceId(),\n        error: serviceError,\n        operation: 'destroy',\n      });\n\n      throw serviceError;\n    }\n  }\n\n  /**\n   * Check if service is ready for use\n   */\n  isReady(): boolean {\n    return this._initialized && !this._destroyed;\n  }\n\n  /**\n   * Get LayoutContext for accessing other services and components\n   */\n  protected getContext(): LayoutContext {\n    return this._context;\n  }\n\n  /**\n   * Get EventBus through LayoutContext for cross-service communication\n   */\n  protected getEventBus(): EventBus {\n    return this._context.getEventBus();\n  }\n\n  /**\n   * Get service configuration\n   */\n  protected getConfig(): ServiceConfig {\n    return { ...this._config };\n  }\n\n  /**\n   * Get another service from the LayoutContext\n   * \n   * @param serviceName - Name of the service to retrieve\n   * @returns Service instance or null if not found\n   */\n  protected getService<T extends Service>(serviceName: string): T | null {\n    return this._context.getService<T>(serviceName);\n  }\n\n  /**\n   * Check if another service is available\n   * \n   * @param serviceName - Name of the service to check\n   * @returns true if service is registered\n   */\n  protected hasService(serviceName: string): boolean {\n    return this._context.hasService(serviceName);\n  }\n\n\n  /**\n   * Log a message with service context\n   * \n   * @param emoji - Emoji prefix for log message\n   * @param message - Log message\n   * @param args - Additional log arguments\n   */\n  protected log(emoji: string, message: string, ...args: any[]): void {\n    this._log(emoji, message, ...args);\n  }\n\n  /**\n   * Create a ServiceError with this service's context\n   * \n   * @param message - Error message\n   * @param operation - Operation that failed\n   * @returns ServiceError instance\n   */\n  protected createError(\n    message: string, \n    operation: 'register' | 'get' | 'init' | 'destroy' | 'unregister'\n  ): ServiceError {\n    return new ServiceError(message, this.getServiceId(), operation);\n  }\n\n  /**\n   * Safe async operation wrapper with error handling\n   * \n   * @param operation - Async operation to execute\n   * @param errorMessage - Error message if operation fails\n   * @returns Promise resolving to operation result or null on error\n   */\n  protected async safeExecute<T>(\n    operation: () => Promise<T>,\n    errorMessage: string\n  ): Promise<T | null> {\n    try {\n      return await operation();\n    } catch (error) {\n      this._log('❌', errorMessage, error);\n      return null;\n    }\n  }\n\n  // Private helper methods\n\n  /**\n   * Internal logging method\n   */\n  private _log(emoji: string, message: string, ...args: any[]): void {\n    this._logger.debug(message, ...args);\n  }\n\n  /**\n   * Internal event emission via LayoutContext EventBus\n   * Uses publish() to broadcast to all consumers\n   */\n  private _emitEvent(event: string, data: any): void {\n    try {\n      const eventBus = this.getEventBus();\n      // Use the correct EventBus interface method - publish for broadcasting\n      if (typeof eventBus.publish === 'function') {\n        eventBus.publish(event, data);\n      } else {\n        this._logger.warn('EventBus.publish method not available');\n      }\n    } catch (error) {\n      this._logger.error(`Failed to publish event '${event}'`, error);\n    }\n  }\n\n  // Template methods to be implemented by subclasses\n\n  /**\n   * Perform service-specific initialization\n   * Override this method in subclasses to implement initialization logic\n   */\n  protected abstract onInit(): Promise<void>;\n\n  /**\n   * Perform service-specific cleanup\n   * Override this method in subclasses to implement cleanup logic\n   */\n  protected abstract onDestroy(): Promise<void>;\n}\n\n/**\n * Static helper methods for service registration\n */\nexport class ServiceHelper {\n  /**\n   * Register a service with LayoutContext\n   * \n   * @param context - LayoutContext to register with\n   * @param name - Service registration name\n   * @param service - Service instance to register\n   */\n  static registerService(\n    context: LayoutContext,\n    name: string,\n    service: Service\n  ): void {\n    const logger = LoggerFactory.getInstance().getLogger('ServiceHelper');\n    try {\n      context.registerService(name, service);\n      logger.debug(`Registered service: ${name} (${service.getServiceId()})`);\n    } catch (error) {\n      logger.error(`Failed to register service '${name}'`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create and register a service in one operation\n   * \n   * @param context - LayoutContext to register with\n   * @param name - Service registration name\n   * @param factory - Factory function to create service\n   * @param config - Service configuration\n   * @returns Created service instance\n   */\n  static createAndRegister<T extends Service>(\n    context: LayoutContext,\n    name: string,\n    factory: (context: LayoutContext, config?: ServiceConfig) => T,\n    config?: ServiceConfig\n  ): T {\n    const service = factory(context, config);\n    \n    ServiceHelper.registerService(context, name, service);\n    \n    return service;\n  }\n}","/**\n * AuthenticatedUser - Extended User with Authentication Context\n * \n * Extends the base User type with authentication-specific information\n * including account context for multi-tenant scenarios.\n * \n * Design Notes:\n * - Supports current session-based authentication with account switching\n * - Provides authentication context that base User type doesn't include  \n * - Used in authentication events and service communication\n */\n\nimport { User, UserRole } from '../types';\n\n/**\n * Extended user class with authentication context\n * \n * Represents a successfully authenticated user with additional\n * authentication-specific information such as account context.\n */\nexport class AuthenticatedUser {\n  /** Base user information */\n  public readonly id: number;\n  public readonly username: string;\n  public readonly email: string;\n  public readonly role: UserRole;\n  public readonly created: Date;\n  public readonly lastLogin?: Date;\n  \n  /** Authentication context */\n  public readonly accountId?: number;\n  public readonly authenticatedAt: Date;\n  \n  /**\n   * Create an authenticated user instance\n   * \n   * @param user - Base user information from authentication response\n   * @param accountId - Optional current account context ID\n   * @param authenticatedAt - When this authentication occurred (defaults to now)\n   */\n  constructor(\n    user: User, \n    accountId?: number, \n    authenticatedAt: Date = new Date()\n  ) {\n    // Copy base user properties\n    this.id = user.id;\n    this.username = user.username;\n    this.email = user.email;\n    this.role = user.role;\n    this.created = user.created;\n    this.lastLogin = user.lastLogin;\n    \n    // Add authentication context\n    this.accountId = accountId;\n    this.authenticatedAt = authenticatedAt;\n  }\n  \n  /**\n   * Get base User object (without authentication context)\n   * \n   * @returns User - base user information\n   */\n  toUser(): User {\n    return {\n      id: this.id,\n      username: this.username,\n      email: this.email,\n      role: this.role,\n      created: this.created,\n      lastLogin: this.lastLogin\n    };\n  }\n  \n  /**\n   * Check if user has account context\n   * \n   * @returns boolean - true if accountId is set\n   */\n  hasAccountContext(): boolean {\n    return this.accountId !== undefined;\n  }\n  \n  /**\n   * Create AuthenticatedUser from authentication response data\n   * \n   * @param authResponse - Response from authentication service (e.g., validateUser)\n   * @returns AuthenticatedUser instance\n   */\n  static fromAuthResponse(authResponse: {\n    userInfo: User;\n    accountId?: number;\n  }): AuthenticatedUser {\n    return new AuthenticatedUser(\n      authResponse.userInfo,\n      authResponse.accountId\n    );\n  }\n  \n  /**\n   * Type guard to check if an object is an AuthenticatedUser\n   */\n  static isAuthenticatedUser(obj: unknown): obj is AuthenticatedUser {\n    return obj instanceof AuthenticatedUser ||\n           (obj !== null && \n            typeof obj === 'object' &&\n            typeof (obj as any).id === 'number' &&\n            typeof (obj as any).username === 'string' &&\n            typeof (obj as any).email === 'string' &&\n            (obj as any).authenticatedAt instanceof Date);\n  }\n}","/**\n * Self-Identifying Service Pattern\n * \n * Each service/component declares its own identity as static constants.\n * This eliminates hardcoded strings while keeping service identity \n * ownership with the service itself.\n * \n * Design Principles:\n * - Each service owns its identity declaration\n * - No central registry required\n * - Import-based dependency resolution\n * - Type-safe service identifiers\n * - Compile-time validation through imports\n */\n\nimport { LoggerFactory } from '../logging/LoggerFactory';\n\n/**\n * Base interface for services that declare their own identity\n */\nexport interface SelfIdentifyingService {\n  /**\n   * Get the service identifier\n   */\n  getServiceId(): string;\n}\n\n/**\n * Static service identity interface\n * Each service class should implement this as static members\n */\nexport interface ServiceIdentity {\n  /**\n   * Static service ID constant\n   */\n  readonly SERVICE_ID: string;\n  \n  /**\n   * Optional: Service description for debugging\n   */\n  readonly SERVICE_DESCRIPTION?: string;\n  \n  /**\n   * Optional: Service dependencies (other service IDs)\n   */\n  readonly SERVICE_DEPENDENCIES?: readonly string[];\n}\n\n/**\n * Helper type for extracting service ID from service class\n */\nexport type ExtractServiceId<T> = T extends { SERVICE_ID: infer U } ? U : never;\n\n/**\n * Helper for type-safe service registration\n */\nexport function registerService<T extends ServiceIdentity, S extends { getServiceId(): string }>(\n  context: { registerService: <R extends { getServiceId(): string }>(name: string, service: R) => void },\n  ServiceClass: T,\n  instance: S\n): void {\n  const logger = LoggerFactory.getInstance().getLogger('ServiceIdentity');\n  const serviceId = ServiceClass.SERVICE_ID;\n  context.registerService(serviceId, instance);\n  logger.debug('📝 Registered service: {}', serviceId);\n}\n\n/**\n * Helper for type-safe service resolution\n */\nexport function resolveService<T extends ServiceIdentity, R>(\n  context: { getService: (id: string) => unknown },\n  ServiceClass: T\n): R | null {\n  const serviceId = ServiceClass.SERVICE_ID;\n  return context.getService(serviceId) as R;\n}\n\n/**\n * Validation helper to ensure service implements required identity\n */\nexport function validateServiceIdentity<T>(\n  ServiceClass: unknown,\n  instance: T\n): asserts ServiceClass is ServiceIdentity {\n  const serviceClass = ServiceClass as any;\n  if (!serviceClass.SERVICE_ID || typeof serviceClass.SERVICE_ID !== 'string') {\n    throw new Error(\n      `Service class must declare static SERVICE_ID constant. ` +\n      `Found: ${serviceClass.name || 'Unknown'}`\n    );\n  }\n  \n  if (instance && typeof (instance as { getServiceId?: () => string }).getServiceId !== 'function') {\n    throw new Error(\n      `Service instance must implement getServiceId() method. ` +\n      `Service: ${serviceClass.SERVICE_ID}`\n    );\n  }\n}\n\n/**\n * Development helper to list service dependencies\n */\nexport function listServiceDependencies<T extends ServiceIdentity>(ServiceClass: T): void {\n  const logger = LoggerFactory.getInstance().getLogger('ServiceIdentity');\n  logger.debug('🔍 {} Dependencies', ServiceClass.SERVICE_ID);\n  logger.debug('Description: {}', ServiceClass.SERVICE_DESCRIPTION || 'No description');\n  if (ServiceClass.SERVICE_DEPENDENCIES && ServiceClass.SERVICE_DEPENDENCIES.length > 0) {\n    logger.debug('Dependencies: [{}]', ServiceClass.SERVICE_DEPENDENCIES.join(', '));\n  } else {\n    logger.debug('Dependencies: None');\n  }\n}\n\n// Legacy compatibility exports\nexport type ServiceId = string;\n\n// Legacy SERVICE_IDS object for backward compatibility\nexport const SERVICE_IDS = {\n  // Add service IDs as needed for backward compatibility\n} as const;\n\n// Legacy ServiceIdentityRegistry class for backward compatibility  \nexport class ServiceIdentityRegistry {\n  private static services = new Map<string, ServiceIdentity>();\n  \n  static register<T extends ServiceIdentity>(ServiceClass: T): void {\n    this.services.set(ServiceClass.SERVICE_ID, ServiceClass);\n  }\n  \n  static get(serviceId: string): ServiceIdentity | undefined {\n    return this.services.get(serviceId);\n  }\n  \n  static has(serviceId: string): boolean {\n    return this.services.has(serviceId);\n  }\n  \n  static list(): ServiceIdentity[] {\n    return Array.from(this.services.values());\n  }\n  \n  static getAll(): Map<string, ServiceIdentity> {\n    return new Map(this.services);\n  }\n  \n  static validateDependencies(serviceId: string): string[] {\n    const service = this.services.get(serviceId);\n    return service?.SERVICE_DEPENDENCIES ? [...service.SERVICE_DEPENDENCIES] : [];\n  }\n  \n  static getDependencyGraph(serviceId: string): string[] {\n    const dependencies = this.validateDependencies(serviceId);\n    const graph: string[] = [];\n    \n    for (const dep of dependencies) {\n      graph.push(dep);\n      const subDeps = this.getDependencyGraph(dep);\n      graph.push(...subDeps);\n    }\n    \n    return Array.from(new Set(graph)); // Remove duplicates\n  }\n}\n","/**\n * Mock Session Authentication Provider - Development Implementation\n * \n * Concrete implementation of SessionAuthProvider interface for development and testing.\n * Uses MockApiService for authentication operations and provides realistic multi-account\n * simulation for testing session-based authentication scenarios.\n * \n * Features:\n * - Works with MockApiService for user validation\n * - Simulates multi-tenant account management\n * - Provides realistic authentication delays\n * - Supports account switching simulation\n * - Implements Service interface for LayoutContext registration\n * \n * Usage:\n * ```typescript\n * const authProvider = new MockSessionAuthProvider(mockApiService);\n * await authProvider.init(); // Initialize the service\n * \n * const user = await authProvider.getCurrentUser();\n * const accounts = await authProvider.getAccounts();\n * await authProvider.switchAccount(accounts[1].id);\n * ```\n */\n\nimport { SessionAuthProvider, Account } from './SessionAuthProvider';\nimport { AuthenticationError } from './exceptions/AuthenticationExceptions';\nimport { MockApiService } from '../services/MockApiService';\nimport { User } from '../types';\nimport type { ServiceConfig } from '../interfaces/Service';\nimport { SelfIdentifyingService, validateServiceIdentity } from '../core/ServiceIdentity';\nimport { LoggerFactory } from '../logging/LoggerFactory';\nimport { Logger } from '../logging/Logger';\n\n/**\n * Configuration for MockSessionAuthProvider\n */\nexport interface MockSessionAuthProviderConfig extends ServiceConfig {\n  /** Simulate authentication delay in milliseconds (default: 500) */\n  authDelay?: number;\n  /** Enable account switching simulation (default: true) */\n  enableAccountSwitching?: boolean;\n  /** Number of mock accounts to generate (default: 3) */\n  mockAccountCount?: number;\n}\n\n/**\n * Mock session authentication provider implementation\n * \n * Provides a concrete implementation of SessionAuthProvider for development.\n * Uses MockApiService for user validation and simulates account management.\n */\nexport class MockSessionAuthProvider implements SessionAuthProvider, SelfIdentifyingService {\n  // 🎯 SELF-DECLARED IDENTITY CONSTANTS\n  static readonly SERVICE_ID = 'mock.session-auth-provider' as const;\n  static readonly SERVICE_DESCRIPTION = 'Mock session-based authentication provider for development';\n  static readonly SERVICE_DEPENDENCIES = [] as const; // No dependencies\n  private readonly mockConfig: Required<MockSessionAuthProviderConfig>;\n  private readonly mockApiService: MockApiService;\n  private currentUser: User | null = null;\n  private currentAccountId: number | null = null;\n  private mockAccounts: Account[] = [];\n  private initialized = false;\n  private destroyed = false;\n  private logger: Logger;\n  \n  constructor(\n    mockApiService: MockApiService, \n    config: MockSessionAuthProviderConfig = {}\n  ) {\n    this.mockConfig = {\n      autoInit: true,\n      allowReplace: false,\n      initTimeout: 5000,\n      authDelay: 500,\n      enableAccountSwitching: true,\n      mockAccountCount: 3,\n      ...config,\n    };\n    \n    this.mockApiService = mockApiService;\n    this.logger = LoggerFactory.getInstance().getLogger('MockSessionAuthProvider');\n    \n    // Validate this service implements required identity interface\n    validateServiceIdentity(MockSessionAuthProvider, this);\n    \n    this.log('🔐', 'MockSessionAuthProvider created', {\n      serviceId: MockSessionAuthProvider.SERVICE_ID,\n      authDelay: this.mockConfig.authDelay,\n      accountSwitching: this.mockConfig.enableAccountSwitching,\n      accountCount: this.mockConfig.mockAccountCount\n    });\n  }\n  \n  /**\n   * Get service identifier for registration\n   */\n  getServiceId(): string {\n    return MockSessionAuthProvider.SERVICE_ID;\n  }\n  \n  /**\n   * Check if user is currently authenticated\n   */\n  async isAuthenticated(): Promise<boolean> {\n    await this.simulateDelay();\n    return this.currentUser !== null;\n  }\n  \n  /**\n   * Get current authenticated user\n   * \n   * @returns Promise<User> - current user data\n   * @throws AuthenticationError if not authenticated\n   */\n  async getCurrentUser(): Promise<User> {\n    await this.simulateDelay();\n    \n    this.log('🔍', 'Getting current user...');\n    \n    try {\n      // Use MockApiService to validate user (simulates server call)\n      const authInfo = await this.mockApiService.validateUser();\n      const user = authInfo.userInfo;\n      \n      // Cache the user and account context\n      this.currentUser = user;\n      if (authInfo.accountId) {\n        this.currentAccountId = authInfo.accountId;\n      }\n      \n      this.log('✅', 'Current user retrieved successfully', {\n        userId: user.id,\n        username: user.username,\n        email: user.email,\n        accountId: authInfo.accountId\n      });\n      \n      return user;\n      \n    } catch (error) {\n      // Clear cached state on failure\n      this.currentUser = null;\n      this.currentAccountId = null;\n      \n      const authError = error instanceof AuthenticationError\n        ? error\n        : new AuthenticationError('User validation failed', error as Error);\n      \n      this.log('❌', 'Failed to get current user', { error: authError.message });\n      throw authError;\n    }\n  }\n  \n  /**\n   * Initiate login process\n   * \n   * For mock implementation, this simulates a successful login\n   * by calling validateUser and caching the result.\n   */\n  async login(): Promise<void> {\n    await this.simulateDelay();\n    \n    this.log('🚪', 'Initiating mock login...');\n    \n    try {\n      // For mock purposes, just validate current user\n      await this.getCurrentUser();\n      \n      this.log('✅', 'Mock login completed successfully');\n      \n    } catch (error) {\n      const authError = error instanceof AuthenticationError\n        ? error\n        : new AuthenticationError('Mock login failed', error as Error);\n      \n      this.log('❌', 'Mock login failed', { error: authError.message });\n      throw authError;\n    }\n  }\n  \n  /**\n   * Perform logout\n   * \n   * Clears all cached authentication state.\n   */\n  async logout(): Promise<void> {\n    await this.simulateDelay();\n    \n    const wasAuthenticated = this.currentUser !== null;\n    const previousUser = this.currentUser?.username;\n    \n    this.log('🚪', 'Performing mock logout...', { wasAuthenticated, previousUser });\n    \n    try {\n      // Clear all cached state\n      this.currentUser = null;\n      this.currentAccountId = null;\n      \n      this.log('✅', 'Mock logout completed successfully', { previousUser });\n      \n    } catch (error) {\n      const authError = new AuthenticationError('Mock logout failed', error as Error);\n      \n      this.log('❌', 'Mock logout failed', { error: authError.message });\n      throw authError;\n    }\n  }\n  \n  /**\n   * Get available accounts for current authenticated user\n   * \n   * @returns Promise<Account[]> - array of available accounts\n   * @throws AuthenticationError if not authenticated\n   */\n  async getAccounts(): Promise<Account[]> {\n    await this.simulateDelay();\n    \n    if (!await this.isAuthenticated()) {\n      throw new AuthenticationError('User not authenticated - cannot retrieve accounts');\n    }\n    \n    this.log('📋', 'Getting user accounts...');\n    \n    try {\n      // Return cached mock accounts\n      this.log('✅', 'Accounts retrieved successfully', {\n        accountCount: this.mockAccounts.length\n      });\n      \n      return [...this.mockAccounts]; // Return copy\n      \n    } catch (error) {\n      const authError = new AuthenticationError('Failed to retrieve accounts', error as Error);\n      \n      this.log('❌', 'Account retrieval failed', { error: authError.message });\n      throw authError;\n    }\n  }\n  \n  /**\n   * Switch to a different account context\n   * \n   * @param accountId - ID of the account to switch to\n   * @throws AuthenticationError if not authenticated or switch fails\n   */\n  async switchAccount(accountId: number): Promise<void> {\n    await this.simulateDelay();\n    \n    if (!await this.isAuthenticated()) {\n      throw new AuthenticationError('User not authenticated - cannot switch accounts');\n    }\n    \n    if (!this.mockConfig.enableAccountSwitching) {\n      throw new AuthenticationError('Account switching is disabled in mock configuration');\n    }\n    \n    this.log('🔄', 'Switching account...', { accountId });\n    \n    try {\n      // Validate account exists\n      const targetAccount = this.mockAccounts.find(acc => acc.id === accountId);\n      if (!targetAccount) {\n        throw new AuthenticationError(`Account with ID ${accountId} not found or access denied`);\n      }\n      \n      // Update current account context\n      this.currentAccountId = accountId;\n      \n      this.log('✅', 'Account switch successful', {\n        accountId,\n        accountName: targetAccount.name\n      });\n      \n    } catch (error) {\n      const authError = error instanceof AuthenticationError\n        ? error\n        : new AuthenticationError(`Account switch to ${accountId} failed`, error as Error);\n      \n      this.log('❌', 'Account switch failed', { accountId, error: authError.message });\n      throw authError;\n    }\n  }\n  \n  /**\n   * Get current active account ID\n   * \n   * @returns Promise<number | null> - current account ID or null\n   */\n  async getCurrentAccountId(): Promise<number | null> {\n    await this.simulateDelay(100); // Shorter delay for account ID check\n    \n    try {\n      return this.currentAccountId;\n    } catch (error) {\n      this.log('⚠️', 'Failed to get current account ID', { error });\n      return null;\n    }\n  }\n  \n  // Service interface implementations\n  \n  /**\n   * Initialize MockSessionAuthProvider\n   */\n  async init(): Promise<void> {\n    if (this.initialized) {\n      this.log('⚠️', 'MockSessionAuthProvider already initialized');\n      return;\n    }\n    \n    this.log('🚀', 'Initializing MockSessionAuthProvider...');\n    \n    // Generate mock accounts\n    this.generateMockAccounts();\n    \n    // Set default account context\n    if (this.mockAccounts.length > 0) {\n      this.currentAccountId = this.mockAccounts[0].id;\n    }\n    \n    this.initialized = true;\n    \n    this.log('✅', 'MockSessionAuthProvider initialized successfully', {\n      accountCount: this.mockAccounts.length,\n      defaultAccountId: this.currentAccountId\n    });\n  }\n  \n  /**\n   * Cleanup MockSessionAuthProvider resources\n   */\n  async destroy(): Promise<void> {\n    if (this.destroyed) {\n      this.log('⚠️', 'MockSessionAuthProvider already destroyed');\n      return;\n    }\n    \n    this.log('🧹', 'Destroying MockSessionAuthProvider...');\n    \n    // Clear all state\n    this.currentUser = null;\n    this.currentAccountId = null;\n    this.mockAccounts = [];\n    this.destroyed = true;\n    this.initialized = false;\n    \n    this.log('✅', 'MockSessionAuthProvider destroyed successfully');\n  }\n  \n  /**\n   * Check if service is ready\n   */\n  isReady(): boolean {\n    return this.initialized && !this.destroyed;\n  }\n  \n  /**\n   * Simple logging method\n   */\n  private log(prefix: string, message: string, data?: unknown): void {\n    const serviceId = this.getServiceId();\n    if (data) {\n      this.logger.info(`${prefix} [${serviceId}] ${message}`, data);\n    } else {\n      this.logger.info(`${prefix} [${serviceId}] ${message}`);\n    }\n  }\n  \n  // Private helper methods\n  \n  /**\n   * Generate mock accounts for testing\n   */\n  private generateMockAccounts(): void {\n    this.mockAccounts = [];\n    \n    for (let i = 1; i <= this.mockConfig.mockAccountCount; i++) {\n      this.mockAccounts.push({\n        id: i,\n        name: this.getMockAccountName(i)\n      });\n    }\n    \n    this.log('🏢', 'Generated mock accounts', {\n      accounts: this.mockAccounts.map(acc => `${acc.id}: ${acc.name}`)\n    });\n  }\n  \n  /**\n   * Get mock account name based on ID\n   */\n  private getMockAccountName(accountId: number): string {\n    const accountNames = [\n      'Acme Corporation',\n      'Tech Innovations Ltd',\n      'Global Solutions Inc',\n      'Digital Ventures LLC',\n      'Enterprise Systems Co',\n      'Innovation Hub Ltd'\n    ];\n    \n    return accountNames[accountId - 1] || `Test Account ${accountId}`;\n  }\n  \n  /**\n   * Simulate authentication delay for realistic testing\n   */\n  private async simulateDelay(customDelay?: number): Promise<void> {\n    const delay = customDelay ?? this.mockConfig.authDelay;\n    if (delay > 0) {\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n  \n  /**\n   * Get a ServiceReference for safely accessing registered MockSessionAuthProvider\n   * \n   * @param context - The LayoutContext to resolve from\n   * @param config - Optional configuration for the ServiceReference\n   * @returns Promise<ServiceReference<MockSessionAuthProvider>> for lazy resolution\n   */\n  static async getRegisteredReference(\n    context: unknown, // LayoutContext - avoiding import cycle\n    config?: unknown // ServiceReferenceConfig - avoiding import cycle\n  ): Promise<unknown> { // ServiceReference<MockSessionAuthProvider> - avoiding import cycle\n    const { ServiceReference } = await import('../services/ServiceReference');\n    return new ServiceReference(\n      context as any,\n      'mock-session-auth-provider', // Standard service key\n      config as any\n    );\n  }\n}","/**\n * Authentication Service - Core Authentication Orchestrator\n *\n * Base authentication service that orchestrates authentication operations using\n * AuthProvider and publishes events via EventBus for decoupled communication.\n *\n * Design Principles:\n * - Extends BaseService for LayoutContext integration and lifecycle management\n * - No direct UI dependencies - pure service layer\n * - Event-driven communication via EventBus (using publish directly)\n * - AuthProvider dependency resolved through LayoutContext service registry\n * - Minimal configuration, extensible design\n *\n * Service Registration:\n * - Registered with key 'auth' in LayoutContext\n * - Depends on AuthProvider service ('authProvider')\n * - Publishes user.authenticated events on successful operations\n */\n\nimport { BaseService } from \"../services/BaseService\";\nimport { AuthProvider } from \"./AuthProvider\";\nimport { AuthenticatedUser } from \"./AuthenticatedUser\";\nimport { AUTH_EVENTS, AuthEventFactory } from \"./AuthEvents\";\nimport { AuthenticationError } from \"./exceptions/AuthenticationExceptions\";\nimport {\n  ServiceReference,\n  ServiceReferenceConfig,\n} from \"../services/ServiceReference\";\nimport { User } from \"../types\";\nimport type { LayoutContext } from \"../contexts/LayoutContext\";\nimport type { ServiceConfig } from \"../interfaces/Service\";\nimport {\n  SelfIdentifyingService,\n  validateServiceIdentity,\n} from \"../core/ServiceIdentity\";\n// Import dependencies for type-safe references\nimport { MockSessionAuthProvider } from \"./MockSessionAuthProvider\";\n\n/**\n * Authentication service configuration\n */\nexport interface AuthServiceConfig extends ServiceConfig {\n  /** AuthProvider service ID to resolve from LayoutContext */\n  authProviderServiceId?: string;\n  /** Whether to validate authentication on service initialization (default: false) */\n  autoValidate?: boolean;\n}\n\n/**\n * Base authentication service implementation\n *\n * Provides core authentication operations and event publication\n * without session-specific features like account management.\n */\nexport class AuthService extends BaseService implements SelfIdentifyingService {\n  // 🎯 SELF-DECLARED IDENTITY CONSTANTS\n  static readonly SERVICE_ID = \"auth.service\" as const;\n  static readonly SERVICE_DESCRIPTION =\n    \"Core authentication service - handles login/logout/validation\";\n  static readonly SERVICE_DEPENDENCIES = [\n    MockSessionAuthProvider.SERVICE_ID,\n  ] as const;\n  protected readonly authServiceConfig: Required<AuthServiceConfig>;\n  protected authProvider: AuthProvider | null = null;\n  protected currentUser: AuthenticatedUser | null = null;\n\n  constructor(context: LayoutContext, config: AuthServiceConfig = {}) {\n    super(context, config);\n\n    this.authServiceConfig = {\n      autoInit: true,\n      allowReplace: false,\n      initTimeout: 5000,\n      authProviderServiceId: MockSessionAuthProvider.SERVICE_ID, // Type-safe reference!\n      autoValidate: false,\n      ...config,\n    };\n\n    // Validate this service implements required identity interface\n    validateServiceIdentity(AuthService, this);\n\n    this.log(\"🔐\", \"AuthService created\", {\n      serviceId: AuthService.SERVICE_ID,\n      authProviderServiceId: this.authServiceConfig.authProviderServiceId,\n      autoValidate: this.authServiceConfig.autoValidate,\n      dependencies: AuthService.SERVICE_DEPENDENCIES,\n    });\n  }\n\n  /**\n   * Get service identifier for registration\n   */\n  getServiceId(): string {\n    return AuthService.SERVICE_ID;\n  }\n\n  /**\n   * Get current authenticated user (cached)\n   */\n  getCurrentUser(): AuthenticatedUser | null {\n    return this.currentUser;\n  }\n\n  /**\n   * Check if user is currently authenticated (uses cached state)\n   */\n  isAuthenticated(): boolean {\n    return this.currentUser !== null;\n  }\n\n  /**\n   * Validate authentication with AuthProvider and update state\n   *\n   * This method contacts the AuthProvider to validate current authentication,\n   * updates internal state, and publishes user.authenticated event on success.\n   *\n   * @param operation - Operation context for event emission\n   * @returns Promise<AuthenticatedUser> - authenticated user data\n   * @throws AuthenticationError if not authenticated or validation fails\n   */\n  async validateAuthentication(\n    operation: string = \"validation\",\n  ): Promise<AuthenticatedUser> {\n    this.log(\"🔍\", \"Validating authentication...\", { operation });\n\n    try {\n      if (!this.authProvider) {\n        throw new AuthenticationError(\n          \"AuthProvider not available - service may not be initialized\",\n        );\n      }\n\n      // Get current user from AuthProvider (this validates with server)\n      const user: User = await this.authProvider.getCurrentUser();\n\n      // Create AuthenticatedUser (base class uses no account context)\n      const authenticatedUser = this.createAuthenticatedUser(user);\n\n      // Update internal state\n      this.currentUser = authenticatedUser;\n\n      this.log(\"✅\", \"Authentication validation successful\", {\n        userId: user.id,\n        username: user.username,\n        operation,\n      });\n\n      // Publish user authenticated event BEFORE returning (as specified)\n      this.publishUserAuthenticatedEvent(authenticatedUser, operation);\n\n      return authenticatedUser;\n    } catch (error) {\n      // Clear cached state on authentication failure\n      this.currentUser = null;\n\n      if (error instanceof AuthenticationError) {\n        this.log(\"❌\", \"Authentication validation failed\", {\n          operation,\n          error: error.message,\n        });\n        throw error;\n      } else {\n        const authError = new AuthenticationError(\n          \"Authentication validation failed\",\n          error as Error,\n        );\n        this.log(\n          \"❌\",\n          \"Authentication validation failed with unexpected error\",\n          { operation, error },\n        );\n        throw authError;\n      }\n    }\n  }\n\n  /**\n   * Initiate login process via AuthProvider\n   *\n   * @throws AuthenticationError if login initiation fails\n   */\n  async login(): Promise<void> {\n    this.log(\"🚪\", \"Initiating login...\");\n\n    try {\n      if (!this.authProvider) {\n        throw new AuthenticationError(\n          \"AuthProvider not available - service may not be initialized\",\n        );\n      }\n\n      await this.authProvider.login();\n      this.log(\"✅\", \"Login initiated successfully\");\n\n      // Note: user.authenticated event will be published later when\n      // validateAuthentication is called after login completes\n    } catch (error) {\n      const authError =\n        error instanceof AuthenticationError\n          ? error\n          : new AuthenticationError(\"Login initiation failed\", error as Error);\n\n      this.log(\"❌\", \"Login initiation failed\", { error: authError.message });\n      throw authError;\n    }\n  }\n\n  /**\n   * Perform logout via AuthProvider and clear state\n   *\n   * @throws AuthenticationError if logout fails\n   */\n  async logout(): Promise<void> {\n    const wasAuthenticated = this.isAuthenticated();\n    const previousUser = this.currentUser;\n\n    this.log(\"🚪\", \"Performing logout...\", { wasAuthenticated });\n\n    try {\n      if (!this.authProvider) {\n        throw new AuthenticationError(\n          \"AuthProvider not available - service may not be initialized\",\n        );\n      }\n\n      await this.authProvider.logout();\n\n      // Clear internal state after successful logout\n      this.currentUser = null;\n\n      this.log(\"✅\", \"Logout completed successfully\", {\n        previousUser: previousUser?.username,\n      });\n\n      // Note: Future logout event would be published here when approved\n    } catch (error) {\n      const authError =\n        error instanceof AuthenticationError\n          ? error\n          : new AuthenticationError(\"Logout failed\", error as Error);\n\n      this.log(\"❌\", \"Logout failed\", { error: authError.message });\n      throw authError;\n    }\n  }\n\n  // Protected methods for extension by subclasses\n\n  /**\n   * Create AuthenticatedUser instance - override in subclasses for additional context\n   *\n   * @param user - Base user information\n   * @returns AuthenticatedUser instance\n   */\n  protected createAuthenticatedUser(user: User): AuthenticatedUser {\n    return new AuthenticatedUser(user);\n  }\n\n  /**\n   * Publish user authenticated event via EventBus\n   * Uses EventBus.publish() directly for broadcasting to all consumers\n   */\n  protected publishUserAuthenticatedEvent(\n    user: AuthenticatedUser,\n    operation: string,\n  ): void {\n    try {\n      const event = AuthEventFactory.userAuthenticated(user, operation);\n      const eventBus = this.getEventBus();\n\n      if (typeof eventBus.publish === \"function\") {\n        eventBus.publish(AUTH_EVENTS.USER_AUTHENTICATED, event.payload);\n\n        this.log(\"📡\", \"Published user authenticated event\", {\n          userId: user.id,\n          operation,\n        });\n      } else {\n        this.log(\"❌\", \"EventBus.publish method not available\");\n      }\n    } catch (error) {\n      this.log(\"❌\", \"Failed to publish user authenticated event\", { error });\n      // Don't throw - event publication failure shouldn't break authentication\n    }\n  }\n\n  // BaseService template method implementations\n\n  /**\n   * Initialize AuthService - resolve AuthProvider dependency\n   */\n  protected async onInit(): Promise<void> {\n    this.log(\"🚀\", \"Initializing AuthService...\");\n\n    // Resolve AuthProvider using type-safe service ID\n    const authProviderServiceId = this.authServiceConfig.authProviderServiceId;\n    this.authProvider = this.getService(\n      authProviderServiceId,\n    ) as unknown as AuthProvider;\n\n    if (!this.authProvider) {\n      throw new AuthenticationError(\n        `AuthProvider service '${authProviderServiceId}' not found in LayoutContext. ` +\n          `Available services: [${this.getContext().getServiceNames().join(\", \")}]`,\n      );\n    }\n\n    this.log(\"✅\", \"AuthProvider resolved\", { authProviderServiceId });\n\n    // Auto-validate if configured (but don't fail initialization if validation fails)\n    if (this.authServiceConfig.autoValidate) {\n      try {\n        await this.validateAuthentication(\"initialization\");\n        this.log(\"✅\", \"Auto-validation successful during initialization\");\n      } catch (error) {\n        this.log(\n          \"⚠️\",\n          \"Auto-validation failed during initialization (continuing)\",\n          { error },\n        );\n        // Don't throw - initialization should continue even if user isn't authenticated\n      }\n    }\n\n    this.log(\"✅\", \"AuthService initialized successfully\");\n  }\n\n  /**\n   * Cleanup AuthService resources\n   */\n  protected async onDestroy(): Promise<void> {\n    this.log(\"🧹\", \"Destroying AuthService...\");\n\n    // Clear cached state\n    this.currentUser = null;\n    this.authProvider = null;\n\n    this.log(\"✅\", \"AuthService destroyed successfully\");\n  }\n\n  /**\n   * Get a ServiceReference for safely accessing registered AuthService\n   *\n   * @param context - The LayoutContext to resolve from\n   * @param config - Optional configuration for the ServiceReference\n   * @returns ServiceReference<AuthService> for lazy resolution\n   *\n   * @example\n   * ```typescript\n   * const authRef = AuthService.getRegisteredReference(layoutContext);\n   * const authService = await authRef.get(); // Returns AuthService | null\n   * if (authService) {\n   *   const user = await authService.validateAuthentication();\n   * }\n   * ```\n   */\n  static getRegisteredReference(\n    context: LayoutContext,\n    config?: ServiceReferenceConfig,\n  ): ServiceReference<AuthService> {\n    return new ServiceReference<AuthService>(\n      context,\n      AuthService.SERVICE_ID, // Uses own static constant\n      config,\n    );\n  }\n}\n","/**\n * ComponentReference - Lazy Component Resolution\n * \n * Provides lazy, cached, and retry-enabled component resolution without requiring\n * explicit initialization order management. Similar to ServiceReference but for UI components.\n * \n * Design Principles:\n * - Lazy resolution: Components resolved only when needed via get()\n * - Cached resolution: Once resolved, component reference is cached\n * - Retry logic: If component not found, retries with configurable intervals\n * - Type-safe: Full TypeScript support with generic component types\n * - Error resilient: Graceful handling of missing or unregistered components\n * \n * Usage:\n * ```typescript\n * const headerRef = AppHeader.getRegisteredReference(layoutContext);\n * const header = await headerRef.get(); // Returns AppHeader | null\n * ```\n */\n\nimport type { LayoutContext } from '../contexts/LayoutContext';\nimport { LoggerFactory } from '../logging/LoggerFactory';\nimport { Logger } from '../logging/Logger';\n\n/**\n * Configuration options for ComponentReference\n */\nexport interface ComponentReferenceConfig {\n  /** Enable debug logging (default: false) */\n  enableLogging?: boolean;\n  /** Retry interval in milliseconds (default: 100) */\n  retryInterval?: number;\n  /** Maximum retry attempts (default: 20) */\n  maxRetries?: number;\n  /** Timeout for component resolution in milliseconds (default: 5000) */\n  timeout?: number;\n}\n\n/**\n * ComponentReference implementation for lazy component resolution\n * \n * @template T - The component type to resolve\n */\nexport class ComponentReference<T> {\n  private readonly context: LayoutContext;\n  private readonly resolver: () => T | null;\n  private readonly componentName: string;\n  private readonly config: Required<ComponentReferenceConfig>;\n  private readonly logger: Logger;\n  private cachedComponent: T | null = null;\n  private resolving: Promise<T | null> | null = null;\n  \n  constructor(\n    context: LayoutContext,\n    componentName: string,\n    resolver: () => T | null,\n    config: ComponentReferenceConfig = {}\n  ) {\n    this.context = context;\n    this.componentName = componentName;\n    this.resolver = resolver;\n    this.config = {\n      enableLogging: false,\n      retryInterval: 100,\n      maxRetries: 20,\n      timeout: 5000,\n      ...config,\n    };\n    \n    this.logger = LoggerFactory.getInstance().getLogger(`ComponentReference[${componentName}]`);\n    \n    if (this.config.enableLogging) {\n      this.logger.debug('Created with config', this.config);\n    }\n  }\n  \n  /**\n   * Get the component instance, resolving it lazily if needed\n   * \n   * @returns Promise<T | null> - The resolved component or null if not found\n   */\n  async get(): Promise<T | null> {\n    // Return cached component if available\n    if (this.cachedComponent) {\n      return this.cachedComponent;\n    }\n    \n    // If already resolving, wait for existing resolution\n    if (this.resolving) {\n      return this.resolving;\n    }\n    \n    // Start new resolution\n    this.resolving = this.resolveComponent();\n    const result = await this.resolving;\n    this.resolving = null;\n    \n    return result;\n  }\n  \n  /**\n   * Check if component is immediately available (synchronous check)\n   * \n   * @returns boolean - True if component is cached and available\n   */\n  isAvailable(): boolean {\n    return this.cachedComponent !== null;\n  }\n  \n  /**\n   * Get cached component without resolution (synchronous)\n   * \n   * @returns T | null - Cached component or null if not resolved yet\n   */\n  getCached(): T | null {\n    return this.cachedComponent;\n  }\n  \n  /**\n   * Clear cached component (forces re-resolution on next get())\n   */\n  clearCache(): void {\n    if (this.config.enableLogging) {\n      this.logger.debug('Cache cleared');\n    }\n    this.cachedComponent = null;\n  }\n  \n  /**\n   * Get component name being resolved\n   */\n  getComponentName(): string {\n    return this.componentName;\n  }\n  \n  // Private helper methods\n  \n  /**\n   * Resolve component with retry logic and caching\n   */\n  private async resolveComponent(): Promise<T | null> {\n    const startTime = Date.now();\n    \n    if (this.config.enableLogging) {\n      this.logger.debug('Starting resolution...');\n    }\n    \n    for (let attempt = 0; attempt < this.config.maxRetries; attempt++) {\n      // Check timeout\n      if (Date.now() - startTime > this.config.timeout) {\n        if (this.config.enableLogging) {\n          this.logger.warn(`Resolution timed out after ${this.config.timeout}ms`);\n        }\n        break;\n      }\n      \n      // Try to resolve component\n      const component = this.tryResolveComponent();\n      if (component) {\n        this.cachedComponent = component;\n        if (this.config.enableLogging) {\n          this.logger.debug(`Resolved successfully (attempt ${attempt + 1})`);\n        }\n        return component;\n      }\n      \n      // Wait before retry (except on last attempt)\n      if (attempt < this.config.maxRetries - 1) {\n        await new Promise(resolve => setTimeout(resolve, this.config.retryInterval));\n      }\n    }\n    \n    if (this.config.enableLogging) {\n      this.logger.warn(`Failed to resolve after ${this.config.maxRetries} attempts`);\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Try to resolve component using the provided resolver (single attempt)\n   */\n  private tryResolveComponent(): T | null {\n    try {\n      return this.resolver();\n    } catch (error) {\n      if (this.config.enableLogging) {\n        this.logger.error('Error during resolution', error);\n      }\n      return null;\n    }\n  }\n}","/**\n * AppHeader Interface\n * Defines the contract for app header components\n */\n\nimport UserMenu from \"./UserMenu\";\nimport type { BreadcrumbsComponent } from \"./BreadcrumbsComponent\";\nimport { ComponentReference, ComponentReferenceConfig } from \"./ComponentReference\";\nimport type { LayoutContext } from \"../contexts/LayoutContext\";\n\nexport interface HeaderUser {\n  username: string;\n  email?: string;\n  avatar?: string;\n}\n\n\n/**\n * Interface for app header components\n */\nexport interface AppHeader {\n  /**\n   * Initialize the header component\n   */\n  init(): Promise<void>;\n\n  /**\n   * Update user information in header\n   */\n  updateUser(user: HeaderUser): void;\n\n  /**\n   * Update logo/brand link\n   */\n  updateBrand(title: string, href?: string): void;\n\n\n  /**\n   * Show/hide header\n   */\n  setVisible(visible: boolean): void;\n\n\n  /**\n   * Cleanup when component is destroyed\n   */\n  destroy(): void;\n\n  /**\n   * Set user menu handler\n   */\n  setUserMenuHandler(handler: (userMenu: UserMenu) => void): void;\n  \n  /**\n   * Get breadcrumbs component for direct access\n   */\n  getBreadcrumbsComponent(): BreadcrumbsComponent | null;\n}\n\n/**\n * AppHeader reference utilities\n */\nexport class AppHeaderRef {\n  static readonly COMPONENT_ID = 'AppHeader' as const;\n  /**\n   * Get a ComponentReference for safely accessing registered AppHeader\n   * \n   * @param context - The LayoutContext to resolve from\n   * @param config - Optional configuration for the ComponentReference\n   * @returns ComponentReference<AppHeader> for lazy resolution\n   * \n   * @example\n   * ```typescript\n   * const headerRef = AppHeaderRef.getRegisteredReference(layoutContext);\n   * const header = await headerRef.get(); // Returns AppHeader | null\n   * ```\n   */\n  static getRegisteredReference(\n    context: LayoutContext,\n    config?: ComponentReferenceConfig\n  ): ComponentReference<AppHeader> {\n    return new ComponentReference<AppHeader>(\n      context,\n      AppHeaderRef.COMPONENT_ID,\n      () => context.getHeader(),\n      config\n    );\n  }\n}\n","/**\n * AppHeader Binder Service - UI Authentication Integration\n * \n * Bridges the gap between authentication services and UI components by subscribing\n * to authentication events and updating AppHeader/UserMenu with real user data.\n * Also handles user action delegation back to authentication services.\n * \n * Design Principles:\n * - Extends BaseService for LayoutContext integration and lifecycle management\n * - Subscribes to AuthService events via EventBus.consume()\n * - Updates UI components with authentication state changes\n * - Delegates user actions (logout) back to AuthService\n * - No authentication logic - pure UI data binding and event handling\n * \n * Service Registration:\n * - Registered with key 'appHeaderBinder' in LayoutContext\n * - Depends on AuthService ('auth' or 'session-auth') and AppHeader component\n * - Consumes user.authenticated events from EventBus\n */\n\nimport { BaseService } from '../services/BaseService';\nimport { AuthService } from '../auth/AuthService';\nimport { AUTH_EVENTS, UserAuthenticatedPayload } from '../auth/AuthEvents';\nimport { AuthenticatedUser } from '../auth/AuthenticatedUser';\nimport { AuthenticationError } from '../auth/exceptions/AuthenticationExceptions';\nimport { ServiceReference, ServiceReferenceConfig } from './ServiceReference';\nimport { ComponentReference } from '../components/ComponentReference';\nimport { AppHeader, HeaderUser, AppHeaderRef } from '../components/AppHeader';\nimport { UserMenu } from '../components/UserMenu';\nimport type { Consumer } from '../lib/EventBus';\nimport type { LayoutContext } from '../contexts/LayoutContext';\nimport type { ServiceConfig } from '../interfaces/Service';\nimport { SelfIdentifyingService, validateServiceIdentity } from '../core/ServiceIdentity';\n\n/**\n * AppHeader binder service configuration\n */\nexport interface AppHeaderBinderServiceConfig extends ServiceConfig {\n  /** AuthService name to resolve from LayoutContext (default: 'auth') */\n  authServiceName?: string;\n  /** Whether to immediately update UI on service initialization (default: true) */\n  updateOnInit?: boolean;\n}\n\n/**\n * AppHeader binder service implementation\n * \n * Provides UI binding between authentication services and AppHeader components.\n * Handles event subscription, UI updates, and user action delegation.\n */\nexport class AppHeaderBinderService extends BaseService implements SelfIdentifyingService {\n  // 🎯 SELF-DECLARED IDENTITY CONSTANTS\n  static readonly SERVICE_ID = 'auth.header-binder' as const;\n  static readonly SERVICE_DESCRIPTION = 'Authentication UI binding service - bridges AuthService and AppHeader component';\n  static readonly SERVICE_DEPENDENCIES = [\n    AuthService.SERVICE_ID\n  ] as const;\n  private readonly binderConfig: Required<AppHeaderBinderServiceConfig>;\n  private authServiceRef: ServiceReference<AuthService>;\n  private appHeaderRef: ComponentReference<AppHeader>;\n  private eventConsumer: Consumer | null = null;\n  \n  constructor(\n    authServiceRef: ServiceReference<AuthService>,\n    context: LayoutContext,\n    config: AppHeaderBinderServiceConfig = {}\n  ) {\n    const finalConfig = {\n      autoInit: true,\n      allowReplace: false,\n      initTimeout: 5000,\n      authServiceName: 'auth',\n      updateOnInit: true,\n      ...config,\n    };\n    \n    super(context, finalConfig);\n    \n    this.binderConfig = finalConfig;\n    \n    // Store service reference for AuthService\n    this.authServiceRef = authServiceRef;\n    \n    // Initialize ComponentReference for AppHeader\n    this.appHeaderRef = AppHeaderRef.getRegisteredReference(context, {\n      enableLogging: false, // Disable logging now that issue is resolved\n      retryInterval: 100,\n      maxRetries: 50 // Keep higher retry count for robustness\n    });\n    \n    // Validate this service implements required identity interface\n    validateServiceIdentity(AppHeaderBinderService, this);\n    \n    this.log('🔗', 'AppHeaderBinderService created', { \n      serviceId: AppHeaderBinderService.SERVICE_ID,\n      authServiceName: this.binderConfig.authServiceName,\n      updateOnInit: this.binderConfig.updateOnInit,\n      dependencies: AppHeaderBinderService.SERVICE_DEPENDENCIES\n    });\n  }\n  \n  /**\n   * Get service identifier for registration\n   */\n  getServiceId(): string {\n    return AppHeaderBinderService.SERVICE_ID;\n  }\n  \n  /**\n   * Update AppHeader with current authentication state\n   * \n   * @param force - Force update even if no authenticated user\n   */\n  async updateAppHeader(force: boolean = false): Promise<void> {\n    const appHeader = await this.appHeaderRef.get();\n    if (!appHeader) {\n      this.log('⚠️', 'AppHeader not available - cannot update UI');\n      return;\n    }\n    \n    const authService = await this.authServiceRef.get();\n    if (!authService) {\n      this.log('⚠️', 'AuthService not available - cannot get authentication state');\n      return;\n    }\n    \n    const authenticatedUser = authService.getCurrentUser();\n    \n    if (authenticatedUser) {\n      await this.updateAppHeaderWithUser(authenticatedUser);\n    } else if (force) {\n      this.log('⚠️', 'No authenticated user available for AppHeader update');\n      // Could set default/guest state here if needed\n    }\n  }\n  \n  /**\n   * Handle user logout action from UI\n   * Delegates to AuthService for actual logout operation\n   */\n  async handleLogoutAction(): Promise<void> {\n    const authService = await this.authServiceRef.get();\n    if (!authService) {\n      this.log('❌', 'AuthService not available - cannot perform logout');\n      return;\n    }\n    \n    this.log('🚺', 'Handling logout action from UI...');\n    \n    try {\n      await authService.logout();\n      this.log('✅', 'Logout action completed successfully');\n    } catch (error) {\n      this.log('❌', 'Logout action failed', { error });\n      \n      // Could show user-friendly error message here\n      console.error('Logout failed:', error);\n    }\n  }\n  \n  // Private helper methods\n  \n  /**\n   * Subscribe to authentication events from EventBus\n   */\n  private subscribeToAuthEvents(): void {\n    const eventBus = this.getEventBus();\n    \n    if (typeof eventBus.consume !== 'function') {\n      this.log('❌', 'EventBus.consume method not available - cannot subscribe to auth events');\n      return;\n    }\n    \n    try {\n      this.eventConsumer = eventBus.consume(\n        AUTH_EVENTS.USER_AUTHENTICATED,\n        (data: unknown) => this.handleUserAuthenticated(data as UserAuthenticatedPayload)\n      );\n      \n      this.log('📡', 'Subscribed to authentication events', { \n        event: AUTH_EVENTS.USER_AUTHENTICATED,\n        hasConsumer: this.eventConsumer !== null\n      });\n    } catch (error) {\n      this.log('❌', 'Failed to subscribe to authentication events', { error });\n    }\n  }\n  \n  /**\n   * Handle user authenticated event from AuthService\n   */\n  private async handleUserAuthenticated(payload: UserAuthenticatedPayload): Promise<void> {\n    this.log('📥', 'Received user authenticated event', { \n      userId: payload.user.id,\n      username: payload.user.username,\n      operation: payload.operation,\n      accountId: payload.user.accountId\n    });\n    \n    try {\n      await this.updateAppHeaderWithUser(payload.user);\n    } catch (error) {\n      this.log('❌', 'Failed to update AppHeader with authenticated user', { error });\n    }\n  }\n  \n  /**\n   * Update AppHeader and UserMenu with authenticated user data\n   */\n  private async updateAppHeaderWithUser(authenticatedUser: AuthenticatedUser): Promise<void> {\n    const appHeader = await this.appHeaderRef.get();\n    if (!appHeader) {\n      this.log('⚠️', 'AppHeader not available - skipping UI update');\n      return;\n    }\n    \n    // Convert AuthenticatedUser to HeaderUser format for AppHeader\n    const headerUser: HeaderUser = {\n      username: authenticatedUser.username,\n      email: authenticatedUser.email,\n      avatar: undefined // Could be extended in the future\n    };\n    \n    try {\n      appHeader.updateUser(headerUser);\n      \n      this.log('✅', 'AppHeader updated with authenticated user', {\n        userId: authenticatedUser.id,\n        username: authenticatedUser.username,\n        email: authenticatedUser.email,\n        accountId: authenticatedUser.accountId\n      });\n    } catch (error) {\n      this.log('❌', 'Failed to update AppHeader with user data', { error });\n    }\n  }\n  \n  /**\n   * Unsubscribe from authentication events\n   */\n  private unsubscribeFromAuthEvents(): void {\n    if (this.eventConsumer) {\n      try {\n        this.eventConsumer.unregister();\n        this.log('📡', 'Unsubscribed from authentication events');\n      } catch (error) {\n        this.log('❌', 'Failed to unsubscribe from authentication events', { error });\n      } finally {\n        this.eventConsumer = null;\n      }\n    }\n  }\n  \n  \n  /**\n   * Setup user action handlers for UserMenu\n   */\n  private async setupUserActionHandlers(): Promise<void> {\n    const appHeader = await this.appHeaderRef.get();\n    if (!appHeader) {\n      this.log('⚠️', 'AppHeader not available - cannot setup user action handlers');\n      return;\n    }\n    \n    // Set up UserMenu handler for logout actions\n    appHeader.setUserMenuHandler((_userMenu: UserMenu) => {\n      this.log('🔧', 'Setting up UserMenu action handlers');\n      \n      // Note: This is a conceptual approach - actual implementation \n      // depends on how UserMenu exposes action handling\n      // \n      // Option 1: UserMenu could emit events that we subscribe to\n      // Option 2: UserMenu could accept action handlers \n      // Option 3: We could use DOM event delegation\n      \n      // For now, we'll document this as a integration point\n      this.log('📝', 'UserMenu action handlers setup - integration point for logout actions');\n    });\n  }\n  \n  // BaseService template method implementations\n  \n  /**\n   * Initialize AppHeaderBinderService - resolve dependencies and setup event subscription\n   */\n  protected async onInit(): Promise<void> {\n    this.log('🚀', 'Initializing AppHeaderBinderService...');\n    \n    // Test AuthService dependency via ServiceReference\n    const authService = await this.authServiceRef.get();\n    if (!authService) {\n      throw new AuthenticationError(\n        `AuthService could not be resolved via ServiceReference. ` +\n        `Check that AuthService is properly registered in LayoutContext.`\n      );\n    }\n    \n    this.log('✅', 'AuthService resolved', { \n      authServiceId: authService.getServiceId()\n    });\n    \n    // Subscribe to authentication events\n    this.subscribeToAuthEvents();\n    \n    // Setup user action handlers\n    await this.setupUserActionHandlers();\n    \n    // Update UI with current authentication state if configured\n    if (this.binderConfig.updateOnInit) {\n      await this.updateAppHeader(false);\n    }\n    \n    this.log('✅', 'AppHeaderBinderService initialized successfully');\n  }\n  \n  /**\n   * Cleanup AppHeaderBinderService resources\n   */\n  protected async onDestroy(): Promise<void> {\n    this.log('🧹', 'Destroying AppHeaderBinderService...');\n    \n    // Unsubscribe from events\n    this.unsubscribeFromAuthEvents();\n    \n    // ComponentReference will be cleaned up automatically\n    \n    this.log('✅', 'AppHeaderBinderService destroyed successfully');\n  }\n  \n  /**\n   * Get a ServiceReference for safely accessing registered AppHeaderBinderService\n   * \n   * @param context - The LayoutContext to resolve from\n   * @param config - Optional configuration for the ServiceReference\n   * @returns ServiceReference<AppHeaderBinderService> for lazy resolution\n   * \n   * @example\n   * ```typescript\n   * const binderRef = AppHeaderBinderService.getRegisteredReference(layoutContext);\n   * const binder = await binderRef.get(); // Returns AppHeaderBinderService | null\n   * if (binder) {\n   *   await binder.handleLogoutAction();\n   * }\n   * ```\n   */\n  static getRegisteredReference(\n    context: LayoutContext,\n    config?: ServiceReferenceConfig\n  ): ServiceReference<AppHeaderBinderService> {\n    return new ServiceReference<AppHeaderBinderService>(\n      context,\n      'auth.header-binder', // Standard service key for AppHeaderBinderService\n      config\n    );\n  }\n}\n","/**\n * User Service - Account Management and User Context\n * \n * Provides user account management functionality for multi-tenant scenarios.\n * Uses composition to work with AuthService for authentication concerns.\n * \n * Design Principles:\n * - Single Responsibility: Only handles user account management\n * - Composition over Inheritance: Uses AuthService instead of extending it\n * - Clean Separation: Authentication vs Account Management\n * - Dependency Injection: AuthService and SessionAuthProvider injected\n * \n * Service Registration:\n * - Registered with key 'user' in LayoutContext\n * - Depends on AuthService ('auth') and SessionAuthProvider services\n * - Publishes account.switched events on account context changes\n */\n\nimport { BaseService } from './BaseService';\nimport { SessionAuthProvider, Account } from '../auth/SessionAuthProvider';\nimport { MockSessionAuthProvider } from '../auth/MockSessionAuthProvider';\nimport { AuthService } from '../auth/AuthService';\nimport { AuthenticatedUser } from '../auth/AuthenticatedUser';\nimport { AuthenticationError } from '../auth/exceptions/AuthenticationExceptions';\nimport { ServiceReference, ServiceReferenceConfig } from './ServiceReference';\nimport type { LayoutContext } from '../contexts/LayoutContext';\nimport type { ServiceConfig } from '../interfaces/Service';\nimport { SelfIdentifyingService, validateServiceIdentity } from '../core/ServiceIdentity';\n\n/**\n * User service configuration\n */\nexport interface UserServiceConfig extends ServiceConfig {\n  /** AuthService service ID (default: uses AuthService.SERVICE_ID) */\n  authServiceId?: string;\n  /** SessionAuthProvider service ID (default: uses MockSessionAuthProvider.SERVICE_ID) */\n  sessionAuthProviderServiceId?: string;\n}\n\n/**\n * User account management service implementation\n * \n * Handles user account operations independent of core authentication.\n * Works alongside AuthService using composition pattern.\n */\nexport class UserService extends BaseService implements SelfIdentifyingService {\n  // 🎯 SELF-DECLARED IDENTITY CONSTANTS\n  static readonly SERVICE_ID = 'user.service' as const;\n  static readonly SERVICE_DESCRIPTION = 'User account management service - handles multi-tenant account operations';\n  static readonly SERVICE_DEPENDENCIES = [\n    AuthService.SERVICE_ID,\n    MockSessionAuthProvider.SERVICE_ID\n  ] as const;\n  private readonly userServiceConfig: Required<UserServiceConfig>;\n  private authService: AuthService | null = null;\n  private sessionAuthProvider: SessionAuthProvider | null = null;\n  \n  constructor(context: LayoutContext, config: UserServiceConfig = {}) {\n    super(context, config);\n    \n    this.userServiceConfig = {\n      autoInit: true,\n      allowReplace: false,\n      initTimeout: 5000,\n      authServiceId: AuthService.SERVICE_ID,                          // Type-safe reference!\n      sessionAuthProviderServiceId: MockSessionAuthProvider.SERVICE_ID, // Type-safe reference!\n      ...config,\n    };\n    \n    // Validate this service implements required identity interface\n    validateServiceIdentity(UserService, this);\n    \n    this.log('👤', 'UserService created', {\n      serviceId: UserService.SERVICE_ID,\n      authServiceId: this.userServiceConfig.authServiceId,\n      sessionAuthProviderServiceId: this.userServiceConfig.sessionAuthProviderServiceId,\n      dependencies: UserService.SERVICE_DEPENDENCIES\n    });\n  }\n  \n  /**\n   * Get service identifier for registration\n   */\n  getServiceId(): string {\n    return UserService.SERVICE_ID;\n  }\n  \n  /**\n   * Get current authenticated user (delegates to AuthService)\n   */\n  getCurrentUser(): AuthenticatedUser | null {\n    if (!this.authService) {\n      this.log('⚠️', 'AuthService not available - returning null');\n      return null;\n    }\n    return this.authService.getCurrentUser();\n  }\n  \n  /**\n   * Check if user is currently authenticated (delegates to AuthService)\n   */\n  isAuthenticated(): boolean {\n    if (!this.authService) {\n      return false;\n    }\n    return this.authService.isAuthenticated();\n  }\n  \n  /**\n   * Validate authentication (delegates to AuthService)\n   */\n  async validateAuthentication(operation: string = 'validation'): Promise<AuthenticatedUser> {\n    if (!this.authService) {\n      throw new AuthenticationError('AuthService not available - service may not be initialized');\n    }\n    return this.authService.validateAuthentication(operation);\n  }\n  \n  /**\n   * Get available accounts for current authenticated user\n   * \n   * @returns Promise<Account[]> - array of available accounts\n   * @throws AuthenticationError if not authenticated or retrieval fails\n   */\n  async getAccounts(): Promise<Account[]> {\n    if (!this.sessionAuthProvider) {\n      throw new AuthenticationError('SessionAuthProvider not available - service may not be initialized');\n    }\n    \n    if (!this.isAuthenticated()) {\n      throw new AuthenticationError('User not authenticated - cannot retrieve accounts');\n    }\n    \n    this.log('📋', 'Retrieving user accounts...');\n    \n    try {\n      const accounts = await this.sessionAuthProvider.getAccounts();\n      this.log('✅', 'Accounts retrieved successfully', { accountCount: accounts.length });\n      return accounts;\n    } catch (error) {\n      const authError = error instanceof AuthenticationError \n        ? error \n        : new AuthenticationError('Failed to retrieve accounts', error as Error);\n      \n      this.log('❌', 'Account retrieval failed', { error: authError.message });\n      throw authError;\n    }\n  }\n  \n  /**\n   * Switch to a different account context\n   * \n   * @param accountId - ID of the account to switch to\n   * @throws AuthenticationError if not authenticated or switch fails\n   */\n  async switchAccount(accountId: number): Promise<void> {\n    if (!this.sessionAuthProvider) {\n      throw new AuthenticationError('SessionAuthProvider not available - service may not be initialized');\n    }\n    \n    if (!this.isAuthenticated()) {\n      throw new AuthenticationError('User not authenticated - cannot switch accounts');\n    }\n    \n    this.log('🔄', 'Switching account...', { accountId });\n    \n    try {\n      await this.sessionAuthProvider.switchAccount(accountId);\n      \n      // Notify AuthService to refresh authentication with new account context\n      if (this.authService) {\n        await this.authService.validateAuthentication('account-switch');\n      }\n      \n      // Publish account switched event\n      this.publishAccountSwitchedEvent(accountId);\n      \n      this.log('✅', 'Account switch successful', { accountId });\n    } catch (error) {\n      const authError = error instanceof AuthenticationError \n        ? error \n        : new AuthenticationError('Account switch failed', error as Error);\n      \n      this.log('❌', 'Account switch failed', { accountId, error: authError.message });\n      throw authError;\n    }\n  }\n  \n  /**\n   * Get current active account ID\n   * \n   * @returns Promise<number | null> - current account ID or null\n   */\n  async getCurrentAccountId(): Promise<number | null> {\n    if (!this.sessionAuthProvider) {\n      return null;\n    }\n    \n    try {\n      return await this.sessionAuthProvider.getCurrentAccountId();\n    } catch (error) {\n      this.log('⚠️', 'Failed to get current account ID', { error });\n      return null;\n    }\n  }\n  \n  /**\n   * Publish account switched event\n   */\n  private publishAccountSwitchedEvent(accountId: number): void {\n    try {\n      const eventBus = this.getEventBus();\n      \n      if (typeof eventBus.publish === 'function') {\n        eventBus.publish('account.switched', { \n          accountId, \n          timestamp: new Date().toISOString(),\n          serviceId: UserService.SERVICE_ID\n        });\n        \n        this.log('📡', 'Published account switched event', { accountId });\n      } else {\n        this.log('❌', 'EventBus.publish method not available');\n      }\n    } catch (error) {\n      this.log('❌', 'Failed to publish account switched event', { error });\n      // Don't throw - event publication failure shouldn't break account switching\n    }\n  }\n  \n  // BaseService template method implementations\n  \n  /**\n   * Initialize UserService - resolve dependencies using their SERVICE_ID constants\n   */\n  protected async onInit(): Promise<void> {\n    this.log('🚀', 'Initializing UserService...');\n    \n    // Resolve AuthService dependency using its SERVICE_ID\n    const authServiceId = this.userServiceConfig.authServiceId;\n    this.authService = this.getService<AuthService>(authServiceId);\n    \n    if (!this.authService) {\n      throw new Error(\n        `AuthService '${authServiceId}' not found in LayoutContext. ` +\n        `Available services: [${this.getContext().getServiceNames().join(', ')}]`\n      );\n    }\n    \n    // Resolve SessionAuthProvider dependency using its SERVICE_ID\n    const sessionAuthProviderServiceId = this.userServiceConfig.sessionAuthProviderServiceId;\n    const sessionAuthProviderService = this.getService(sessionAuthProviderServiceId);\n    if (sessionAuthProviderService && 'getAccounts' in sessionAuthProviderService && 'switchAccount' in sessionAuthProviderService) {\n      this.sessionAuthProvider = sessionAuthProviderService as any as SessionAuthProvider;\n    } else {\n      this.sessionAuthProvider = null;\n    }\n    \n    if (!this.sessionAuthProvider) {\n      throw new Error(\n        `SessionAuthProvider '${sessionAuthProviderServiceId}' not found in LayoutContext. ` +\n        `Available services: [${this.getContext().getServiceNames().join(', ')}]`\n      );\n    }\n    \n    this.log('✅', 'Dependencies resolved', { \n      authServiceId,\n      sessionAuthProviderServiceId\n    });\n    \n    this.log('✅', 'UserService initialized successfully');\n  }\n  \n  /**\n   * Cleanup UserService resources\n   */\n  protected async onDestroy(): Promise<void> {\n    this.log('🧹', 'Destroying UserService...');\n    \n    // Clear references\n    this.authService = null;\n    this.sessionAuthProvider = null;\n    \n    this.log('✅', 'UserService destroyed successfully');\n  }\n  \n  /**\n   * Get a ServiceReference for safely accessing registered UserService\n   * \n   * @param context - The LayoutContext to resolve from\n   * @param config - Optional configuration for the ServiceReference\n   * @returns ServiceReference<UserService> for lazy resolution\n   * \n   * @example\n   * ```typescript\n   * const userServiceRef = UserService.getRegisteredReference(layoutContext);\n   * const userService = await userServiceRef.get(); // Returns UserService | null\n   * if (userService) {\n   *   const accounts = await userService.getAccounts();\n   * }\n   * ```\n   */\n  static getRegisteredReference(\n    context: LayoutContext,\n    config?: ServiceReferenceConfig\n  ): ServiceReference<UserService> {\n    return new ServiceReference<UserService>(\n      context,\n      UserService.SERVICE_ID, // Uses own static constant\n      config\n    );\n  }\n}","/*! Path-to-RegExp | MIT License | https://github.com/pillarjs/path-to-regexp */ // @ts-nocheck\nconst DEFAULT_DELIMITER = \"/\";\nconst NOOP_VALUE = (value) => value;\nconst ID_START = /^[$_\\p{ID_Start}]$/u;\nconst ID_CONTINUE = /^[$\\u200c\\u200d\\p{ID_Continue}]$/u;\nconst DEBUG_URL = \"https://git.new/pathToRegexpError\";\nconst SIMPLE_TOKENS = {\n    // Groups.\n    \"{\": \"{\",\n    \"}\": \"}\",\n    // Reserved.\n    \"(\": \"(\",\n    \")\": \")\",\n    \"[\": \"[\",\n    \"]\": \"]\",\n    \"+\": \"+\",\n    \"?\": \"?\",\n    \"!\": \"!\",\n};\n/**\n * Escape text for stringify to path.\n */\nfunction escapeText(str) {\n    return str.replace(/[{}()\\[\\]+?!:*]/g, \"\\\\$&\");\n}\n/**\n * Escape a regular expression string.\n */\nfunction escape(str) {\n    return str.replace(/[.+*?^${}()[\\]|/\\\\]/g, \"\\\\$&\");\n}\n/**\n * Tokenize input string.\n */\nfunction* lexer(str) {\n    const chars = [...str];\n    let i = 0;\n    function name() {\n        let value = \"\";\n        if (ID_START.test(chars[++i])) {\n            value += chars[i];\n            while (ID_CONTINUE.test(chars[++i])) {\n                value += chars[i];\n            }\n        }\n        else if (chars[i] === '\"') {\n            let pos = i;\n            while (i < chars.length) {\n                if (chars[++i] === '\"') {\n                    i++;\n                    pos = 0;\n                    break;\n                }\n                if (chars[i] === \"\\\\\") {\n                    value += chars[++i];\n                }\n                else {\n                    value += chars[i];\n                }\n            }\n            if (pos) {\n                throw new TypeError(`Unterminated quote at ${pos}: ${DEBUG_URL}`);\n            }\n        }\n        if (!value) {\n            throw new TypeError(`Missing parameter name at ${i}: ${DEBUG_URL}`);\n        }\n        return value;\n    }\n    while (i < chars.length) {\n        const value = chars[i];\n        const type = SIMPLE_TOKENS[value];\n        if (type) {\n            yield { type, index: i++, value };\n        }\n        else if (value === \"\\\\\") {\n            yield { type: \"ESCAPED\", index: i++, value: chars[i++] };\n        }\n        else if (value === \":\") {\n            const value = name();\n            yield { type: \"PARAM\", index: i, value };\n        }\n        else if (value === \"*\") {\n            const value = name();\n            yield { type: \"WILDCARD\", index: i, value };\n        }\n        else {\n            yield { type: \"CHAR\", index: i, value: chars[i++] };\n        }\n    }\n    return { type: \"END\", index: i, value: \"\" };\n}\nclass Iter {\n    constructor(tokens) {\n        this.tokens = tokens;\n    }\n    peek() {\n        if (!this._peek) {\n            const next = this.tokens.next();\n            this._peek = next.value;\n        }\n        return this._peek;\n    }\n    tryConsume(type) {\n        const token = this.peek();\n        if (token.type !== type)\n            return;\n        this._peek = undefined; // Reset after consumed.\n        return token.value;\n    }\n    consume(type) {\n        const value = this.tryConsume(type);\n        if (value !== undefined)\n            return value;\n        const { type: nextType, index } = this.peek();\n        throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}: ${DEBUG_URL}`);\n    }\n    text() {\n        let result = \"\";\n        let value;\n        while ((value = this.tryConsume(\"CHAR\") || this.tryConsume(\"ESCAPED\"))) {\n            result += value;\n        }\n        return result;\n    }\n}\n/**\n * Tokenized path instance.\n */\nexport class TokenData {\n    constructor(tokens) {\n        this.tokens = tokens;\n    }\n}\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str, options = {}) {\n    const { encodePath = NOOP_VALUE } = options;\n    const it = new Iter(lexer(str));\n    function consume(endType) {\n        const tokens = [];\n        while (true) {\n            const path = it.text();\n            if (path)\n                tokens.push({ type: \"text\", value: encodePath(path) });\n            const param = it.tryConsume(\"PARAM\");\n            if (param) {\n                tokens.push({\n                    type: \"param\",\n                    name: param,\n                });\n                continue;\n            }\n            const wildcard = it.tryConsume(\"WILDCARD\");\n            if (wildcard) {\n                tokens.push({\n                    type: \"wildcard\",\n                    name: wildcard,\n                });\n                continue;\n            }\n            const open = it.tryConsume(\"{\");\n            if (open) {\n                tokens.push({\n                    type: \"group\",\n                    tokens: consume(\"}\"),\n                });\n                continue;\n            }\n            it.consume(endType);\n            return tokens;\n        }\n    }\n    const tokens = consume(\"END\");\n    return new TokenData(tokens);\n}\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile(path, options = {}) {\n    const { encode = encodeURIComponent, delimiter = DEFAULT_DELIMITER } = options;\n    const data = path instanceof TokenData ? path : parse(path, options);\n    const fn = tokensToFunction(data.tokens, delimiter, encode);\n    return function path(data = {}) {\n        const [path, ...missing] = fn(data);\n        if (missing.length) {\n            throw new TypeError(`Missing parameters: ${missing.join(\", \")}`);\n        }\n        return path;\n    };\n}\nfunction tokensToFunction(tokens, delimiter, encode) {\n    const encoders = tokens.map((token) => tokenToFunction(token, delimiter, encode));\n    return (data) => {\n        const result = [\"\"];\n        for (const encoder of encoders) {\n            const [value, ...extras] = encoder(data);\n            result[0] += value;\n            result.push(...extras);\n        }\n        return result;\n    };\n}\n/**\n * Convert a single token into a path building function.\n */\nfunction tokenToFunction(token, delimiter, encode) {\n    if (token.type === \"text\")\n        return () => [token.value];\n    if (token.type === \"group\") {\n        const fn = tokensToFunction(token.tokens, delimiter, encode);\n        return (data) => {\n            const [value, ...missing] = fn(data);\n            if (!missing.length)\n                return [value];\n            return [\"\"];\n        };\n    }\n    const encodeValue = encode || NOOP_VALUE;\n    if (token.type === \"wildcard\" && encode !== false) {\n        return (data) => {\n            const value = data[token.name];\n            if (value == null)\n                return [\"\", token.name];\n            if (!Array.isArray(value) || value.length === 0) {\n                throw new TypeError(`Expected \"${token.name}\" to be a non-empty array`);\n            }\n            return [\n                value\n                    .map((value, index) => {\n                    if (typeof value !== \"string\") {\n                        throw new TypeError(`Expected \"${token.name}/${index}\" to be a string`);\n                    }\n                    return encodeValue(value);\n                })\n                    .join(delimiter),\n            ];\n        };\n    }\n    return (data) => {\n        const value = data[token.name];\n        if (value == null)\n            return [\"\", token.name];\n        if (typeof value !== \"string\") {\n            throw new TypeError(`Expected \"${token.name}\" to be a string`);\n        }\n        return [encodeValue(value)];\n    };\n}\n/**\n * Transform a path into a match function.\n */\nexport function match(path, options = {}) {\n    const { decode = decodeURIComponent, delimiter = DEFAULT_DELIMITER } = options;\n    const { regexp, keys } = pathToRegexp(path, options);\n    const decoders = keys.map((key) => {\n        if (decode === false)\n            return NOOP_VALUE;\n        if (key.type === \"param\")\n            return decode;\n        return (value) => value.split(delimiter).map(decode);\n    });\n    return function match(input) {\n        const m = regexp.exec(input);\n        if (!m)\n            return false;\n        const path = m[0];\n        const params = Object.create(null);\n        for (let i = 1; i < m.length; i++) {\n            if (m[i] === undefined)\n                continue;\n            const key = keys[i - 1];\n            const decoder = decoders[i - 1];\n            params[key.name] = decoder(m[i]);\n        }\n        return { path, params };\n    };\n}\nexport function pathToRegexp(path, options = {}) {\n    const { delimiter = DEFAULT_DELIMITER, end = true, sensitive = false, trailing = true, } = options;\n    const keys = [];\n    const sources = [];\n    const flags = sensitive ? \"\" : \"i\";\n    const paths = Array.isArray(path) ? path : [path];\n    const items = paths.map((path) => path instanceof TokenData ? path : parse(path, options));\n    for (const { tokens } of items) {\n        for (const seq of flatten(tokens, 0, [])) {\n            const regexp = sequenceToRegExp(seq, delimiter, keys);\n            sources.push(regexp);\n        }\n    }\n    let pattern = `^(?:${sources.join(\"|\")})`;\n    if (trailing)\n        pattern += `(?:${escape(delimiter)}$)?`;\n    pattern += end ? \"$\" : `(?=${escape(delimiter)}|$)`;\n    const regexp = new RegExp(pattern, flags);\n    return { regexp, keys };\n}\n/**\n * Generate a flat list of sequence tokens from the given tokens.\n */\nfunction* flatten(tokens, index, init) {\n    if (index === tokens.length) {\n        return yield init;\n    }\n    const token = tokens[index];\n    if (token.type === \"group\") {\n        const fork = init.slice();\n        for (const seq of flatten(token.tokens, 0, fork)) {\n            yield* flatten(tokens, index + 1, seq);\n        }\n    }\n    else {\n        init.push(token);\n    }\n    yield* flatten(tokens, index + 1, init);\n}\n/**\n * Transform a flat sequence of tokens into a regular expression.\n */\nfunction sequenceToRegExp(tokens, delimiter, keys) {\n    let result = \"\";\n    let backtrack = \"\";\n    let isSafeSegmentParam = true;\n    for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n        if (token.type === \"text\") {\n            result += escape(token.value);\n            backtrack += token.value;\n            isSafeSegmentParam || (isSafeSegmentParam = token.value.includes(delimiter));\n            continue;\n        }\n        if (token.type === \"param\" || token.type === \"wildcard\") {\n            if (!isSafeSegmentParam && !backtrack) {\n                throw new TypeError(`Missing text after \"${token.name}\": ${DEBUG_URL}`);\n            }\n            if (token.type === \"param\") {\n                result += `(${negate(delimiter, isSafeSegmentParam ? \"\" : backtrack)}+)`;\n            }\n            else {\n                result += `([\\\\s\\\\S]+)`;\n            }\n            keys.push(token);\n            backtrack = \"\";\n            isSafeSegmentParam = false;\n            continue;\n        }\n    }\n    return result;\n}\nfunction negate(delimiter, backtrack) {\n    if (backtrack.length < 2) {\n        if (delimiter.length < 2)\n            return `[^${escape(delimiter + backtrack)}]`;\n        return `(?:(?!${escape(delimiter)})[^${escape(backtrack)}])`;\n    }\n    if (delimiter.length < 2) {\n        return `(?:(?!${escape(backtrack)})[^${escape(delimiter)}])`;\n    }\n    return `(?:(?!${escape(backtrack)}|${escape(delimiter)})[\\\\s\\\\S])`;\n}\n/**\n * Stringify token data into a path string.\n */\nexport function stringify(data) {\n    return data.tokens\n        .map(function stringifyToken(token, index, tokens) {\n        if (token.type === \"text\")\n            return escapeText(token.value);\n        if (token.type === \"group\") {\n            return `{${token.tokens.map(stringifyToken).join(\"\")}}`;\n        }\n        const isSafe = isNameSafe(token.name) && isNextNameSafe(tokens[index + 1]);\n        const key = isSafe ? token.name : JSON.stringify(token.name);\n        if (token.type === \"param\")\n            return `:${key}`;\n        if (token.type === \"wildcard\")\n            return `*${key}`;\n        throw new TypeError(`Unexpected token: ${token}`);\n    })\n        .join(\"\");\n}\nfunction isNameSafe(name) {\n    const [first, ...rest] = name;\n    if (!ID_START.test(first))\n        return false;\n    return rest.every((char) => ID_CONTINUE.test(char));\n}\nfunction isNextNameSafe(token) {\n    if (token?.type !== \"text\")\n        return true;\n    return !ID_CONTINUE.test(token.value[0]);\n}\n//# sourceMappingURL=path-to-regexp.js.map","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\nimport { match } from './path-to-regexp.js';\nfunction decode(val) {\n    try {\n        return decodeURIComponent(val);\n    }\n    catch {\n        return val;\n    }\n}\nfunction matchRoute(route, baseUrl, options, pathname, parentParams) {\n    let matchResult;\n    let childMatches;\n    let childIndex = 0;\n    return {\n        next(routeToSkip) {\n            if (route === routeToSkip) {\n                return { done: true, value: false };\n            }\n            if (!matchResult) {\n                const rt = route;\n                const end = !rt.children;\n                if (!rt.match) {\n                    rt.match = match(rt.path || '', { end, ...options });\n                }\n                matchResult = rt.match(pathname);\n                if (matchResult) {\n                    const { path } = matchResult;\n                    matchResult.path =\n                        !end && path.charAt(path.length - 1) === '/' ? path.substr(1) : path;\n                    matchResult.params = { ...parentParams, ...matchResult.params };\n                    return {\n                        done: false,\n                        value: {\n                            route,\n                            baseUrl,\n                            path: matchResult.path,\n                            params: matchResult.params,\n                        },\n                    };\n                }\n            }\n            if (matchResult && route.children) {\n                while (childIndex < route.children.length) {\n                    if (!childMatches) {\n                        const childRoute = route.children[childIndex];\n                        childRoute.parent = route;\n                        childMatches = matchRoute(childRoute, baseUrl + matchResult.path, options, pathname.substr(matchResult.path.length), matchResult.params);\n                    }\n                    const childMatch = childMatches.next(routeToSkip);\n                    if (!childMatch.done) {\n                        return { done: false, value: childMatch.value };\n                    }\n                    childMatches = null;\n                    childIndex++;\n                }\n            }\n            return { done: true, value: false };\n        },\n    };\n}\nfunction resolveRoute(context, params) {\n    if (typeof context.route.action === 'function') {\n        return context.route.action(context, params);\n    }\n    return undefined;\n}\nfunction isChildRoute(parentRoute, childRoute) {\n    let route = childRoute;\n    while (route) {\n        route = route.parent;\n        if (route === parentRoute) {\n            return true;\n        }\n    }\n    return false;\n}\nclass UniversalRouter {\n    constructor(routes, options) {\n        if (!routes || typeof routes !== 'object') {\n            throw new TypeError('Invalid routes');\n        }\n        this.options = { decode, ...options };\n        this.baseUrl = this.options.baseUrl || '';\n        this.root = Array.isArray(routes)\n            ? { path: '', children: routes, parent: null }\n            : routes;\n        this.root.parent = null;\n    }\n    /**\n     * Traverses the list of routes in the order they are defined until it finds\n     * the first route that matches provided URL path string and whose action function\n     * returns anything other than `null` or `undefined`.\n     */\n    resolve(pathnameOrContext) {\n        const context = {\n            router: this,\n            ...this.options.context,\n            ...(typeof pathnameOrContext === 'string'\n                ? { pathname: pathnameOrContext }\n                : pathnameOrContext),\n        };\n        const matchResult = matchRoute(this.root, this.baseUrl, this.options, context.pathname.substr(this.baseUrl.length));\n        const resolve = this.options.resolveRoute || resolveRoute;\n        let matches;\n        let nextMatches;\n        let currentContext = context;\n        function next(resume, parent = !matches.done && matches.value.route, prevResult) {\n            const routeToSkip = prevResult === null && !matches.done && matches.value.route;\n            matches = nextMatches || matchResult.next(routeToSkip);\n            nextMatches = null;\n            if (!resume) {\n                if (matches.done || !isChildRoute(parent, matches.value.route)) {\n                    nextMatches = matches;\n                    return Promise.resolve(null);\n                }\n            }\n            if (matches.done) {\n                const error = new Error('Route not found');\n                error.status = 404;\n                return Promise.reject(error);\n            }\n            currentContext = { ...context, ...matches.value };\n            return Promise.resolve(resolve(currentContext, matches.value.params)).then((result) => {\n                if (result !== null && result !== undefined) {\n                    return result;\n                }\n                return next(resume, parent, result);\n            });\n        }\n        context['next'] = next;\n        return Promise.resolve()\n            .then(() => next(true, this.root))\n            .catch((error) => {\n            if (this.options.errorHandler) {\n                return this.options.errorHandler(error, currentContext);\n            }\n            throw error;\n        });\n    }\n}\nexport default UniversalRouter;\n//# sourceMappingURL=universal-router.js.map","/**\n * Route Context Implementation\n * Concrete implementation of RouteContext interface\n */\n\nimport { RouteContext, ErrorParams } from './RouteContext';\nimport { LayoutContext } from '../contexts/LayoutContext';\n\nexport class RouteContextImpl implements RouteContext {\n  private path: string;\n  private basePath: string;\n  private params: Record<string, string>;\n  private accountId?: string;\n  private layoutContext: LayoutContext;\n  private _failed: boolean = false;\n  private _failure: ErrorParams | null = null;\n\n  constructor(\n    path: string,\n    params: Record<string, string>,\n    layoutContext: LayoutContext,\n    accountId?: string,\n    basePath?: string\n  ) {\n    this.path = path;\n    this.basePath = basePath || '/';\n    this.params = params;\n    this.layoutContext = layoutContext;\n    this.accountId = accountId;\n  }\n\n  /**\n   * Get the current route path (full path)\n   */\n  getPath(): string {\n    return this.path;\n  }\n\n  /**\n   * Get the base path for this route context\n   */\n  getBasePath(): string {\n    return this.basePath;\n  }\n\n  /**\n   * Get route parameters\n   */\n  getParams(): Record<string, string> {\n    return { ...this.params };\n  }\n\n  /**\n   * Get a specific route parameter\n   */\n  getParam(key: string): string | undefined {\n    return this.params[key];\n  }\n\n  /**\n   * Check if a parameter exists\n   */\n  hasParam(key: string): boolean {\n    return key in this.params;\n  }\n\n  /**\n   * Get account ID if available\n   */\n  getAccountId(): string | undefined {\n    return this.accountId;\n  }\n\n  /**\n   * Get layout context for accessing services and layout functionality\n   */\n  getLayoutContext(): LayoutContext {\n    return this.layoutContext;\n  }\n\n  /**\n   * Mark this route as failed with error information\n   */\n  fail(error: ErrorParams): void {\n    this._failed = true;\n    this._failure = error;\n  }\n\n  /**\n   * Check if this route has failed\n   */\n  failed(): boolean {\n    return this._failed;\n  }\n\n  /**\n   * Get failure information if route failed\n   */\n  failure(): ErrorParams | null {\n    return this._failure;\n  }\n}\n","/**\n * Hierarchical BreadcrumbsManager Implementation\n * \n * This implementation provides page-scoped breadcrumb management where each page\n * can only modify breadcrumbs at or below its level in the hierarchy.\n * \n * The hierarchy is determined by:\n * 1. Finding the current page's position in the global breadcrumb trail\n * 2. Scoping all operations to affect only breadcrumbs at or below that position\n * 3. Leaving parent-level breadcrumbs untouched\n */\n\nimport type { BreadcrumbsManager } from '../interfaces/BreadcrumbsManager';\nimport type { BreadcrumbItem } from '../interfaces/BreadcrumbItem';\nimport type { BreadcrumbsComponent } from '../components/BreadcrumbsComponent';\nimport type { LayoutContext } from './LayoutContext';\nimport type { ActivePage } from '../interfaces/ActivePage';\nimport { LoggerFactory } from '../logging/LoggerFactory';\nimport { Logger } from '../logging/Logger';\n\nexport class HierarchicalBreadcrumbsManagerImpl implements BreadcrumbsManager {\n  private layoutContext: LayoutContext;\n  private activePage: ActivePage;\n  private enableLogging: boolean;\n  private logger: Logger;\n\n  constructor(\n    layoutContext: LayoutContext, \n    activePage: ActivePage, \n    enableLogging: boolean = false\n  ) {\n    this.layoutContext = layoutContext;\n    this.activePage = activePage;\n    this.enableLogging = enableLogging;\n    this.logger = LoggerFactory.getInstance().getLogger('HierarchicalBreadcrumbs');\n  }\n\n  /**\n   * Get the underlying BreadcrumbsComponent (with async safety)\n   */\n  private getBreadcrumbsComponent(): BreadcrumbsComponent | null {\n    const header = this.layoutContext.getHeader();\n    return header?.getBreadcrumbsComponent() || null;\n  }\n\n  /**\n   * Find the current page's position in the breadcrumb hierarchy\n   * Returns the index where the current page starts its scope, or -1 if not found\n   */\n  private findPageScopeIndex(): number {\n    const component = this.getBreadcrumbsComponent();\n    if (!component) {\n      // Component not ready - return -1 to indicate unavailable\n      return -1;\n    }\n\n    const items = component.getBreadcrumbs();\n    const pageId = this.activePage.getPageId();\n    \n    // First, try exact match (case-sensitive)\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].id === pageId) {\n        return i;\n      }\n    }\n    \n    // Then try case-insensitive match\n    const pageIdLower = pageId.toLowerCase();\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].id.toLowerCase() === pageIdLower) {\n        if (this.enableLogging) {\n          this.logger.debug(`Found case-insensitive match for ${pageId}: ${items[i].id} at index ${i}`);\n        }\n        return i;\n      }\n    }\n    \n    // Page ID not found - fallback to append-only mode (after last item)\n    const fallbackIndex = items.length;\n    if (this.enableLogging) {\n      this.logger.warn(`Page ID \"${pageId}\" not found in breadcrumbs. Scope limited to append-only after index ${fallbackIndex}`, {\n        currentBreadcrumbs: items.map(item => item.id),\n        pageId: pageId,\n        fallbackScope: 'append-only'\n      });\n    }\n    return fallbackIndex;\n  }\n\n  /**\n   * Get the current breadcrumbs that are in scope for this page\n   */\n  private getScopedBreadcrumbs(): { parentItems: BreadcrumbItem[], scopedItems: BreadcrumbItem[], scopeIndex: number } | null {\n    const component = this.getBreadcrumbsComponent();\n    if (!component) {\n      return null; // Component not available\n    }\n\n    const allItems = component.getBreadcrumbs();\n    const scopeIndex = this.findPageScopeIndex();\n    \n    if (scopeIndex === -1) {\n      return null; // Component not ready\n    }\n\n    const parentItems = allItems.slice(0, scopeIndex);\n    const scopedItems = allItems.slice(scopeIndex);\n    \n    return { parentItems, scopedItems, scopeIndex };\n  }\n\n  /**\n   * Apply scoped changes back to the global breadcrumb trail\n   */\n  private applyScopedChanges(newScopedItems: BreadcrumbItem[]): void {\n    const scopeData = this.getScopedBreadcrumbs();\n    if (!scopeData) {\n      if (this.enableLogging) {\n        this.logger.warn('Component not available for applying changes');\n      }\n      return;\n    }\n\n    const { parentItems } = scopeData;\n    const newFullTrail = [...parentItems, ...newScopedItems];\n    \n    const component = this.getBreadcrumbsComponent();\n    if (component) {\n      component.setBreadcrumbs(newFullTrail);\n      if (this.enableLogging) {\n        this.logger.debug(`Applied scoped changes for ${this.activePage.getPageId()}: ${newScopedItems.length} scoped items`);\n      }\n    }\n  }\n\n  /**\n   * Set the complete breadcrumb trail for this page's scope\n   */\n  set(items: BreadcrumbItem[]): void {\n    // In hierarchical mode, 'set' replaces only the scoped portion\n    this.applyScopedChanges(items);\n  }\n\n  /**\n   * Clear breadcrumbs in this page's scope\n   */\n  clear(): void {\n    // Clear only the scoped portion, leaving parent breadcrumbs intact\n    this.applyScopedChanges([]);\n  }\n\n  /**\n   * Add a breadcrumb item to this page's scope\n   */\n  add(item: BreadcrumbItem): void {\n    const scopeData = this.getScopedBreadcrumbs();\n    if (!scopeData) {\n      if (this.enableLogging) {\n        this.logger.warn('Component not available for add operation');\n      }\n      return;\n    }\n\n    const { scopedItems } = scopeData;\n    const newScopedItems = [...scopedItems, item];\n    this.applyScopedChanges(newScopedItems);\n    \n    if (this.enableLogging) {\n      this.logger.debug(`Added: ${item.text}`);\n    }\n  }\n\n  /**\n   * Remove a breadcrumb item by ID from this page's scope\n   */\n  remove(id: string): void {\n    const scopeData = this.getScopedBreadcrumbs();\n    if (!scopeData) {\n      if (this.enableLogging) {\n        this.logger.warn('Component not available for remove operation');\n      }\n      return;\n    }\n\n    const { scopedItems } = scopeData;\n    const newScopedItems = scopedItems.filter(item => item.id !== id);\n    \n    if (newScopedItems.length === scopedItems.length) {\n      // Item not found in scope - silently ignore (hierarchical behavior)\n      if (this.enableLogging) {\n        this.logger.debug(`Item ${id} not in scope, ignoring`);\n      }\n      return;\n    }\n    \n    this.applyScopedChanges(newScopedItems);\n    \n    if (this.enableLogging) {\n      this.logger.debug(`Removed: ${id}`);\n    }\n  }\n\n  /**\n   * Update a breadcrumb item in this page's scope\n   */\n  update(id: string, updates: Partial<BreadcrumbItem>): void {\n    const scopeData = this.getScopedBreadcrumbs();\n    if (!scopeData) {\n      if (this.enableLogging) {\n        this.logger.warn('Component not available for update operation');\n      }\n      return;\n    }\n\n    const { scopedItems } = scopeData;\n    const itemIndex = scopedItems.findIndex(item => item.id === id);\n    \n    if (itemIndex === -1) {\n      // Item not found in scope - silently ignore (hierarchical behavior)\n      if (this.enableLogging) {\n        this.logger.debug(`Item ${id} not in scope for update, ignoring`);\n      }\n      return;\n    }\n    \n    const newScopedItems = [...scopedItems];\n    newScopedItems[itemIndex] = { ...newScopedItems[itemIndex], ...updates };\n    \n    this.applyScopedChanges(newScopedItems);\n    \n    if (this.enableLogging) {\n      this.logger.debug(`Updated: ${id}`);\n    }\n  }\n\n  /**\n   * Get current breadcrumbs in this page's scope\n   */\n  get(): BreadcrumbItem[] {\n    const scopeData = this.getScopedBreadcrumbs();\n    if (!scopeData) {\n      if (this.enableLogging) {\n        this.logger.warn('Component not available for get operation');\n      }\n      return [];\n    }\n\n    return scopeData.scopedItems;\n  }\n\n  /**\n   * Check if breadcrumbs are available\n   */\n  isAvailable(): boolean {\n    return this.getBreadcrumbsComponent() !== null;\n  }\n\n  /**\n   * Get debug information about the current scope\n   */\n  getDebugInfo(): { pageId: string, scopeIndex: number, parentCount: number, scopedCount: number, totalCount: number, isFallbackMode: boolean, scopeType: string } | null {\n    const scopeData = this.getScopedBreadcrumbs();\n    if (!scopeData) {\n      return null;\n    }\n\n    const component = this.getBreadcrumbsComponent();\n    if (!component) {\n      return null;\n    }\n\n    const allItems = component.getBreadcrumbs();\n    const isFallbackMode = scopeData.scopeIndex === allItems.length;\n    const scopeType = isFallbackMode ? 'append-only' : 'hierarchical';\n\n    return {\n      pageId: this.activePage.getPageId(),\n      scopeIndex: scopeData.scopeIndex,\n      parentCount: scopeData.parentItems.length,\n      scopedCount: scopeData.scopedItems.length,\n      totalCount: scopeData.parentItems.length + scopeData.scopedItems.length,\n      isFallbackMode: isFallbackMode,\n      scopeType: scopeType\n    };\n  }\n}","/**\n * PageContext Implementation\n * \n * Concrete implementation of PageContext that provides page-level functionality\n * including breadcrumb management and other future page features.\n */\n\nimport type { PageContext, PageContextConfig } from '../interfaces/PageContext';\nimport type { BreadcrumbsManager } from '../interfaces/BreadcrumbsManager';\nimport type { ActivePage } from '../interfaces/ActivePage';\nimport type { LayoutContext } from './LayoutContext';\nimport type { RouteContext } from '../router/RouteContext';\nimport { HierarchicalBreadcrumbsManagerImpl } from './HierarchicalBreadcrumbsManagerImpl';\nimport { LoggerFactory } from '../logging/LoggerFactory';\nimport { Logger } from '../logging/Logger';\n\nexport class PageContextImpl implements PageContext {\n  private page: ActivePage | null;\n  private routeContext: RouteContext;\n  private layoutContext: LayoutContext;\n  private config: Required<PageContextConfig>;\n  private createdAt: number;\n  private breadcrumbsManager: BreadcrumbsManager;\n  private ready: boolean = false;\n  private logger: Logger;\n\n  constructor(\n    routeContext: RouteContext,\n    layoutContext: LayoutContext,\n    config: PageContextConfig = {},\n    page?: ActivePage\n  ) {\n    this.page = page || null;\n    this.routeContext = routeContext;\n    this.layoutContext = layoutContext;\n    this.createdAt = Date.now();\n    \n    // Apply configuration with defaults - reduce default delay for faster UI\n    this.config = {\n      initializeBreadcrumbs: config.initializeBreadcrumbs ?? true,\n      breadcrumbInitDelay: config.breadcrumbInitDelay ?? 0, // Immediate by default for responsive UI\n      enableDebugLogging: config.enableDebugLogging ?? false,\n    };\n\n    this.logger = LoggerFactory.getInstance().getLogger('PageContext');\n\n    // Initialize breadcrumbs manager - will be properly initialized when page is set\n    this.breadcrumbsManager = this.createBreadcrumbsManager();\n\n    // Initialize immediately for faster UI updates\n    // Use setTimeout only if explicit delay is configured\n    if (this.config.breadcrumbInitDelay > 0) {\n      setTimeout(() => {\n        this.initialize();\n      }, this.config.breadcrumbInitDelay);\n    } else {\n      // Initialize immediately for responsive UI\n      setTimeout(() => {\n        this.initialize();\n      }, 0);\n    }\n\n    if (this.config.enableDebugLogging) {\n      const pageInfo = this.page ? `page: ${this.page.getPageId()}` : 'no page yet';\n      this.logger.debug(`Created (${pageInfo})`, {\n        config: this.config,\n        createdAt: this.createdAt\n      });\n    }\n  }\n\n  /**\n   * Initialize the page context\n   */\n  private initialize(): void {\n    if (this.config.initializeBreadcrumbs) {\n      // Verify breadcrumbs are available\n      if (this.breadcrumbsManager.isAvailable()) {\n        this.ready = true;\n        if (this.config.enableDebugLogging) {\n          const pageInfo = this.page ? this.page.getPageId() : 'no page yet';\n          this.logger.debug(`Initialized successfully (${pageInfo})`);\n        }\n      } else {\n        // Retry after a short delay\n        if (this.config.enableDebugLogging) {\n          this.logger.warn('Breadcrumbs not available yet, retrying...');\n        }\n        setTimeout(() => {\n          this.initialize();\n        }, 50);\n      }\n    } else {\n      this.ready = true;\n      if (this.config.enableDebugLogging) {\n        const pageInfo = this.page ? this.page.getPageId() : 'no page yet';\n        this.logger.debug(`Initialized (breadcrumbs disabled) (${pageInfo})`);\n      }\n    }\n  }\n\n  /**\n   * Get the page this context is associated with (null until page is created)\n   */\n  getPage(): ActivePage | null {\n    return this.page;\n  }\n\n  /**\n   * Get route context for this page\n   */\n  getRouteContext(): RouteContext {\n    return this.routeContext;\n  }\n\n  /**\n   * Associate a page with this context (called by RouterService after page creation)\n   */\n  setPage(page: ActivePage): void {\n    this.page = page;\n    \n    // Recreate breadcrumbs manager with the actual page\n    this.breadcrumbsManager = this.createBreadcrumbsManager();\n    \n    if (this.config.enableDebugLogging) {\n      this.logger.debug(`Page associated: ${page.getPageId()}`);\n    }\n  }\n\n  /**\n   * Factory method to create a page with this context\n   * Called by RouterService with page provider function\n   */\n  createPage<T extends ActivePage>(pageProvider: (mainContent: any, pageContext: PageContext) => T, mainContent: any): T {\n    // Create the page using the provider function\n    const page = pageProvider(mainContent, this);\n    \n    // Associate the page with this context\n    this.setPage(page);\n    \n    if (this.config.enableDebugLogging) {\n      this.logger.debug(`Created and associated page: ${page.getPageId()}`);\n    }\n    \n    return page;\n  }\n\n  /**\n   * Access breadcrumb management functionality\n   */\n  breadcrumbs(): BreadcrumbsManager {\n    return this.breadcrumbsManager;\n  }\n\n  /**\n   * Check if the page context is ready\n   */\n  isReady(): boolean {\n    return this.ready;\n  }\n\n  /**\n   * Get context creation timestamp\n   */\n  getCreatedAt(): number {\n    return this.createdAt;\n  }\n\n  /**\n   * Get context configuration\n   */\n  getConfig(): Required<PageContextConfig> {\n    return { ...this.config };\n  }\n\n  /**\n   * Get layout context\n   */\n  getLayoutContext(): LayoutContext {\n    return this.layoutContext;\n  }\n\n  /**\n   * Enable or disable debug logging\n   */\n  setDebugLogging(enabled: boolean): void {\n    this.config.enableDebugLogging = enabled;\n    if (this.breadcrumbsManager instanceof HierarchicalBreadcrumbsManagerImpl) {\n      // Update the breadcrumbs manager logging setting\n      (this.breadcrumbsManager as any).enableLogging = enabled;\n    }\n  }\n\n  /**\n   * Create breadcrumbs manager, handling null page case\n   */\n  private createBreadcrumbsManager(): BreadcrumbsManager {\n    if (this.page) {\n      return new HierarchicalBreadcrumbsManagerImpl(\n        this.layoutContext,\n        this.page,\n        this.config.enableDebugLogging\n      );\n    } else {\n      // Create a placeholder breadcrumbs manager until page is set\n      return {\n        set: () => {},\n        clear: () => {},\n        add: () => {},\n        remove: () => {},\n        update: () => {},\n        get: () => [],\n        isAvailable: () => false\n      };\n    }\n  }\n}\n","/**\n * Base PageComponent Class\n *\n * Provides common functionality for all page-level components including:\n * - Initialization and cleanup lifecycle\n * - Event handling and delegation\n * - Layout management\n * - Common UI interactions\n * - Error handling\n */\n\nimport MainContentImpl from \"./MainContentImpl\";\nimport { ActivePage, PageInfo } from \"../interfaces/ActivePage\";\nimport BaseComponent from './BaseComponent';\nimport type { PageContext } from \"../interfaces/PageContext\";\nimport {\n  ChainHotkeyProvider,\n  ChainHotkeyHandler,\n  HotkeyExecutionContext,\n} from \"../hotkeys/HotkeyChainSystem\";\nimport { LoggerFactory } from '../logging/LoggerFactory';\nimport { Logger } from '../logging/Logger';\n\nexport interface PageComponentConfig {\n  pageTitle?: string;\n  layoutConfig?: any;\n  pageId?: string; // Optional override for page ID (deprecated - comes from PageContext)\n  pagePath?: string; // URL path for this page (deprecated - comes from PageContext)\n  params?: Record<string, string>; // Route parameters (deprecated - comes from PageContext)\n}\n\nexport abstract class PageComponent extends BaseComponent implements ChainHotkeyProvider, ActivePage {\n  protected initialized: boolean = false;\n  protected destroyed: boolean = false;\n  protected mainContent: MainContentImpl;\n  protected config: PageComponentConfig;\n  protected readonly logger: Logger;\n  protected eventListeners: Array<{\n    element: Element | Window | Document;\n    event: string;\n    handler: EventListener;\n  }> = [];\n  protected pageTitle: string;\n  protected pageId: string;\n  protected pagePath: string;\n  protected params: Record<string, string> = {};\n  protected chainProviderUnsubscriber: (() => void) | null = null;\n  \n  // PageContext integration (provided via constructor)\n  protected pageContext: PageContext;\n\n  constructor(mainContent: MainContentImpl, pageContext: PageContext, config: PageComponentConfig = {}) {\n    super();\n    this.logger = LoggerFactory.getInstance().getLogger(`PageComponent:${this.constructor.name}`);\n    this.mainContent = mainContent;\n    this.pageContext = pageContext;\n    this.config = config;\n\n    // Get page info from PageContext (route-based)\n    const routeContext = pageContext.getRouteContext();\n    this.pagePath = routeContext.getPath();\n    this.params = routeContext.getParams();\n    \n    // Use config overrides or defaults\n    this.pageTitle = config.pageTitle || \"Page\";\n    this.pageId = config.pageId || this.constructor.name;\n\n    // Page association will be handled by RouterService\n  }\n\n  /**\n   * Initialize the page component\n   * Must be called manually by the RouterService or page consumers\n   */\n  public async init(): Promise<void> {\n    if (!this.mainContent.isReady()) {\n      this.logger.warn('mainContent not ready');\n      return;\n    }\n\n    if (this.initialized || this.destroyed) {\n      this.logger.warn('Cannot initialize - already initialized or destroyed');\n      return;\n    }\n\n    try {\n      this.logger.debug('Initializing...');\n\n      // Wait for DOM if needed\n      if (document.readyState === \"loading\") {\n        await new Promise((resolve) => {\n          document.addEventListener(\"DOMContentLoaded\", resolve, {\n            once: true,\n          });\n        });\n      }\n\n      // Initialize page-specific functionality\n      await this.onInit();\n\n      // Set up event listeners\n      this.setupEventListeners();\n\n      // Set up keyboard shortcuts\n      this.setupKeyboardShortcuts();\n      \n      // Register this page as chain hotkey provider\n      this.logger.debug('Registering as chain hotkey provider...');\n      this.chainProviderUnsubscriber = this.layoutContext.registerChainProvider(this);\n      this.logger.debug('Chain provider registered successfully');\n      \n      // Register this page as the active page\n      this.layoutContext.setActivePage(this);\n\n      this.initialized = true;\n      this.logger.info('Initialized successfully');\n\n      // Trigger post-initialization hook\n      await this.onPostInit();\n    } catch (error) {\n      this.logger.error('Initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Cleanup and destroy the page component\n   */\n  public async destroy(): Promise<void> {\n    if (this.destroyed) {\n      this.logger.warn('Already destroyed');\n      return;\n    }\n\n    try {\n      this.logger.debug('Destroying...');\n\n      // Cleanup chain provider\n      this.cleanupChainProvider();\n      \n      // Deactivate this page if it's currently active\n      this.layoutContext.deactivatePage(this);\n      \n      // PageContext cleanup handled by RouterService\n      \n      try {\n        // Cleanup page-specific functionality\n        this.onDestroy();\n      } catch (error) {\n        this.logger.error('onDestroy failed', error);\n      }\n\n      // Remove all event listeners\n      this.removeAllEventListeners();\n\n      // Clear any intervals/timeouts\n      this.clearTimers();\n\n      this.destroyed = true;\n      this.initialized = false;\n\n      this.logger.info('Destroyed successfully');\n    } catch (error) {\n      this.logger.error('Destruction failed', error);\n      // Still mark as destroyed to prevent repeated attempts\n      this.destroyed = true;\n      this.initialized = false;\n    }\n  }\n\n  /**\n   * Add an event listener with automatic cleanup tracking\n   */\n  protected addEventListener(\n    element: Element | Window | Document,\n    event: string,\n    handler: EventListener,\n    options?: boolean | AddEventListenerOptions,\n  ): void {\n    element.addEventListener(event, handler, options);\n    this.eventListeners.push({ element, event, handler });\n  }\n\n  /**\n   * Remove all tracked event listeners\n   */\n  private removeAllEventListeners(): void {\n    this.eventListeners.forEach(({ element, event, handler }) => {\n      element.removeEventListener(event, handler);\n    });\n    this.eventListeners = [];\n  }\n\n  /**\n   * Handle event delegation for data-action attributes\n   * Scoped to MainContent container instead of global document\n   */\n  protected setupEventDelegation(): void {\n    const container = this.mainContent.getElement();\n    if (container) {\n      this.addEventListener(container, \"click\", (event) => {\n        const target = event.target as Element;\n        const actionElement = target.closest(\"[data-action]\");\n\n        if (actionElement) {\n          const action = actionElement.getAttribute(\"data-action\");\n          if (action) {\n            event.preventDefault();\n            this.handleAction(action, actionElement, event);\n          }\n        }\n      });\n    } else {\n      this.logger.warn('{}: Cannot setup event delegation - MainContent container not available', this.constructor.name);\n    }\n  }\n\n  /**\n   * Handle data-action clicks\n   */\n  protected handleAction(action: string, element: Element, event: Event): void {\n    const methodName = `handle${this.capitalizeFirst(action)}`;\n\n    if (typeof (this as any)[methodName] === \"function\") {\n      (this as any)[methodName](element, event);\n    } else {\n      this.logger.warn(\n        '{}: No handler found for action \"{}\" ({})',\n        this.constructor.name, action, methodName\n      );\n    }\n  }\n\n  /**\n   * Set up common keyboard shortcuts via LayoutContext hotkey system\n   * Page-specific hotkeys are registered via getPageHotkeys() method\n   */\n  protected setupKeyboardShortcuts(): void {\n    // Page-specific hotkeys are automatically registered via HotkeyProvider interface\n    // when setActiveHotkeyProvider(this) is called in init()\n    this.logger.debug('{}: Page-specific hotkeys will be registered via HotkeyProvider interface', this.constructor.name);\n  }\n\n  // Note: handleKeydown() method removed - keyboard shortcuts now handled via LayoutContext hotkey system\n\n  /**\n   * Handle Escape key - override in subclasses\n   */\n  protected handleEscape(_event: KeyboardEvent): void {\n    // Close any open dropdowns, modals, etc.\n    const openDropdowns = document.querySelectorAll('[aria-expanded=\"true\"]');\n    openDropdowns.forEach((dropdown) => {\n      dropdown.setAttribute(\"aria-expanded\", \"false\");\n    });\n  }\n\n  /**\n   * Utility method to capitalize first letter\n   */\n  private capitalizeFirst(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  /**\n   * Clear any timers - override in subclasses if needed\n   */\n  protected clearTimers(): void {\n    // Override in subclasses to clear specific timers\n  }\n\n  /**\n   * Update the page title\n   */\n  protected updatePageTitle(title: string): void {\n    this.pageTitle = title;\n    document.title = title;\n    \n    // Also update title element if it exists\n    const titleElement = document.getElementById('current_page_title');\n    if (titleElement) {\n      titleElement.textContent = title;\n    }\n  }\n\n  /**\n   * Show loading state\n   */\n  protected showLoading(message?: string): void {\n    const loadingMessage = message || 'Loading...';\n    this.logger.info('{}: {}', this.constructor.name, loadingMessage);\n  }\n\n  /**\n   * Hide loading state\n   */\n  protected hideLoading(): void {\n    this.logger.info('{}: Loading complete', this.constructor.name);\n  }\n\n  /**\n   * Show error message\n   */\n  protected showError(message: string, error?: Error): void {\n    this.logger.error('{}: {}', this.constructor.name, message, error);\n  }\n\n  /**\n   * Get element with error handling\n   */\n  protected getElement(\n    selector: string,\n    required: boolean = true,\n  ): Element | null {\n    const element = document.querySelector(selector);\n\n    if (!element && required) {\n      this.logger.error(\n        '{}: Required element not found: {}',\n        this.constructor.name, selector\n      );\n    }\n\n    return element;\n  }\n\n  /**\n   * Get elements with error handling\n   */\n  protected getElements(selector: string): NodeListOf<Element> {\n    return document.querySelectorAll(selector);\n  }\n\n  // Abstract methods that subclasses must implement\n\n  /**\n   * Initialize page-specific functionality\n   * Called during init() - override in subclasses\n   */\n  protected abstract onInit(): Promise<void> | void;\n\n\n  /**\n   * Cleanup page-specific functionality\n   * Called during destroy() - override in subclasses\n   */\n  protected abstract onDestroy(): void;\n\n  /**\n   * Set up page-specific event listeners\n   * Called during init() - override in subclasses\n   */\n  protected abstract setupEventListeners(): void;\n\n  // Getters\n\n  public get isInitialized(): boolean {\n    return this.initialized;\n  }\n\n  public get isDestroyed(): boolean {\n    return this.destroyed;\n  }\n\n  public get getPageTitle(): string {\n    return this.pageTitle;\n  }\n\n  /**\n   * Set route parameters\n   */\n  public setParams(params: Record<string, string>): void {\n    this.params = params;\n  }\n\n  /**\n   * Get current route parameters\n   */\n  public getParams(): Record<string, string> {\n    return this.params;\n  }\n\n  /**\n   * Get layout context through MainContent\n   */\n  protected get layoutContext() {\n    return this.mainContent.getLayoutContext();\n  }\n  \n  /**\n   * Get PageContext\n   * @returns PageContext instance\n   */\n  protected getPageContext(): PageContext {\n    return this.pageContext;\n  }\n  \n  /**\n   * Check if PageContext is available (always true with new architecture)\n   * @returns True (PageContext is always available)\n   */\n  protected hasPageContext(): boolean {\n    return true;\n  }\n  \n  \n  // =================================================================================\n  // ChainHotkeyProvider Implementation\n  // =================================================================================\n  \n  /**\n   * Get provider identifier for chain hotkey system\n   */\n  getHotkeyProviderId(): string {\n    return this.constructor.name;\n  }\n  \n  /**\n   * Get provider priority - Page components get lower priority (200)\n   */\n  getProviderPriority(): number {\n    return 200; // Lower priority than UI components, higher than fallback\n  }\n  \n  /**\n   * Get chain hotkeys - override in subclasses to provide hotkeys\n   * Base implementation provides common ESC key handling\n   */\n  getChainHotkeys(): Map<string, ChainHotkeyHandler> | null {\n    const hotkeys = new Map<string, ChainHotkeyHandler>();\n    \n    // Common ESC key handler for pages (cooperative)\n    hotkeys.set('Escape', {\n      key: 'Escape',\n      providerId: this.getHotkeyProviderId(),\n      enabled: true,\n      handler: (ctx: HotkeyExecutionContext) => {\n        this.logger.debug('🔤 {} - ESC key pressed via chain system', this.constructor.name);\n        this.handleEscape(ctx.event);\n        ctx.next(); // Allow other handlers to also process ESC\n      },\n      description: `ESC key handling for ${this.constructor.name}`,\n      priority: this.getProviderPriority(),\n      enable: () => { /* Always enabled */ },\n      disable: () => { /* Could disable if needed */ },\n      isEnabled: () => this.initialized && !this.destroyed\n    });\n    \n    return hotkeys;\n  }\n  \n  /**\n   * Default chain behavior - continue to lower priority handlers\n   */\n  getDefaultChainBehavior(): 'next' | 'break' {\n    return 'next'; // Pages are cooperative, allow fallback handlers\n  }\n  \n  /**\n   * Cleanup chain provider\n   */\n  private cleanupChainProvider(): void {\n    if (this.chainProviderUnsubscriber) {\n      this.chainProviderUnsubscriber();\n      this.chainProviderUnsubscriber = null;\n      this.logger.debug('{} - Chain provider unregistered', this.constructor.name);\n    }\n  }\n  \n  // =================================================================================\n  // ActivePage Implementation\n  // =================================================================================\n  \n  /**\n   * Get information about this page\n   */\n  getPageInfo(): PageInfo {\n    return {\n      id: this.pageId,\n      name: this.pageTitle,\n      path: this.pagePath,\n      metadata: {\n        className: this.constructor.name,\n        initialized: this.initialized,\n        destroyed: this.destroyed,\n      }\n    };\n  }\n  \n  /**\n   * Get unique identifier for this page instance\n   */\n  getPageId(): string {\n    return this.pageId;\n  }\n}\n\nexport default PageComponent;\n","/**\n * Dashboard Page - All-in-one Dashboard Implementation\n * Gets services from LayoutContext and handles all dashboard functionality\n */\n\nimport { PageComponent } from '../components/PageComponent';\nimport MainContentImpl from '../components/MainContentImpl';\nimport type { PageContext } from '../interfaces/PageContext';\nimport { MockApiService, ChartData, AuthenticationInfo } from '../services/MockApiService';\nimport { Survey, User } from '../types';\nimport { LoggerFactory } from '../logging/LoggerFactory';\nimport { Logger } from '../logging/Logger';\nimport '../assets/styles/dashboard.scss';\n\nexport interface DashboardState {\n  user?: User;\n  accountId?: number;\n  surveys: Survey[];\n  selectedSurveyId: number;\n  fromDate?: string;\n  toDate?: string;\n  statusFilter: number;\n  comparisonFilter: number;\n}\n\nexport interface ChartConfig {\n  started: Array<[number, number]>;\n  completed: Array<[number, number]>;\n  partial: Array<[number, number]>;\n  disqualified: Array<[number, number]>;\n}\n\nexport class DashboardPage extends PageComponent {\n  private state: DashboardState;\n  private chartInstance: any; // Will be Highcharts instance\n  private apiService: MockApiService | null = null;\n  protected logger: Logger;\n\n  constructor(mainContent: MainContentImpl, pageContext: PageContext) {\n    super(mainContent, pageContext, {\n      pageTitle: 'Dashboard - Opinion',\n      pageId: 'dashboard'\n    });\n\n    this.state = {\n      surveys: [],\n      selectedSurveyId: 0,\n      statusFilter: 1, // Started\n      comparisonFilter: 0 // None\n    };\n\n    this.logger = LoggerFactory.getInstance().getLogger('DashboardPage');\n  }\n\n  /**\n   * Initialize the dashboard page\n   */\n  protected async onInit(): Promise<void> {\n    try {\n      this.logger.info('Initializing...');\n      \n      // Wait for DOM to be ready\n      if (document.readyState === 'loading') {\n        await new Promise((resolve) => {\n          document.addEventListener('DOMContentLoaded', resolve, { once: true });\n        });\n      }\n\n      // Get MockApiService from LayoutContext\n      const layoutContext = this.layoutContext;\n      this.apiService = layoutContext.getService(MockApiService.SERVICE_ID) as MockApiService;\n      \n      if (!this.apiService) {\n        throw new Error('MockApiService not available in LayoutContext');\n      }\n\n      // Create dashboard content programmatically\n      this.createDashboardContent();\n\n      // Authenticate user\n      const auth = await this.authenticateUser();\n      this.state.user = auth.userInfo;\n      \n      // Set account ID from cookie or user info\n      this.state.accountId = this.getAccountId(auth);\n      \n      // Update UI with user info\n      this.updateUserInterface();\n      \n      // Load surveys\n      await this.loadSurveys();\n      \n      // Initialize date range (default to today)\n      this.initializeDateRange();\n      \n      // Load initial chart data\n      await this.loadActivityChart();\n      \n      // Show welcome message if needed\n      this.checkWelcomeMessage();\n\n      // Set browser tab title\n      document.title = \"Dashboard - Opinion\";\n      \n      this.logger.info('Ready');\n    } catch (error) {\n      const errorObj = error instanceof Error ? error : new Error(String(error));\n      this.logError('Dashboard initialization failed', errorObj);\n      this.handleError(error);\n    }\n  }\n\n  /**\n   * Create dashboard content programmatically\n   */\n  private createDashboardContent(): void {\n    try {\n      // Create main content structure with header outside page border\n      const mainContentHtml = `\n        <div class=\"page-content\">\n          <!-- Dashboard Header (outside page border) -->\n          <div class=\"dashboard-header\" style=\"background: #f8f9fa; padding: 20px; margin-bottom: 20px; border-radius: 8px;\">\n            <h1 style=\"margin: 0 0 10px 0; color: #333;\">📊 Dashboard</h1>\n            <p style=\"margin: 0; color: #666;\">Welcome to your Opinion Dashboard. Manage your surveys and view analytics from here.</p>\n          </div>\n\n          <!-- Dashboard Content (inside page border) -->\n          <div class=\"main-content-card\">\n            <!-- Quick Actions Section -->\n            <div class=\"content-container\" style=\"margin-bottom: 24px;\">\n              <h3 style=\"margin-bottom: 16px; color: #333;\">Quick Actions</h3>\n              <div class=\"main-content-flex-row\">\n                <button id=\"button_create_survey\" class=\"button-green\">Create Survey</button>\n              </div>\n            </div>\n\n          <!-- Chart Section -->\n          <div class=\"content-container\" style=\"margin-bottom: 24px;\">\n            <h3 style=\"margin-bottom: 12px;\">Survey Analytics</h3>\n            \n            <!-- Survey Selection -->\n            <div class=\"main-content-flex-row\" style=\"margin-bottom: 16px; align-items: center;\">\n              <label for=\"select_surveys\" style=\"margin-right: 12px;\">Survey:</label>\n              <select id=\"select_surveys\" style=\"margin-right: 16px;\">\n                <option value=\"0\">All surveys</option>\n              </select>\n              \n              <div id=\"datepicker_date_range_value\" style=\"margin-left: auto; color: #666;\">Today</div>\n            </div>\n            \n            <!-- Statistics Row -->\n            <div class=\"main-content-flex-row\" style=\"margin-bottom: 16px; gap: 24px;\">\n              <div style=\"text-align: center;\">\n                <div class=\"label-started\" style=\"font-size: 24px; font-weight: bold; color: #007bff;\">0</div>\n                <div style=\"font-size: 14px; color: #666;\">Started</div>\n              </div>\n              <div style=\"text-align: center;\">\n                <div class=\"label-completed\" style=\"font-size: 24px; font-weight: bold; color: #28a745;\">0</div>\n                <div style=\"font-size: 14px; color: #666;\">Completed</div>\n              </div>\n              <div style=\"text-align: center;\">\n                <div class=\"label-partial\" style=\"font-size: 24px; font-weight: bold; color: #ffc107;\">0</div>\n                <div style=\"font-size: 14px; color: #666;\">Partial</div>\n              </div>\n              <div style=\"text-align: center;\">\n                <div class=\"label-completion-rate\" style=\"font-size: 24px; font-weight: bold; color: #17a2b8;\">0.00%</div>\n                <div style=\"font-size: 14px; color: #666;\">Completion Rate</div>\n              </div>\n            </div>\n            \n            <!-- Chart Container -->\n            <div id=\"chart\" style=\"height: 400px; border: 1px solid #ddd; border-radius: 4px; display: flex; align-items: center; justify-content: center; color: #666;\">\n              Chart will be displayed here\n            </div>\n          </div>\n\n          <!-- Recent Surveys Section -->\n          <div class=\"content-container\">\n            <h3 style=\"margin-bottom: 12px;\">Recent Surveys</h3>\n            <div style=\"overflow-x: auto;\">\n              <table style=\"width: 100%; border-collapse: collapse;\">\n                <thead>\n                  <tr style=\"background-color: #f8f9fa; border-bottom: 2px solid #dee2e6;\">\n                    <th style=\"padding: 12px 8px; text-align: right; font-weight: 600;\">ID</th>\n                    <th style=\"padding: 12px 8px; text-align: center; font-weight: 600;\">Status</th>\n                    <th style=\"padding: 12px 8px; text-align: left; font-weight: 600;\">Title</th>\n                    <th style=\"padding: 12px 8px; text-align: right; font-weight: 600;\">Started</th>\n                    <th style=\"padding: 12px 8px; text-align: right; font-weight: 600;\">Completed</th>\n                    <th style=\"padding: 12px 8px; text-align: right; font-weight: 600;\">Rate</th>\n                    <th style=\"padding: 12px 8px; text-align: right; font-weight: 600;\">Partial</th>\n                    <th style=\"padding: 12px 8px; text-align: right; font-weight: 600;\">DQ</th>\n                    <th style=\"padding: 12px 8px; text-align: right; font-weight: 600;\">Avg Time</th>\n                    <th style=\"padding: 12px 8px; text-align: left; font-weight: 600;\">Status</th>\n                    <th style=\"padding: 12px 8px; text-align: left; font-weight: 600;\">Modified</th>\n                  </tr>\n                </thead>\n                <tbody id=\"survey_table_body\">\n                  <tr>\n                    <td colspan=\"11\" style=\"padding: 20px; text-align: center; color: #666;\">Loading surveys...</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          <!-- Welcome container (for new users with no surveys) -->\n          <div id=\"container_welcome\" style=\"display: none; text-align: center; padding: 40px; background-color: #f8f9fa; border-radius: 8px; margin-top: 24px;\">\n            <h3 style=\"color: #333; margin-bottom: 16px;\">Welcome to Opinion!</h3>\n            <p style=\"color: #666; margin-bottom: 24px;\">You haven't created any surveys yet. Get started by creating your first survey.</p>\n            <button class=\"button-green\">Create Your First Survey</button>\n          </div>\n          </div>\n        </div>\n      `;\n\n      // Set content in MainContent component\n      this.mainContent.setContent(mainContentHtml);\n      this.logger.debug('Dashboard content created programmatically');\n      \n      // Set up event listeners after content is added to DOM\n      this.setupEventListeners();\n      \n      this.logger.info('Dashboard content ready');\n    } catch (error) {\n      const errorObj = error instanceof Error ? error : new Error(String(error));\n      this.logError('Failed to create dashboard content', errorObj);\n      throw error;\n    }\n  }\n\n  /**\n   * Set up dashboard-specific event listeners\n   * Layout events (sidebar, header, etc.) are handled by Layout system\n   */\n  protected setupEventListeners(): void {\n    // Set up dashboard-specific event listeners\n    this.setupDashboardEventListeners();\n    this.logger.debug('Dashboard-specific event listeners setup');\n  }\n\n  /**\n   * Setup dashboard-specific event listeners (data-driven)\n   */\n  private setupDashboardEventListeners(): void {\n    // Survey selection dropdown\n    const surveySelect = document.getElementById('select_surveys');\n    if (surveySelect) {\n      surveySelect.addEventListener('change', (e) => {\n        const target = e.target as HTMLSelectElement;\n        this.state.selectedSurveyId = parseInt(target.value);\n        this.loadActivityChart();\n      });\n    }\n\n    // Status filter buttons\n    const statusButton = document.getElementById('button_status');\n    if (statusButton) {\n      statusButton.addEventListener('click', () => {\n        // Handle status filter toggle\n        const currentValue = parseInt(statusButton.dataset.value || '1');\n        this.state.statusFilter = currentValue;\n        this.loadActivityChart();\n      });\n    }\n\n    // Create survey button\n    const createSurveyButton = document.getElementById('button_create_survey');\n    if (createSurveyButton) {\n      createSurveyButton.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.createSurvey();\n      });\n    }\n  }\n\n  /**\n   * Cleanup dashboard-specific resources\n   */\n  protected onDestroy(): void {\n    // Cleanup dashboard-specific resources\n    if (this.chartInstance) {\n      // Destroy Highcharts instance if exists\n      try {\n        this.chartInstance.destroy();\n      } catch (error) {\n        this.logger.warn('Error destroying chart:', error instanceof Error ? error : new Error(String(error)));\n      }\n    }\n    this.logger.info('Dashboard page destroyed');\n  }\n\n  /**\n   * Authenticate user and get account info\n   */\n  private async authenticateUser(): Promise<AuthenticationInfo> {\n    if (!this.apiService) throw new Error('API service not available');\n    \n    try {\n      const auth = await this.apiService.validateUser();\n      return auth;\n    } catch (error: unknown) {\n      if (error instanceof Error && error.message.includes('NotSignedIn')) {\n        this.redirectToLogin();\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Get account ID from cookie or user info\n   */\n  private getAccountId(auth: AuthenticationInfo): number {\n    // Try to get from cookie first\n    const cookieAccountId = this.getCookie('aid');\n    \n    if (cookieAccountId && auth.accounts) {\n      const account = auth.accounts.find(a => a.id.toString() === cookieAccountId);\n      if (account) {\n        return account.id;\n      }\n    }\n    \n    // Fallback to user's default account\n    return auth.accountId || auth.userInfo.id;\n  }\n\n  /**\n   * Load surveys from API\n   */\n  private async loadSurveys(): Promise<void> {\n    if (!this.state.accountId || !this.apiService) return;\n\n    try {\n      const response = await this.apiService.getOpinionsList({\n        accountId: this.state.accountId,\n        top: 100,\n        orderByRecent: false\n      });\n\n      this.state.surveys = response.list;\n      this.updateSurveysList();\n      this.updateRecentSurveysTable();\n    } catch (error) {\n      const errorObj = error instanceof Error ? error : new Error(String(error));\n      this.logError('Failed to load surveys', errorObj);\n      this.state.surveys = [];\n    }\n  }\n\n  /**\n   * Load activity chart data\n   */\n  private async loadActivityChart(): Promise<void> {\n    if (!this.state.accountId || !this.apiService) return;\n\n    try {\n      const chartData = await this.apiService.getActivityChart({\n        accountId: this.state.accountId,\n        opinionId: this.state.selectedSurveyId || undefined,\n        fromDate: this.state.fromDate,\n        toDate: this.state.toDate,\n        graphBy: 3 // Daily\n      });\n\n      this.updateStatistics(chartData);\n      this.renderChart(chartData);\n    } catch (error) {\n      const errorObj = error instanceof Error ? error : new Error(String(error));\n      this.logError('Failed to load chart data', errorObj);\n    }\n  }\n\n  /**\n   * Update surveys dropdown and recent surveys table\n   */\n  private updateSurveysList(): void {\n    const surveysSelect = document.getElementById('select_surveys') as HTMLSelectElement;\n    if (surveysSelect) {\n      // Clear existing options except \"All surveys\"\n      surveysSelect.innerHTML = '<option value=\"0\">All surveys</option>';\n      \n      // Add survey options\n      this.state.surveys.forEach(survey => {\n        const option = document.createElement('option');\n        option.value = survey.id.toString();\n        option.textContent = survey.title;\n        surveysSelect.appendChild(option);\n      });\n    }\n  }\n\n  /**\n   * Update recent surveys table\n   */\n  private updateRecentSurveysTable(): void {\n    const tableBody = document.getElementById('survey_table_body');\n    if (!tableBody) return;\n\n    // Clear existing rows\n    tableBody.innerHTML = '';\n\n    // Get recent surveys (sorted by modify date)\n    const recentSurveys = [...this.state.surveys]\n      .sort((a, b) => new Date(b.updated || b.created).getTime() - new Date(a.updated || a.created).getTime())\n      .slice(0, 5);\n\n    // Add survey rows\n    recentSurveys.forEach((survey) => {\n      const row = document.createElement('tr');\n      row.innerHTML = `\n        <td style=\"text-align: right;\">${survey.id}</td>\n        <td><span class=\"survey-status ${survey.status || 'draft'}\">&nbsp;</span></td>\n        <td><a href=\"/surveys/${survey.id}/edit\" title=\"Edit Survey\">${survey.title}</a></td>\n        <td style=\"text-align: right;\">0</td>\n        <td style=\"text-align: right;\">0</td>\n        <td style=\"text-align: right;\">0.00%</td>\n        <td style=\"text-align: right;\">0</td>\n        <td style=\"text-align: right;\">0</td>\n        <td style=\"text-align: right;\">--</td>\n        <td>--</td>\n        <td>${this.formatDate(new Date(survey.updated || survey.created))}</td>\n      `;\n      tableBody.appendChild(row);\n    });\n  }\n\n  /**\n   * Initialize date range (default to today)\n   */\n  private initializeDateRange(): void {\n    const today = new Date();\n    this.state.fromDate = this.formatDate(today);\n    this.state.toDate = this.formatDate(today);\n\n    // Update date range display\n    const dateRangeValue = document.getElementById('datepicker_date_range_value');\n    if (dateRangeValue) {\n      dateRangeValue.textContent = today.toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      });\n    }\n  }\n\n  /**\n   * Check if welcome message should be shown\n   */\n  private checkWelcomeMessage(): void {\n    if (this.state.surveys.length === 0) {\n      const welcomeContainer = document.getElementById('container_welcome');\n      \n      if (welcomeContainer) {\n        welcomeContainer.style.display = 'block';\n      }\n    }\n  }\n\n  /**\n   * Update user interface with user info\n   */\n  private updateUserInterface(): void {\n    if (!this.state.user) return;\n\n    // Update user info in page elements (layout components handle themselves)\n    const usernameElements = document.querySelectorAll('.username, #label_username, #user_menu_name');\n    usernameElements.forEach(el => {\n      el.textContent = this.state.user?.username || 'User';\n    });\n    \n    // Update sidebar survey counts\n    this.updateSidebarCounts();\n  }\n\n  /**\n   * Update statistics display\n   */\n  private updateStatistics(data: ChartData): void {\n    const total = data.charts.totals.completed + data.charts.totals.partial;\n    const completionRate = total > 0 ? (data.charts.totals.completed / total * 100).toFixed(2) : '0.00';\n\n    this.updateElement('.label-started', this.addCommas(total));\n    this.updateElement('.label-completed', this.addCommas(data.charts.totals.completed));\n    this.updateElement('.label-partial', this.addCommas(data.charts.totals.partial));\n    this.updateElement('.label-completion-rate', `${completionRate}%`);\n  }\n\n  /**\n   * Render chart using chart data\n   */\n  private renderChart(data: ChartData): void {\n    const chartContainer = document.getElementById('chart');\n    if (!chartContainer) return;\n\n    // Simple chart rendering (placeholder - would use Highcharts in production)\n    chartContainer.innerHTML = `\n      <div style=\"background: #f8f9fa; padding: 20px; border-radius: 4px; text-align: center;\">\n        <p>Chart data loaded successfully</p>\n        <p>Started: ${data.charts.totals.completed + data.charts.totals.partial}</p>\n        <p>Completed: ${data.charts.totals.completed}</p>\n        <p>Partial: ${data.charts.totals.partial}</p>\n      </div>\n    `;\n  }\n\n  /**\n   * Update UI counts (since sidebar is removed, this is now a placeholder)\n   */\n  private updateSidebarCounts(): void {\n    // Sidebar removed from dashboard - this method kept for compatibility\n    // but no longer updates sidebar counts\n  }\n\n  /**\n   * Utility methods\n   */\n  private formatDate(date: Date): string {\n    return date.toISOString().split('T')[0];\n  }\n\n  private addCommas(num: number): string {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!d))/g, ',');\n  }\n\n  private updateElement(selector: string, content: string): void {\n    const element = document.querySelector(selector);\n    if (element) {\n      element.textContent = content;\n    }\n  }\n\n  private getCookie(name: string): string | null {\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n      return parts.pop()?.split(';').shift() || null;\n    }\n    return null;\n  }\n\n  private redirectToLogin(): void {\n    const returnUrl = encodeURIComponent(window.location.href);\n    window.location.href = `/login?ret=${returnUrl}`;\n  }\n\n  private handleError(error: any): void {\n    const errorObj = error instanceof Error ? error : new Error(String(error));\n    \n    // Log with full error details for debugging\n    this.logError('Dashboard error', errorObj);\n    \n    // Show error message to user\n    alert(`An error occurred while loading the dashboard: ${errorObj.message}`);\n  }\n\n  /**\n   * Handle create survey button click\n   */\n  private createSurvey(): void {\n    // Navigate to survey creation page\n    window.location.href = '/surveys/create';\n  }\n\n\n  /**\n   * Enhanced error logging that shows full error details\n   */\n  private logError(message: string, error: Error): void {\n    // Log to our logger\n    this.logger.error(`${message}: ${error.message}`);\n    \n    // Always log full details to console for debugging\n    console.group(`🔥 ${message}`);\n    console.error('Error message:', error.message);\n    console.error('Error stack:', error.stack);\n    console.error('Error object:', error);\n    console.groupEnd();\n  }\n}\n\n// Global function for feedback (matching original)\ndeclare global {\n  function feedback(): void;\n}\n\nwindow.feedback = function(): void {\n  console.log('Feedback function called - implement modal');\n};\n\nexport default DashboardPage;","/**\n * Debug Page Component\n * Debug/test page that uses semantic main content structure\n * Provides testing controls and development utilities\n */\n\nimport type { BreadcrumbItem } from \"../interfaces/BreadcrumbItem\";\nimport MainContentImpl from \"../components/MainContentImpl\";\nimport type {\n  LayoutContext,\n  LayoutModeType,\n  LayoutViewPort,\n  LayoutEvent,\n  LayoutEventType,\n} from \"../contexts/LayoutContext\";\nimport { LayoutEventFactory, type TypedLayoutEvent } from \"../contexts/LayoutEventFactory\";\nimport { PageComponent } from \"../components/PageComponent\";\nimport {\n  ChainHotkeyHandler,\n  HotkeyExecutionContext,\n} from \"../hotkeys/HotkeyChainSystem\";\nimport { PageContext } from \"../interfaces/PageContext\";\nimport { LoggerFactory } from \"../logging/LoggerFactory\";\nimport type { Logger } from \"../logging/Logger\";\n\nexport class DebugPage extends PageComponent {\n  protected readonly logger: Logger = LoggerFactory.getInstance().getLogger(DebugPage);\n  private responsiveModeUnsubscribe: (() => void) | null = null;\n  \n  // Layout Events Monitoring\n  private eventMonitoringActive: boolean = false;\n  private layoutEventUnsubscribers: Array<() => void> = [];\n  private eventStats = {\n    totalEvents: 0,\n    eventCounts: new Map<string, number>(),\n    startTime: 0,\n    lastEventTime: 0\n  };\n\n  constructor(mainContent: MainContentImpl, pageContext: PageContext) {\n    super(mainContent, pageContext, {\n      pageId: \"debug\", // Matches navigation item ID\n      pageTitle: \"Debug\"\n    });\n  }\n\n  /**\n   * Initialize the debug page\n   */\n  async onInit(): Promise<void> {\n    try {\n      // Wait for DOM to be ready\n      if (document.readyState === \"loading\") {\n        await new Promise((resolve) => {\n          document.addEventListener(\"DOMContentLoaded\", resolve);\n        });\n      }\n\n      // Load content into semantic main element\n      await this.loadTemplate();\n\n      // Setup page-level functionality\n      this.setupPageHandlers();\n\n      // Set browser tab title\n      document.title = \"Debug - Opinion\";\n    } catch (error) {\n      this.logger.error(\"❌ DEBUGPAGE - Initialization failed:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Post-initialization hook - called after chain provider registration\n   */\n  protected async onPostInit(): Promise<void> {\n    // Now that chain provider is registered, update status displays\n    this.updateViewportInfoFromContext(this.mainContent.getLayoutContext());\n    this.updateLayoutStatus();\n    this.updateComponentStatusDetails();\n    this.updateHotkeyStatus();\n    \n    // Set initial breadcrumb for debug page\n    this.setInitialBreadcrumb();\n  }\n\n  /**\n   * Cleanup method for PageComponent\n   */\n  protected onDestroy(): void {\n    // Clean up subscriptions\n    if (this.responsiveModeUnsubscribe) {\n      this.responsiveModeUnsubscribe();\n      this.responsiveModeUnsubscribe = null;\n    }\n    \n    // Clean up layout event monitoring\n    this.stopEventMonitoring();\n  }\n\n  protected setupEventListeners(): void {}\n\n  /**\n   * Load HTML template into semantic main element\n   */\n  private async loadTemplate(): Promise<void> {\n    // Load content into the semantic main element\n    this.createFallbackTemplate();\n  }\n\n  /**\n   * Create fallback template if HTML file fails to load\n   */\n  private createFallbackTemplate(): void {\n    const mainContent = this.mainContent;\n    // Use MainContent component if available, otherwise fallback to #app\n    const targetElement =\n      mainContent?.getElement() || document.getElementById(\"app\");\n\n    if (targetElement) {\n\n      const content = `\n        <div class=\"page-content\">\n          <div class=\"debug-header\" style=\"background: #f8f9fa; padding: 20px; margin-bottom: 20px; border-radius: 8px;\">\n            <h1 style=\"margin: 0 0 10px 0; color: #333;\">🛠️ Debug Page</h1>\n            <p style=\"margin: 0; color: #666;\">This page uses the regular app layout system with global header, sidebar, and footer components.</p>\n          </div>\n\n\n          <div class=\"debug-content\" style=\"background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\n            <h2 style=\"margin-top: 0; color: #333;\">Debug Information</h2>\n            <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0;\">\n              <div>\n                <h4 style=\"margin: 0 0 10px 0; color: #555;\">📱 Viewport & Layout:</h4>\n                <div id=\"viewport_info\" style=\"font-family: monospace; background: #f1f3f4; padding: 10px; border-radius: 4px; font-size: 12px;\">Loading...</div>\n              </div>\n              <div>\n                <h4 style=\"margin: 0 0 10px 0; color: #555;\">📊 LayoutContext Status:</h4>\n                <div id=\"layout_status\" style=\"font-family: monospace; background: #f1f3f4; padding: 10px; border-radius: 4px; font-size: 12px;\">Checking...</div>\n              </div>\n              <div>\n                <h4 style=\"margin: 0 0 10px 0; color: #555;\">⌨️ Hotkey System Status:</h4>\n                <div id=\"hotkey_status\" style=\"font-family: monospace; background: #f1f3f4; padding: 10px; border-radius: 4px; font-size: 12px;\">Checking...</div>\n              </div>\n            </div>\n\n\n            <div style=\"margin: 30px 0;\">\n              <h3 style=\"color: #333; margin-bottom: 15px;\">Test Console</h3>\n              <div id=\"test_console\" style=\"background: #1e1e1e; color: #fff; padding: 15px; border-radius: 4px; font-family: monospace; font-size: 13px; height: 200px; overflow-y: auto;\"></div>\n            </div>\n\n            <div style=\"margin: 30px 0;\">\n              <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\n                <h3 style=\"color: #333; margin: 0;\">🏗️ Component Status Details</h3>\n                <div style=\"display: flex; gap: 8px;\">\n                  <button id=\"toggle_all_components\" style=\"padding: 8px 12px; background: #6c757d; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500; font-size: 11px; transition: all 0.2s ease;\" onmouseover=\"this.style.background='#545b62'; this.style.transform='scale(1.05)'\" onmouseout=\"this.style.background='#6c757d'; this.style.transform='scale(1)'\">🔽 Expand All</button>\n                  <button id=\"refresh_component_status\" style=\"padding: 8px 16px; background: #17a2b8; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500; font-size: 12px; transition: all 0.2s ease;\" onmouseover=\"this.style.background='#138496'; this.style.transform='scale(1.05)'\" onmouseout=\"this.style.background='#17a2b8'; this.style.transform='scale(1)'\">🔄 Refresh</button>\n                </div>\n              </div>\n              <div id=\"component_status_details\" style=\"background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; font-family: monospace; font-size: 12px;\">Loading component status...</div>\n            </div>\n\n            <div style=\"margin: 30px 0;\">\n              <h3 style=\"color: #333; margin-bottom: 15px;\">📡 Layout Events Monitor</h3>\n              <div style=\"background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;\">\n                <div style=\"margin-bottom: 15px;\">\n                  <h4 style=\"margin: 0 0 10px 0; color: #555;\">Event Controls:</h4>\n                  <div style=\"display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 15px;\">\n                    <button id=\"start_event_monitor\" style=\"padding: 8px 12px; background: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">▶️ Start Monitor</button>\n                    <button id=\"stop_event_monitor\" style=\"padding: 8px 12px; background: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">⏹️ Stop Monitor</button>\n                    <button id=\"clear_event_log\" style=\"padding: 8px 12px; background: #6c757d; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">🗑️ Clear Events</button>\n                    <button id=\"trigger_layout_test\" style=\"padding: 8px 12px; background: #fd7e14; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">🔄 Trigger Test Event</button>\n                  </div>\n                </div>\n                <div style=\"margin-bottom: 15px;\">\n                  <h4 style=\"margin: 0 0 10px 0; color: #555;\">Event Log:</h4>\n                  <div id=\"layout_events_console\" style=\"background: #1a1a1a; color: #00ff00; padding: 15px; border-radius: 4px; font-family: monospace; font-size: 12px; height: 300px; overflow-y: auto; border: 1px solid #333;\"></div>\n                </div>\n                <div>\n                  <h4 style=\"margin: 0 0 10px 0; color: #555;\">Event Statistics:</h4>\n                  <div id=\"event_stats\" style=\"background: #e9ecef; padding: 10px; border-radius: 4px; font-family: monospace; font-size: 13px;\">Monitoring stopped. Click 'Start Monitor' to begin tracking events.</div>\n                </div>\n                <div style=\"margin-top: 15px;\">\n                  <h4 style=\"margin: 0 0 10px 0; color: #555;\">Layout Constraints:</h4>\n                  <div style=\"background: #fff3cd; padding: 10px; border-radius: 4px; font-size: 12px; color: #856404; border: 1px solid #ffeaa7;\">\n                    📱 <strong>Mobile Layout:</strong> Compact mode is disabled on mobile layout. Mobile uses overlay sidebar mode instead of compact/expanded states.\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div style=\"margin: 30px 0;\">\n              <h3 style=\"color: #333; margin-bottom: 15px;\">⌨️ Chain Hotkey Test Guide</h3>\n              <div style=\"background: #fff3cd; padding: 20px; border-radius: 8px; border-left: 4px solid #ffc107; margin-bottom: 20px;\">\n                <div style=\"margin-bottom: 15px;\">\n                  <h4 style=\"margin: 0 0 10px 0; color: #856404;\">🎯 Debug Page Hotkeys (Active Now):</h4>\n                  <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin: 10px 0; font-size: 13px;\">\n                    <div style=\"background: rgba(255,255,255,0.7); padding: 10px; border-radius: 4px;\">\n                      <strong style=\"color: #495057;\">📊 Event Monitoring:</strong><br>\n                      <code style=\"background: #f8f9fa; padding: 2px 4px; border-radius: 2px;\">Ctrl+Shift+S</code> Start Monitor<br>\n                      <code style=\"background: #f8f9fa; padding: 2px 4px; border-radius: 2px;\">Ctrl+Shift+X</code> Stop Monitor<br>\n                      <code style=\"background: #f8f9fa; padding: 2px 4px; border-radius: 2px;\">Ctrl+Shift+C</code> Clear Log<br>\n                      <code style=\"background: #f8f9fa; padding: 2px 4px; border-radius: 2px;\">Ctrl+Shift+T</code> Test Event<br>\n                      <code style=\"background: #f8f9fa; padding: 2px 4px; border-radius: 2px;\">Ctrl+Shift+R</code> Refresh Status<br>\n                      <code style=\"background: #f8f9fa; padding: 2px 4px; border-radius: 2px;\">Ctrl+Shift+E</code> Expand/Collapse\n                    </div>\n                    <div style=\"background: rgba(255,255,255,0.7); padding: 10px; border-radius: 4px;\">\n                      <strong style=\"color: #495057;\">💬 Message Testing:</strong><br>\n                      <code style=\"background: #f8f9fa; padding: 2px 4px; border-radius: 2px;\">Shift+1 (!)</code> Error Message<br>\n                      <code style=\"background: #f8f9fa; padding: 2px 4px; border-radius: 2px;\">Shift+2 (@)</code> Warning Message<br>\n                      <code style=\"background: #f8f9fa; padding: 2px 4px; border-radius: 2px;\">Shift+3 (#)</code> Info Message<br>\n                      <code style=\"background: #f8f9fa; padding: 2px 4px; border-radius: 2px;\">Shift+4 ($)</code> Success Message\n                    </div>\n                    <div style=\"background: rgba(255,255,255,0.7); padding: 10px; border-radius: 4px;\">\n                      <strong style=\"color: #495057;\">🛠️ Utilities:</strong><br>\n                      <code style=\"background: #f8f9fa; padding: 2px 4px; border-radius: 2px;\">Shift+Backspace</code> Clear Messages<br>\n                      <code style=\"background: #f8f9fa; padding: 2px 4px; border-radius: 2px;\">Ctrl+Shift+L</code> Clear Console<br>\n                      <code style=\"background: #f8f9fa; padding: 2px 4px; border-radius: 2px;\">Ctrl+Shift+H</code> Hotkey Help<br>\n                      <code style=\"background: #f8f9fa; padding: 2px 4px; border-radius: 2px;\">Escape</code> Stop Monitoring\n                    </div>\n                  </div>\n                </div>\n                \n                \n                <div style=\"margin-bottom: 10px;\">\n                  <h4 style=\"margin: 0 0 10px 0; color: #856404;\">🧪 Quick Chain System Test:</h4>\n                  <div style=\"background: rgba(255,255,255,0.8); padding: 12px; border-radius: 4px; font-size: 13px;\">\n                    <ol style=\"margin: 0; padding-left: 20px; line-height: 1.6;\">\n                      <li><strong>Test Debug Hotkeys:</strong> Press <code style=\"background: #e9ecef; padding: 1px 3px;\">Ctrl+Shift+S</code> to start monitoring, then <code style=\"background: #e9ecef; padding: 1px 3px;\">Shift+1</code> (!) for an error message</li>\n                      <li><strong>Test Message Hotkeys:</strong> Try <code style=\"background: #e9ecef; padding: 1px 3px;\">Shift+2</code> (@), <code style=\"background: #e9ecef; padding: 1px 3px;\">Shift+3</code> (#), <code style=\"background: #e9ecef; padding: 1px 3px;\">Shift+4</code> ($) for different message types</li>\n                      <li><strong>Test Chain Priority:</strong> Press <code style=\"background: #e9ecef; padding: 1px 3px;\">Ctrl+Shift+H</code> to see debug help, then <code style=\"background: #e9ecef; padding: 1px 3px;\">Escape</code> to test cooperative handling</li>\n                      <li><strong>Check Logs:</strong> Watch the Test Console and Layout Events log for hotkey execution details</li>\n                    </ol>\n                  </div>\n                </div>\n                \n                <div style=\"background: #d1ecf1; padding: 10px; border-radius: 4px; font-size: 12px; color: #0c5460;\">\n                  📝 <strong>Chain System Notes:</strong> All hotkeys above are fully functional and working. Debug page hotkeys (priority 200) run alongside PageComponent ESC handling. Use <code style=\"background: rgba(255,255,255,0.7); padding: 1px 3px;\">Ctrl+Shift+H</code> anytime to see the complete hotkey reference.<br>\n                  🌍 <strong>Browser Compatibility:</strong> Using Ctrl+Shift+ and actual character codes (!, @, #, $) for maximum compatibility across Firefox, Chrome, and Safari.\n                </div>\n              </div>\n            </div>\n\n            <div style=\"margin: 30px 0;\">\n              <h3 style=\"color: #333; margin-bottom: 15px;\">🍞 Breadcrumbs Test Console</h3>\n              \n              <!-- PageContext Breadcrumbs Tests (Hierarchical/Scoped) -->\n              <div style=\"background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid #17a2b8;\">\n                <div style=\"margin-bottom: 15px;\">\n                  <h4 style=\"margin: 0 0 10px 0; color: #555;\">📋 PageContext Tests (Hierarchical/Scoped):</h4>\n                  <div style=\"background: #d1ecf1; padding: 10px; border-radius: 4px; font-size: 12px; color: #0c5460; margin-bottom: 15px;\">\n                    <strong>🎯 Scope:</strong> These tests work through PageContext with hierarchical scoping. DebugPage can only modify breadcrumbs at or below its scope position.\n                  </div>\n                  <div style=\"display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 15px;\">\n                    <button id=\"breadcrumb_single\" style=\"padding: 8px 12px; background: #17a2b8; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">📄 Single Page</button>\n                    <button id=\"breadcrumb_multi\" style=\"padding: 8px 12px; background: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">📚 Multi-level</button>\n                    <button id=\"breadcrumb_links\" style=\"padding: 8px 12px; background: #fd7e14; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">🔗 With Links</button>\n                    <button id=\"breadcrumb_actions\" style=\"padding: 8px 12px; background: #6f42c1; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">⚡ With Actions</button>\n                    <button id=\"breadcrumb_clear\" style=\"padding: 8px 12px; background: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">🗑️ Clear</button>\n                  </div>\n                </div>\n                \n                <div style=\"margin-bottom: 15px;\">\n                  <h4 style=\"margin: 0 0 10px 0; color: #555;\">Dynamic PageContext Tests:</h4>\n                  <div style=\"display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 15px;\">\n                    <button id=\"breadcrumb_add\" style=\"padding: 8px 12px; background: #198754; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">➕ Add Item</button>\n                    <button id=\"breadcrumb_remove\" style=\"padding: 8px 12px; background: #e83e8c; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">➖ Remove Item</button>\n                    <button id=\"breadcrumb_update\" style=\"padding: 8px 12px; background: #20c997; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">🔄 Update Item</button>\n                    <button id=\"breadcrumb_status\" style=\"padding: 8px 12px; background: #495057; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">📊 Show Status</button>\n                  </div>\n                </div>\n              </div>\n              \n              <!-- HeaderComponent Direct Tests (Global/Unrestricted) -->\n              <div style=\"background: #fff3cd; padding: 20px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid #ffc107;\">\n                <div style=\"margin-bottom: 15px;\">\n                  <h4 style=\"margin: 0 0 10px 0; color: #856404;\">🏗️ HeaderComponent Tests (Direct/Global):</h4>\n                  <div style=\"background: #ffeaa7; padding: 10px; border-radius: 4px; font-size: 12px; color: #856404; margin-bottom: 15px;\">\n                    <strong>⚠️ Unrestricted:</strong> These tests bypass PageContext and work directly with BreadcrumbsComponent. No hierarchical scoping - full control over entire breadcrumb trail.\n                  </div>\n                  <div style=\"display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 15px;\">\n                    <button id=\"header_breadcrumb_basic\" style=\"padding: 8px 12px; background: #f39c12; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">🏠 Basic Trail</button>\n                    <button id=\"header_breadcrumb_complex\" style=\"padding: 8px 12px; background: #e67e22; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">🌐 Complex Trail</button>\n                    <button id=\"header_breadcrumb_interactive\" style=\"padding: 8px 12px; background: #d35400; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">⚡ Interactive</button>\n                    <button id=\"header_breadcrumb_component_status\" style=\"padding: 8px 12px; background: #a0522d; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">🔍 Component Status</button>\n                  </div>\n                </div>\n                \n                <div style=\"margin-bottom: 15px;\">\n                  <h4 style=\"margin: 0 0 10px 0; color: #856404;\">Direct Component Operations:</h4>\n                  <div style=\"display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 15px;\">\n                    <button id=\"header_breadcrumb_direct_add\" style=\"padding: 8px 12px; background: #27ae60; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">➕ Direct Add</button>\n                    <button id=\"header_breadcrumb_direct_remove\" style=\"padding: 8px 12px; background: #e74c3c; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">➖ Direct Remove</button>\n                    <button id=\"header_breadcrumb_direct_update\" style=\"padding: 8px 12px; background: #8e44ad; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">🔄 Direct Update</button>\n                    <button id=\"header_breadcrumb_direct_clear\" style=\"padding: 8px 12px; background: #c0392b; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">🗑️ Direct Clear</button>\n                  </div>\n                </div>\n              </div>\n              \n              <div style=\"background: #fff; padding: 15px; border-radius: 4px; border: 1px solid #dee2e6; font-size: 13px;\">\n                <strong>📝 Current Breadcrumbs:</strong> Look at the header above to see the breadcrumbs in action. They will update dynamically as you test different scenarios.<br>\n                <strong>🔄 Comparison:</strong> Use PageContext tests to see hierarchical scoping vs HeaderComponent tests for direct unrestricted access.\n              </div>\n            </div>\n\n            <div style=\"margin: 30px 0;\">\n              <h3 style=\"color: #333; margin-bottom: 15px;\">Test Console</h3>\n              <div style=\"background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;\">\n                <div style=\"margin-bottom: 15px;\">\n                  <h4 style=\"margin: 0 0 10px 0; color: #555;\">Basic Messages:</h4>\n                  <div style=\"display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 15px;\">\n                    <button id=\"msg_error\" style=\"padding: 8px 12px; background: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">❌ Error</button>\n                    <button id=\"msg_warning\" style=\"padding: 8px 12px; background: #fd7e14; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">⚠️ Warning</button>\n                    <button id=\"msg_info\" style=\"padding: 8px 12px; background: #0dcaf0; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">ℹ️ Info</button>\n                    <button id=\"msg_success\" style=\"padding: 8px 12px; background: #198754; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">✅ Success</button>\n                  </div>\n                </div>\n\n                <div style=\"margin-bottom: 15px;\">\n                  <h4 style=\"margin: 0 0 10px 0; color: #555;\">Advanced Messages:</h4>\n                  <div style=\"display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 15px;\">\n                    <button id=\"msg_with_action\" style=\"padding: 8px 12px; background: #6f42c1; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">🔧 With Action</button>\n                    <button id=\"msg_persistent\" style=\"padding: 8px 12px; background: #495057; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">📌 Persistent</button>\n                    <button id=\"msg_auto_hide\" style=\"padding: 8px 12px; background: #20c997; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">⏰ Auto-hide</button>\n                    <button id=\"msg_sequence\" style=\"padding: 8px 12px; background: #e83e8c; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">🎬 Sequence</button>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 style=\"margin: 0 0 10px 0; color: #555;\">Message Management:</h4>\n                  <div style=\"display: flex; flex-wrap: wrap; gap: 10px;\">\n                    <button id=\"clear_all_messages\" style=\"padding: 8px 12px; background: #6c757d; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">🗑️ Clear All</button>\n                    <button id=\"clear_errors_only\" style=\"padding: 8px 12px; background: #adb5bd; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">❌ Clear Errors</button>\n                    <button id=\"clear_persistent\" style=\"padding: 8px 12px; background: #343a40; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;\">📌 Clear Persistent</button>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div style=\"margin: 20px 0;\">\n              <h3 style=\"color: #333; margin-bottom: 15px;\">Quick Tests</h3>\n              <div style=\"display: flex; flex-wrap: wrap; gap: 10px;\">\n                <button id=\"test_compact_mode\" style=\"padding: 10px 16px; background: #28a745; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 500;\">📎 Toggle Compact Mode</button>\n                <button id=\"test_user_menu\" style=\"padding: 10px 16px; background: #6f42c1; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 500;\">👤 Toggle User Menu</button>\n                <button id=\"test_viewport_info\" style=\"padding: 10px 16px; background: #007bff; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 500;\">📊 Refresh Debug Info</button>\n                <button id=\"test_mobile_toggle\" style=\"padding: 10px 16px; background: #fd7e14; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 500;\">📱 Test Mobile Menu</button>\n                <button id=\"clear_console\" style=\"padding: 10px 16px; background: #6c757d; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 500;\">🧙 Clear Console</button>\n                <button id=\"test_hotkeys_manual\" style=\"padding: 10px 16px; background: #e83e8c; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 500;\">🧪 Test Hotkeys</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      `;\n\n      // Set content using appropriate method\n      if (mainContent) {\n        mainContent.setContent(content);\n      } else {\n        targetElement.innerHTML = content;\n      }\n    } else {\n      this.logger.error(\"DebugPage - No target element found for content\");\n    }\n  }\n\n  /**\n   * Setup page-level event handlers\n   */\n  private setupPageHandlers(): void {\n    // Setup test controls\n    this.setupTestControls();\n\n    // Initial status updates will happen in onPostInit() after chain registration\n\n    // Setup responsive behavior\n    this.setupResponsiveHandlers();\n  }\n\n\n\n\n\n\n\n  /**\n   * Setup test control buttons\n   */\n  private setupTestControls(): void {\n    // Test Compact Mode Toggle - Emit event instead of direct manipulation\n    const testCompactMode = document.getElementById(\"test_compact_mode\");\n    if (testCompactMode) {\n      testCompactMode.addEventListener(\"click\", () => {\n        const layoutContext = this.mainContent.getLayoutContext();\n        \n        if (layoutContext.isLayoutMobile()) {\n          this.logToConsole(\"📱 Compact mode not available on mobile layout (uses overlay mode)\");\n        } else {\n          // Emit request event instead of notification event\n          layoutContext.emit(\"sidebar-compact-request\", {\n            requestedAction: \"toggle\",\n            trigger: \"debug-page\"\n          });\n          this.logToConsole(`📎 Compact mode request event emitted`);\n        }\n      });\n    }\n\n    // Test User Menu Toggle\n    const testUserMenu = document.getElementById(\"test_user_menu\");\n    if (testUserMenu) {\n      let isToggling = false; // Prevent rapid toggle calls\n      \n      testUserMenu.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        \n        // Prevent rapid clicking\n        if (isToggling) {\n          this.logToConsole(\"👤 User menu toggle already in progress, ignoring click\");\n          return;\n        }\n        \n        isToggling = true;\n        const layoutContext = this.mainContent.getLayoutContext();\n        \n        // Use setTimeout to allow the click event to finish before emitting the request\n        setTimeout(() => {\n          layoutContext.emit(\"user-menu-request\", {\n            requestedAction: \"toggle\",\n            trigger: \"debug-page\"\n          });\n          this.logToConsole(`👤 User menu request event emitted`);\n          \n          // Reset the toggle flag after a short delay\n          setTimeout(() => {\n            isToggling = false;\n          }, 100);\n        }, 50);\n      });\n    }\n\n    // Update Viewport Info\n    const testViewportInfo = document.getElementById(\"test_viewport_info\");\n    if (testViewportInfo) {\n      testViewportInfo.addEventListener(\"click\", () => {\n        this.updateViewportInfoFromContext(this.mainContent.getLayoutContext());\n        this.updateLayoutStatus();\n        this.updateHotkeyStatus();\n        this.logToConsole(\"📊 Debug info updated (viewport, layout, hotkeys)\");\n      });\n    }\n\n    // Test Mobile Menu Toggle - Emit event instead of direct manipulation\n    const testMobileToggle = document.getElementById(\"test_mobile_toggle\");\n    if (testMobileToggle) {\n      testMobileToggle.addEventListener(\"click\", () => {\n        const isMobile = window.innerWidth < 768;\n        if (isMobile) {\n          const layoutContext = this.mainContent.getLayoutContext();\n          // Emit mobile menu request event instead of direct DOM manipulation\n          layoutContext.emit(\"mobile-menu-request\", {\n            requestedAction: \"toggle\",\n            trigger: \"debug-page\"\n          });\n          this.logToConsole(\"📱 Mobile menu toggle event emitted\");\n        } else {\n          this.logToConsole(\n            \"ℹ️ Mobile menu only available on mobile viewports (<768px)\",\n          );\n        }\n      });\n    }\n\n    // Clear Console\n    const clearConsole = document.getElementById(\"clear_console\");\n    if (clearConsole) {\n      clearConsole.addEventListener(\"click\", () => {\n        const console = document.getElementById(\"test_console\");\n        if (console) {\n          console.innerHTML = \"\";\n        }\n      });\n    }\n    \n    // Manual Hotkey Test\n    const testHotkeysManual = document.getElementById(\"test_hotkeys_manual\");\n    if (testHotkeysManual) {\n      testHotkeysManual.addEventListener(\"click\", () => {\n        this.testHotkeySystem();\n      });\n    }\n\n\n    // Setup Message Simulation Controls\n    this.setupMessageSimulationControls();\n    \n    // Setup Breadcrumb Test Controls\n    this.setupBreadcrumbTestControls();\n    \n    // Setup Layout Events Monitoring\n    this.setupLayoutEventsMonitoring();\n  }\n\n  /**\n   * Setup message simulation controls\n   */\n  private setupMessageSimulationControls(): void {\n    // Basic message buttons\n    this.setupBasicMessageControls();\n\n    // Advanced message buttons\n    this.setupAdvancedMessageControls();\n\n    // Message management buttons\n    this.setupMessageManagementControls();\n  }\n\n  /**\n   * Setup basic message type controls\n   */\n  private setupBasicMessageControls(): void {\n\n    // Error message\n    const msgError = document.getElementById(\"msg_error\");\n    if (msgError) {\n      msgError.addEventListener(\"click\", () => {\n        try {\n          if (!this.layoutContext) {\n            this.logToConsole(\"❌ LayoutContext not available\");\n            return;\n          }\n          \n          const messages = this.layoutContext.getMessages();\n          if (messages) {\n            messages.showError(\n              \"Connection Failed\",\n              \"Unable to connect to the server. Please check your internet connection.\",\n            );\n            this.logToConsole(\"❌ Error message displayed\");\n          } else {\n            // Try alternative access method\n            const alternativeMessages = this.mainContent?.getLayoutContext()?.getMessages();\n            if (alternativeMessages) {\n              alternativeMessages.showError(\n                \"Connection Failed\",\n                \"Unable to connect to the server. Please check your internet connection.\",\n              );\n              this.logToConsole(\"❌ Error message displayed via alternative access\");\n            } else {\n              this.logToConsole(\"❌ No messages component available\");\n            }\n          }\n        } catch (error: unknown) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.logToConsole(\"❌ Error in message handling: \" + errorMessage);\n        }\n      });\n    }\n\n    // Warning message\n    const msgWarning = document.getElementById(\"msg_warning\");\n    if (msgWarning) {\n      msgWarning.addEventListener(\"click\", () => {\n        try {\n          if (!this.layoutContext) {\n            this.logToConsole(\"❌ LayoutContext not available\");\n            return;\n          }\n          \n          const messages = this.layoutContext.getMessages();\n          if (messages) {\n            messages.showWarning(\n              \"Session Expiring\",\n              \"Your session will expire in 5 minutes. Save your work to avoid losing data.\",\n            );\n            this.logToConsole(\"⚠️ Warning message displayed\");\n          } else {\n            this.logToConsole(\"❌ No messages component available\");\n          }\n        } catch (error: unknown) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.logToConsole(\"❌ Error in message handling: \" + errorMessage);\n        }\n      });\n    }\n\n    // Info message\n    const msgInfo = document.getElementById(\"msg_info\");\n    if (msgInfo) {\n      msgInfo.addEventListener(\"click\", () => {\n        try {\n          if (!this.layoutContext) {\n            this.logToConsole(\"❌ LayoutContext not available\");\n            return;\n          }\n          \n          const messages = this.layoutContext.getMessages();\n          if (messages) {\n            messages.showInfo(\n              \"New Feature Available\",\n              \"Check out the new dashboard features in the sidebar navigation.\",\n            );\n            this.logToConsole(\"ℹ️ Info message displayed\");\n          } else {\n            this.logToConsole(\"❌ No messages component available\");\n          }\n        } catch (error: unknown) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.logToConsole(\"❌ Error in message handling: \" + errorMessage);\n        }\n      });\n    }\n\n    // Success message\n    const msgSuccess = document.getElementById(\"msg_success\");\n    if (msgSuccess) {\n      msgSuccess.addEventListener(\"click\", () => {\n        try {\n          if (!this.layoutContext) {\n            this.logToConsole(\"❌ LayoutContext not available\");\n            return;\n          }\n          \n          const messages = this.layoutContext.getMessages();\n          if (messages) {\n            messages.showSuccess(\n              \"Data Saved\",\n              \"Your changes have been saved successfully to the server.\",\n            );\n            this.logToConsole(\"✅ Success message displayed\");\n          } else {\n            this.logToConsole(\"❌ No messages component available\");\n          }\n        } catch (error: unknown) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.logToConsole(\"❌ Error in message handling: \" + errorMessage);\n        }\n      });\n    }\n  }\n\n  /**\n   * Setup advanced message controls\n   */\n  private setupAdvancedMessageControls(): void {\n    // Message with action\n    const msgWithAction = document.getElementById(\"msg_with_action\");\n    if (msgWithAction) {\n      msgWithAction.addEventListener(\"click\", () => {\n        try {\n          if (!this.layoutContext) {\n            this.logToConsole(\"❌ LayoutContext not available\");\n            return;\n          }\n          \n          const messages = this.layoutContext.getMessages();\n          if (messages) {\n            // For now, use basic error message since addMessage with actions might not be available\n            messages.showError(\n              \"Network Error\",\n              \"Failed to load data. Check your connection and try again.\",\n            );\n            this.logToConsole(\"🔧 Error message with action displayed\");\n          } else {\n            this.logToConsole(\"❌ Unable to access Messages component\");\n          }\n        } catch (error: unknown) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.logToConsole(\"❌ Error in message handling: \" + errorMessage);\n        }\n      });\n    }\n\n    // Persistent message\n    const msgPersistent = document.getElementById(\"msg_persistent\");\n    if (msgPersistent) {\n      msgPersistent.addEventListener(\"click\", () => {\n        try {\n          if (!this.layoutContext) {\n            this.logToConsole(\"❌ LayoutContext not available\");\n            return;\n          }\n          \n          const messages = this.layoutContext.getMessages();\n          if (messages) {\n            messages.showWarning(\n              \"Persistent Warning\",\n              'This message persists across page navigation. Use \"Clear Persistent\" to remove it.',\n            );\n            this.logToConsole(\"📌 Persistent warning message displayed\");\n          } else {\n            this.logToConsole(\"❌ Unable to access Messages component\");\n          }\n        } catch (error: unknown) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.logToConsole(\"❌ Error in message handling: \" + errorMessage);\n        }\n      });\n    }\n\n    // Auto-hide message\n    const msgAutoHide = document.getElementById(\"msg_auto_hide\");\n    if (msgAutoHide) {\n      msgAutoHide.addEventListener(\"click\", () => {\n        try {\n          if (!this.layoutContext) {\n            this.logToConsole(\"❌ LayoutContext not available\");\n            return;\n          }\n          \n          const messages = this.layoutContext.getMessages();\n          if (messages) {\n            messages.showInfo(\n              \"Auto-Hide Message\",\n              \"This message will automatically disappear after 3 seconds.\",\n            );\n            this.logToConsole(\"⏰ Auto-hide info message displayed (3s delay)\");\n          } else {\n            this.logToConsole(\"❌ Unable to access Messages component\");\n          }\n        } catch (error: unknown) {\n          this.logger.error(\"🎯 DEBUGPAGE - Error in auto-hide message handler:\", error);\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.logToConsole(\"❌ Error in message handling: \" + errorMessage);\n        }\n      });\n    }\n\n    // Message sequence\n    const msgSequence = document.getElementById(\"msg_sequence\");\n    if (msgSequence) {\n      msgSequence.addEventListener(\"click\", () => {\n        try {\n          this.showMessageSequence();\n          this.logToConsole(\"🎬 Message sequence started\");\n        } catch (error: unknown) {\n          this.logger.error(\"🎯 DEBUGPAGE - Error in sequence handler:\", error);\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.logToConsole(\"❌ Error in message sequence: \" + errorMessage);\n        }\n      });\n    }\n  }\n\n  /**\n   * Setup message management controls\n   */\n  private setupMessageManagementControls(): void {\n    // Clear all messages\n    const clearAllMessages = document.getElementById(\"clear_all_messages\");\n    if (clearAllMessages) {\n      clearAllMessages.addEventListener(\"click\", () => {\n        try {\n          if (!this.layoutContext) {\n            this.logToConsole(\"❌ LayoutContext not available\");\n            return;\n          }\n          \n          const messages = this.layoutContext.getMessages();\n          if (messages && typeof messages.clearAll === 'function') {\n            messages.clearAll();\n            this.logToConsole(\n              \"🗑️ All messages cleared via Messages API\",\n            );\n          } else {\n            this.logToConsole(\"❌ clearAll method not available\");\n          }\n        } catch (error: unknown) {\n          this.logger.error(\"🎯 DEBUGPAGE - Error in clear all handler:\", error);\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.logToConsole(\"❌ Error in message clearing: \" + errorMessage);\n        }\n      });\n    }\n\n    // Clear errors only\n    const clearErrorsOnly = document.getElementById(\"clear_errors_only\");\n    if (clearErrorsOnly) {\n      clearErrorsOnly.addEventListener(\"click\", () => {\n        try {\n          if (!this.layoutContext) {\n            this.logToConsole(\"❌ LayoutContext not available\");\n            return;\n          }\n          \n          const messages = this.layoutContext.getMessages();\n          if (messages && typeof messages.clearByType === 'function') {\n            messages.clearByType('error');\n            this.logToConsole(\"❌ Error messages cleared via Messages API\");\n          } else {\n            this.logToConsole(\"❌ clearByType method not available\");\n          }\n        } catch (error: unknown) {\n          this.logger.error(\"🎯 DEBUGPAGE - Error in clear errors handler:\", error);\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.logToConsole(\"❌ Error in message clearing: \" + errorMessage);\n        }\n      });\n    }\n\n    // Clear persistent messages\n    const clearPersistent = document.getElementById(\"clear_persistent\");\n    if (clearPersistent) {\n      clearPersistent.addEventListener(\"click\", () => {\n        try {\n          if (!this.layoutContext) {\n            this.logToConsole(\"❌ LayoutContext not available\");\n            return;\n          }\n          \n          const messages = this.layoutContext.getMessages();\n          if (messages && typeof messages.clearAll === 'function') {\n            messages.clearAll(true); // Include persistent messages\n            this.logToConsole(\n              \"📌 Persistent messages cleared via Messages API\",\n            );\n          } else {\n            this.logToConsole(\"❌ clearAll method not available\");\n          }\n        } catch (error: unknown) {\n          this.logger.error(\"🎯 DEBUGPAGE - Error in clear persistent handler:\", error);\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.logToConsole(\"❌ Error in message clearing: \" + errorMessage);\n        }\n      });\n    }\n  }\n\n  /**\n   * Show a sequence of messages for demonstration\n   */\n  private showMessageSequence(): void {\n    if (!this.layoutContext) {\n      this.logToConsole(\"❌ LayoutContext not available for sequence\");\n      return;\n    }\n    \n    const messages = this.layoutContext.getMessages();\n    if (!messages) {\n      this.logToConsole(\"❌ No messages component available for sequence\");\n      return;\n    }\n\n    let step = 0;\n    const steps = [\n      () => {\n        messages.showInfo(\n          \"Step 1\",\n          \"Starting data validation process...\",\n        );\n      },\n      () => {\n        messages.showInfo(\"Step 2\", \"Validating user permissions...\");\n      },\n      () => {\n        messages.showWarning(\n          \"Step 3\",\n          \"Found 2 validation warnings that need attention.\",\n        );\n      },\n      () => {\n        messages.showError(\n          \"Step 4\",\n          'Validation failed: Missing required field \"email\".',\n        );\n      },\n      () => {\n        messages.showSuccess(\n          \"Step 5\",\n          \"Process completed! All issues resolved.\",\n        );\n      },\n    ];\n\n    const runNextStep = () => {\n      if (step < steps.length) {\n        steps[step]();\n        step++;\n        setTimeout(runNextStep, 2000); // 2 second delay between steps\n      }\n    };\n\n    runNextStep();\n  }\n\n  /**\n   * Setup responsive behavior handlers\n   */\n  private setupResponsiveHandlers(): void {\n    this.logger.debug(\"🎯 DebugPage - Setting up responsive mode subscriptions...\");\n\n    // Note: 'responsive-mode-change' is not available in the current LayoutContext\n    // We'll rely on 'layout-mode-change' instead\n    // this.responsiveModeUnsubscribe = null;\n    const layoutContext = this.mainContent.getLayoutContext();\n    // Subscribe to layout mode changes\n    layoutContext.subscribe(\"layout-mode-change\", (event: LayoutEvent) => {\n      this.logger.debug(\"event:\", event);\n      const viewport = (event.data as any)?.viewport as LayoutViewPort;\n      const type = (event.data as any)?.modeType as LayoutModeType;\n      const sidebar = layoutContext.getSidebar();\n      const isSidebarCompact = sidebar?.isCompactMode();\n      const isSidebarVisible = sidebar?.isVisible();\n\n      const timestamp = new Date().toLocaleTimeString();\n\n      // Update layout status display\n      this.updateLayoutStatus();\n      this.updateComponentStatusDetails();\n      this.updateHotkeyStatus();\n\n      // Log the layout mode change\n      this.logToConsole(\n        `<span style=\"color: #8e44ad; font-weight: bold;\">[${timestamp}] 🏗️ LAYOUT MODE CHANGE</span>`,\n      );\n      this.logToConsole(`└─ Type: ${type.toUpperCase()}`);\n      this.logToConsole(`└─ Compact: ${isSidebarCompact ? \"YES\" : \"NO\"}`);\n      this.logToConsole(\n        `└─ Sidebar: ${sidebar?.getDimensions().width}px ${isSidebarVisible ? \"(visible)\" : \"(hidden)\"}`,\n      );\n      this.logToConsole(`└─ Viewport: ${viewport.width}x${viewport.height}`);\n    });\n\n    this.logToConsole(\"✅ Subscribed to LayoutContext layout mode changes\");\n    this.logToConsole(\n      `📊 Initial layout mode: ${this.layoutContext?.getModeType()}${this.layoutContext?.getSidebar()?.isCompactMode() ? \" (compact)\" : \"\"}`,\n    );\n  }\n\n  /**\n   * Update viewport information from LayoutContext\n   */\n  private updateViewportInfoFromContext(ctx: LayoutContext): void {\n    const viewportInfo = document.getElementById(\"viewport_info\");\n    if (viewportInfo) {\n      const viewport = ctx.getViewport();\n      const type = ctx.getModeType();\n      const sidebar = ctx.getSidebar();\n      const sidebarDimensions = sidebar?.getDimensions();\n      const isMobile = ctx.isLayoutMobile();\n      const isTablet = type === 'tablet';\n      const isCompact = sidebar?.isCompactMode() ?? false;\n\n      // Breakpoint indicators\n      const getBreakpointStatus = () => {\n        if (isMobile) return '📱 Mobile (≤768px)';\n        if (isTablet) return '📺 Tablet (769-1024px)';\n        return '💻 Desktop (≥1025px)';\n      };\n\n      // Device pixel ratio info\n      const pixelRatio = window.devicePixelRatio || 1;\n      const actualPixels = `${Math.round(viewport.width * pixelRatio)}x${Math.round(viewport.height * pixelRatio)}`;\n      \n      // Layout mode info\n      const modeColor = isMobile ? \"#e74c3c\" : (isTablet ? \"#f39c12\" : \"#27ae60\");\n      const compactInfo = isMobile \n        ? \"Overlay mode\" \n        : (isCompact ? \"Compact (64px)\" : `Expanded (${sidebarDimensions?.width}px)`);\n\n      viewportInfo.innerHTML = `\n        <div style=\"color: ${modeColor}; font-weight: bold; margin-bottom: 6px;\">${getBreakpointStatus()}</div>\n        <div style=\"margin-bottom: 6px;\">\n          📏 Viewport: ${viewport.width} x ${viewport.height}px<br>\n          🔍 Ratio: ${(viewport.width / viewport.height).toFixed(2)} ${viewport.width > viewport.height ? '(landscape)' : '(portrait)'}<br>\n          ${pixelRatio !== 1 ? `📷 Actual: ${actualPixels} (@${pixelRatio}x)<br>` : ''}\n        </div>\n        <div style=\"padding-top: 6px; border-top: 1px solid #ddd; font-size: 11px;\">\n          📋 Sidebar: ${compactInfo}<br>\n          👁 Visible: ${sidebar?.isVisible() ? \"✅ Yes\" : \"❌ Hidden\"}<br>\n          🌐 User Agent: ${navigator.userAgent.includes('Mobile') ? '📱 Mobile' : '💻 Desktop'}\n        </div>\n      `;\n    }\n  }\n\n  /**\n   * Update hotkey system status\n   */\n  private updateHotkeyStatus(): void {\n    const hotkeyStatus = document.getElementById(\"hotkey_status\");\n    if (hotkeyStatus) {\n      const ourHotkeys = this.getChainHotkeys();\n      const hotkeyCount = ourHotkeys ? ourHotkeys.size : 0;\n      \n      // Try to get chain manager info from layout context\n      let chainManagerStatus = 'Unknown';\n      let totalProviders = 'Unknown';\n      let globalListenerStatus = 'Unknown';\n      \n      try {\n        const ctx = this.layoutContext as any;\n        if (ctx.chainHotkeyManager) {\n          chainManagerStatus = '✅ Active';\n          // Try to get provider count from chain manager\n          if (ctx.chainHotkeyManager.providers) {\n            totalProviders = ctx.chainHotkeyManager.providers.size || 'N/A';\n          }\n          globalListenerStatus = '✅ Registered';\n        } else {\n          chainManagerStatus = '❌ Not Found';\n        }\n      } catch {\n        chainManagerStatus = 'Error';\n      }\n      \n      // Check if our provider is registered - look for both unsubscriber and initialized state\n      const hasUnsubscriber = !!this.chainProviderUnsubscriber;\n      const isInitialized = this.initialized;\n      const debugPageRegistered = (hasUnsubscriber && isInitialized) ? '✅ Registered' : '❌ Not Registered';\n      \n      // Get our hotkey details\n      let hotkeyBreakdown = 'None';\n      if (ourHotkeys && ourHotkeys.size > 0) {\n        const categories = {\n          'Ctrl+Shift': Array.from(ourHotkeys.keys()).filter(k => k.startsWith('Ctrl+Shift')).length,\n          'Shift': Array.from(ourHotkeys.keys()).filter(k => k.startsWith('Shift+') && !k.startsWith('Shift+Shift')).length,\n          'Escape': Array.from(ourHotkeys.keys()).filter(k => k === 'Escape').length\n        };\n        hotkeyBreakdown = `${categories['Ctrl+Shift']} Ctrl+Shift, ${categories['Shift']} Shift+, ${categories['Escape']} ESC`;\n      }\n      \n      hotkeyStatus.innerHTML = `\n        <div style=\"margin-bottom: 6px; font-weight: bold; color: #27ae60;\">⌨️ Chain Hotkey System</div>\n        <div style=\"margin-bottom: 6px;\">\n          🌎 Chain Manager: ${chainManagerStatus}<br>\n          🏠 DebugPage Provider: ${debugPageRegistered}<br>\n          🔑 Our Hotkeys: ${hotkeyCount} registered<br>\n          📊 Breakdown: ${hotkeyBreakdown}\n        </div>\n        <div style=\"padding-top: 6px; border-top: 1px solid #ddd; font-size: 11px; color: #666;\">\n          🌍 Global Listener: ${globalListenerStatus}<br>\n          💬 Total Providers: ${totalProviders}<br>\n          🔄 Browser Support: Ctrl+Shift + Shift+chars<br>\n          ✅ Status: All ${hotkeyCount} hotkeys functional\n        </div>\n      `;\n    }\n  }\n  \n  /**\n   * Update LayoutContext integration status\n   */\n  private updateLayoutStatus(): void {\n    const layoutStatus = document.getElementById(\"layout_status\");\n    if (layoutStatus && this.layoutContext) {\n      const components = this.layoutContext.getRegisteredComponents();\n      const messages = this.layoutContext.getMessages();\n      const sidebar = this.layoutContext.getSidebar();\n      \n      // Get subscriber count from EventBus debug info\n      let subscriberCount = 'N/A';\n      let eventBusEventCount = 'N/A';\n      try {\n        const ctx = this.layoutContext as any;\n        if (ctx.getEventBusDebugInfo && typeof ctx.getEventBusDebugInfo === 'function') {\n          const debugInfo = ctx.getEventBusDebugInfo();\n          subscriberCount = debugInfo.totalConsumers.toString();\n          eventBusEventCount = debugInfo.eventCount.toString();\n        }\n      } catch {\n        subscriberCount = 'Error';\n        eventBusEventCount = 'Error';\n      }\n      \n      // Enhanced component status checking\n      const headerProvider = components.header ? '✅ Registered' : '❌ Missing';\n      const sidebarProvider = components.sidebar ? '✅ Registered' : '❌ Missing';\n      const messagesProvider = components.messages ? '✅ Registered' : '❌ Missing';\n      const mainProvider = components.mainContent ? '✅ Registered' : '❌ Missing';\n      \n      // Footer status with more detailed checking\n      let footerProvider = '❌ Missing';\n      let footerDetails = '';\n      if (components.footer) {\n        footerProvider = '✅ Registered';\n      } else {\n        // Check if footer element exists in DOM\n        const footerElement = document.getElementById('app-footer');\n        if (footerElement) {\n          footerDetails = ' (DOM exists but not registered)';\n        } else {\n          footerDetails = ' (DOM element missing)';\n        }\n      }\n      \n      // Component functionality status\n      const sidebarFunctional = sidebar ? (\n        sidebar.isVisible() !== undefined && \n        sidebar.isCompactMode() !== undefined &&\n        sidebar.getDimensions().width > 0\n      ) : false;\n      \n      const messagesFunctional = messages ? (\n        typeof messages.showError === 'function' &&\n        typeof messages.showSuccess === 'function'\n      ) : false;\n      \n      // EventBus status\n      let eventBusStatus;\n      try {\n        const ctx = this.layoutContext as any;\n        if (ctx.getEventBus && typeof ctx.getEventBus === 'function') {\n          eventBusStatus = 'Available';\n        } else if (ctx.eventBus) {\n          eventBusStatus = 'Available (direct)';\n        } else {\n          eventBusStatus = 'Not Found';\n        }\n      } catch {\n        eventBusStatus = 'Error';\n      }\n\n      layoutStatus.innerHTML = `\n        <div style=\"margin-bottom: 6px; font-weight: bold; color: #27ae60;\">📊 Context Integration</div>\n        <div style=\"margin-bottom: 6px;\">\n          🏠 Main Content: ${mainProvider}<br>\n          📋 Sidebar: ${sidebarProvider} ${sidebarFunctional ? '(💪 Functional)' : '(⚠️ Limited)'}<br>\n          💬 Messages: ${messagesProvider} ${messagesFunctional ? '(💪 Functional)' : '(⚠️ Limited)'}<br>\n          📊 Header: ${headerProvider}<br>\n          📄 Footer: ${footerProvider}${footerDetails}\n        </div>\n        <div style=\"padding-top: 6px; border-top: 1px solid #ddd; font-size: 11px; color: #666;\">\n          📧 Event Subscribers: ${subscriberCount}<br>\n          📨 EventBus Events: ${eventBusEventCount}<br>\n          📡 EventBus Status: ${eventBusStatus}<br>\n          🔍 Mode Detection: ${this.layoutContext.isLayoutMobile() ? '📱 Mobile' : '💻 Desktop'}<br>\n          🔄 Auto Updates: ${this.eventMonitoringActive ? '✅ Active' : '❌ Stopped'}\n        </div>\n      `;\n    }\n  }\n  \n  /**\n   * Update detailed component status information\n   */\n  private updateComponentStatusDetails(): void {\n    const statusContainer = document.getElementById(\"component_status_details\");\n    if (!statusContainer || !this.layoutContext) {\n      return;\n    }\n    \n    const components = this.layoutContext.getRegisteredComponents();\n    let statusHtml = `<div style=\"margin-bottom: 15px; font-weight: bold; color: #495057;\">🔍 Detailed Component Diagnostics</div>`;\n    \n    // Helper function to format status info\n    const formatComponentStatus = (componentName: string, component: any) => {\n      if (!component || typeof component.getStatus !== 'function') {\n        return `<div style=\"background: #fff3cd; padding: 10px; border-radius: 4px; margin-bottom: 10px; border-left: 3px solid #ffc107;\">\n          <strong style=\"color: #856404;\">${componentName}:</strong> ❌ No status method available\n        </div>`;\n      }\n      \n      try {\n        const status = component.getStatus();\n        const uptime = status.uptime ? `${Math.floor(status.uptime / 1000)}s` : 'N/A';\n        const lastAction = status.currentState?.lastActionAgo ? \n          `${Math.floor(status.currentState.lastActionAgo / 1000)}s ago` : 'Never';\n        const issues = status.issues && status.issues.length > 0;\n        \n        const bgColor = issues ? '#f8d7da' : '#d1edff';\n        const borderColor = issues ? '#dc3545' : '#0dcaf0';\n        const statusColor = issues ? '#721c24' : '#055160';\n        const componentId = status.id || componentName.toLowerCase().replace(/\\s+/g, '-');\n        \n        // Quick status summary for collapsed view\n        const quickStatus = [];\n        if (status.initialized) quickStatus.push('✅ Init');\n        if (status.domElement) quickStatus.push('🏠 DOM');\n        if (status.eventListeners?.layoutSubscriptions > 0) quickStatus.push(`📡 ${status.eventListeners.layoutSubscriptions}`);\n        if (status.issues && status.issues.length > 0) quickStatus.push(`⚠️ ${status.issues.length}`);\n        const quickStatusText = quickStatus.length > 0 ? ` | ${quickStatus.join(' ')}` : '';\n        \n        let html = `<div style=\"background: ${bgColor}; padding: 12px; border-radius: 4px; margin-bottom: 15px; border-left: 3px solid ${borderColor};\">\n          <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px; cursor: pointer;\" onclick=\"debugPageToggleComponent('${componentId}')\">\n            <div style=\"color: ${statusColor}; font-weight: bold;\">${componentName} (${status.componentType})<span style=\"font-weight: normal; font-size: 11px; opacity: 0.8;\">${quickStatusText}</span></div>\n            <div style=\"color: ${statusColor}; font-size: 14px; user-select: none;\" id=\"toggle-${componentId}\">▶</div>\n          </div>\n          <div id=\"details-${componentId}\" style=\"display: none;\">`;\n        \n        // Basic status info\n        html += `<div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin-bottom: 8px;\">`;\n        html += `<div>📊 <strong>Status:</strong> ${status.initialized ? '✅ Initialized' : '❌ Not Initialized'}</div>`;\n        html += `<div>⏱️ <strong>Uptime:</strong> ${uptime}</div>`;\n        html += `<div>🔄 <strong>Last Action:</strong> ${lastAction}</div>`;\n        html += `<div>🏠 <strong>DOM ID:</strong> ${status.domElement?.id || 'N/A'}</div>`;\n        html += `</div>`;\n        \n        // Event listeners and subscriptions\n        if (status.eventListeners) {\n          html += `<div style=\"margin: 8px 0;\"><strong>Event Listeners:</strong> `;\n          const listeners = [];\n          if (status.eventListeners.domEvents) listeners.push(`DOM: ${status.eventListeners.domEvents}`);\n          if (status.eventListeners.layoutSubscriptions) listeners.push(`Layout: ${status.eventListeners.layoutSubscriptions}`);\n          if (status.eventListeners.eventBusSubscriptions) listeners.push(`EventBus: ${status.eventListeners.eventBusSubscriptions}`);\n          if (status.eventListeners.compactModeListeners) listeners.push(`Compact: ${status.eventListeners.compactModeListeners}`);\n          if (status.eventListeners.closeButtonListeners) listeners.push(`Close Buttons: ${status.eventListeners.closeButtonListeners}`);\n          html += listeners.join(', ') || 'None';\n          html += `</div>`;\n        }\n        \n        // Current state highlights\n        if (status.currentState) {\n          const state = status.currentState;\n          html += `<div style=\"margin: 8px 0;\"><strong>Current State:</strong> `;\n          const stateInfo = [];\n          \n          // Component-specific state info\n          if (componentName.includes('Sidebar')) {\n            stateInfo.push(`Mode: ${state.compactMode ? 'Compact' : 'Expanded'}`);\n            stateInfo.push(`Mobile: ${state.isMobile ? 'Yes' : 'No'}`);\n            stateInfo.push(`Nav Items: ${status.configuration?.navigationItemsCount || 0}`);\n          } else if (componentName.includes('Header')) {\n            stateInfo.push(`User Menu: ${state.userMenuInitialized ? 'Ready' : 'Not Ready'}`);\n            stateInfo.push(`Updates: ${state.updateCount || 0}`);\n          } else if (componentName.includes('MainContent')) {\n            stateInfo.push(`Content Updates: ${state.contentUpdateCount || 0}`);\n            stateInfo.push(`Loading: ${state.isLoading ? 'Yes' : 'No'}`);\n          } else if (componentName.includes('Footer')) {\n            stateInfo.push(`Nav Clicks: ${state.navigationClickCount || 0}`);\n            stateInfo.push(`Layout Updates: ${state.layoutUpdateCount || 0}`);\n          } else if (componentName.includes('Messages')) {\n            stateInfo.push(`Active: ${state.activeMessagesCount || 0}`);\n            stateInfo.push(`Timers: ${state.activeAutoHideTimers || 0}`);\n            if (state.messagesByType) {\n              const types = Object.entries(state.messagesByType).filter(([_, count]) => (count as number) > 0);\n              if (types.length > 0) {\n                stateInfo.push(`Types: ${types.map(([type, count]) => `${type}:${count}`).join(', ')}`);\n              }\n            }\n          }\n          \n          html += stateInfo.join(', ') || 'Default';\n          html += `</div>`;\n        }\n        \n        // Issues\n        if (status.issues && status.issues.length > 0) {\n          html += `<div style=\"margin: 8px 0; color: #721c24;\"><strong>⚠️ Issues:</strong><ul style=\"margin: 4px 0 0 20px; padding: 0;\">`;\n          const issues = Array.isArray(status.issues) ? status.issues : [];\n          issues.forEach((issue: string) => {\n            html += `<li>${issue}</li>`;\n          });\n          html += `</ul></div>`;\n        } else {\n          html += `<div style=\"margin: 8px 0; color: ${statusColor};\"><strong>✅ Status:</strong> No issues detected</div>`;\n        }\n        \n        // Performance info\n        if (status.performance) {\n          const perf = status.performance;\n          html += `<div style=\"margin: 8px 0; font-size: 11px; color: #666;\"><strong>Performance:</strong> `;\n          const perfInfo = [];\n          if (perf.initDuration) perfInfo.push(`Init: ${perf.initDuration}ms`);\n          if (perf.dimensions) perfInfo.push(`Dimensions: ${perf.dimensions.width}px`);\n          if (perf.averageMessageLifetime) perfInfo.push(`Avg Message Life: ${Math.floor(perf.averageMessageLifetime / 1000)}s`);\n          html += perfInfo.join(', ') || 'N/A';\n          html += `</div>`;\n        }\n        \n        html += `</div></div>`; // Close details div and main component div\n        return html;\n      } catch (error) {\n        return `<div style=\"background: #f8d7da; padding: 10px; border-radius: 4px; margin-bottom: 10px; border-left: 3px solid #dc3545;\">\n          <strong style=\"color: #721c24;\">${componentName}:</strong> ❌ Error getting status: ${error instanceof Error ? error.message : 'Unknown error'}\n        </div>`;\n      }\n    };\n    \n    // Add status for each component\n    statusHtml += formatComponentStatus('Header Component', components.header);\n    statusHtml += formatComponentStatus('Sidebar Component', components.sidebar);\n    statusHtml += formatComponentStatus('Main Content', components.mainContent);\n    statusHtml += formatComponentStatus('Footer Component', components.footer);\n    statusHtml += formatComponentStatus('Messages Component', components.messages);\n    \n    // Summary\n    const totalComponents = [components.header, components.sidebar, components.mainContent, components.footer, components.messages]\n      .filter(c => c).length;\n    const componentsWithStatus = [components.header, components.sidebar, components.mainContent, components.footer, components.messages]\n      .filter(c => c && typeof (c as any).getStatus === 'function').length;\n    \n    statusHtml += `<div style=\"background: #e2e3e5; padding: 10px; border-radius: 4px; margin-top: 15px; border-left: 3px solid #6c757d;\">\n      <strong style=\"color: #495057;\">📋 Summary:</strong> ${componentsWithStatus}/${totalComponents} components provide detailed status information\n    </div>`;\n    \n    statusContainer.innerHTML = statusHtml;\n    \n    // Add the toggle function to the global scope\n    (window as any).debugPageToggleComponent = this.toggleComponentDetails.bind(this);\n    \n    // Update toggle all button state\n    setTimeout(() => this.updateToggleAllButtonState(), 10);\n  }\n  \n  /**\n   * Refresh component status display\n   */\n  private refreshComponentStatus(): void {\n    // Show loading state\n    const statusContainer = document.getElementById(\"component_status_details\");\n    const refreshBtn = document.getElementById(\"refresh_component_status\") as HTMLButtonElement;\n    \n    if (refreshBtn) {\n      refreshBtn.disabled = true;\n      refreshBtn.innerHTML = '⏳ Refreshing...';\n      refreshBtn.style.opacity = '0.7';\n    }\n    \n    if (statusContainer) {\n      statusContainer.innerHTML = '<div style=\"text-align: center; color: #666; padding: 20px;\">🔄 Refreshing component status...</div>';\n    }\n    \n    // Use setTimeout to allow UI to update\n    setTimeout(() => {\n      this.updateComponentStatusDetails();\n      \n      if (refreshBtn) {\n        refreshBtn.disabled = false;\n        refreshBtn.innerHTML = '🔄 Refresh';\n        refreshBtn.style.opacity = '1';\n      }\n      \n      this.logToConsole('🔄 Component status refreshed');\n    }, 100);\n  }\n  \n  /**\n   * Toggle component details visibility\n   */\n  private toggleComponentDetails(componentId: string): void {\n    const detailsEl = document.getElementById(`details-${componentId}`);\n    const toggleEl = document.getElementById(`toggle-${componentId}`);\n    \n    if (detailsEl && toggleEl) {\n      const isVisible = detailsEl.style.display !== 'none';\n      detailsEl.style.display = isVisible ? 'none' : 'block';\n      toggleEl.textContent = isVisible ? '▶' : '▼';\n      \n      // Update toggle all button state\n      this.updateToggleAllButtonState();\n    }\n  }\n  \n  /**\n   * Toggle all components expanded/collapsed\n   */\n  private toggleAllComponents(): void {\n    const componentBoxes = [\n      'app-header', 'app-sidebar', 'main-content', 'app-footer', 'app-error-messages'\n    ];\n    \n    // Check if any components are collapsed to determine action\n    const anyCollapsed = componentBoxes.some(id => {\n      const detailsEl = document.getElementById(`details-${id}`);\n      return detailsEl && detailsEl.style.display === 'none';\n    });\n    \n    const expand = anyCollapsed;\n    \n    componentBoxes.forEach(componentId => {\n      const detailsEl = document.getElementById(`details-${componentId}`);\n      const toggleEl = document.getElementById(`toggle-${componentId}`);\n      \n      if (detailsEl && toggleEl) {\n        detailsEl.style.display = expand ? 'block' : 'none';\n        toggleEl.textContent = expand ? '▼' : '▶';\n      }\n    });\n    \n    this.updateToggleAllButtonState();\n    this.logToConsole(`🔽 ${expand ? 'Expanded' : 'Collapsed'} all component details`);\n  }\n  \n  /**\n   * Update the toggle all button text based on current state\n   */\n  private updateToggleAllButtonState(): void {\n    const toggleAllBtn = document.getElementById('toggle_all_components');\n    if (!toggleAllBtn) return;\n    \n    const componentBoxes = [\n      'app-header', 'app-sidebar', 'main-content', 'app-footer', 'app-error-messages'\n    ];\n    \n    const anyCollapsed = componentBoxes.some(id => {\n      const detailsEl = document.getElementById(`details-${id}`);\n      return detailsEl && detailsEl.style.display === 'none';\n    });\n    \n    const allCollapsed = componentBoxes.every(id => {\n      const detailsEl = document.getElementById(`details-${id}`);\n      return detailsEl && detailsEl.style.display === 'none';\n    });\n    \n    if (allCollapsed) {\n      toggleAllBtn.innerHTML = '🔽 Expand All';\n    } else if (anyCollapsed) {\n      toggleAllBtn.innerHTML = '🔽 Expand All';\n    } else {\n      toggleAllBtn.innerHTML = '🔽 Collapse All';\n    }\n  }\n  \n  /**\n   * Log message to test console\n   */\n  private logToConsole(message: string): void {\n    const testConsole = document.getElementById(\"test_console\");\n    if (testConsole) {\n      const timestamp = new Date().toLocaleTimeString();\n      const logElement = document.createElement(\"div\");\n      logElement.innerHTML = `<span style=\"color: #888;\">[${timestamp}]</span> ${message}`;\n      testConsole.appendChild(logElement);\n      testConsole.scrollTop = testConsole.scrollHeight;\n    }\n    this.logger.debug(\"DebugPage: {}\", message);\n  }\n\n  // =================================================================================\n  // Layout Events Monitoring Implementation\n  // =================================================================================\n  \n  private setupLayoutEventsMonitoring(): void {\n    const startBtn = document.getElementById(\"start_event_monitor\");\n    const stopBtn = document.getElementById(\"stop_event_monitor\");\n    const clearBtn = document.getElementById(\"clear_event_log\");\n    const triggerBtn = document.getElementById(\"trigger_layout_test\");\n    const refreshStatusBtn = document.getElementById(\"refresh_component_status\");\n    const toggleAllBtn = document.getElementById(\"toggle_all_components\");\n\n    if (startBtn) {\n      startBtn.addEventListener(\"click\", () => this.startEventMonitoring());\n    }\n    if (stopBtn) {\n      stopBtn.addEventListener(\"click\", () => this.stopEventMonitoring());\n    }\n    if (clearBtn) {\n      clearBtn.addEventListener(\"click\", () => this.clearLayoutEventsLog());\n    }\n    if (triggerBtn) {\n      triggerBtn.addEventListener(\"click\", () => this.triggerLayoutTestEvent());\n    }\n    if (refreshStatusBtn) {\n      refreshStatusBtn.addEventListener(\"click\", () => this.refreshComponentStatus());\n    }\n    if (toggleAllBtn) {\n      toggleAllBtn.addEventListener(\"click\", () => this.toggleAllComponents());\n    }\n\n    // Auto-start monitoring on page load for convenience\n    setTimeout(() => this.startEventMonitoring(), 500);\n  }\n\n  private startEventMonitoring(): void {\n    if (this.eventMonitoringActive) {\n      this.logLayoutEvent(\"ℹ️ Event monitoring is already active\");\n      return;\n    }\n\n    const layoutCtx = this.mainContent.getLayoutContext();\n    this.eventMonitoringActive = true;\n    this.eventStats = {\n      totalEvents: 0,\n      eventCounts: new Map<string, number>(),\n      startTime: Date.now(),\n      lastEventTime: 0,\n    };\n\n    // Subscribe to all known LayoutContext events\n    const subscribe = (type: LayoutEventType) => {\n      const unsubscribe = layoutCtx.subscribe(type, (event) => this.handleLayoutEvent(event));\n      this.layoutEventUnsubscribers.push(unsubscribe);\n    };\n\n    subscribe(\"layout-ready\");\n    subscribe(\"layout-mode-change\");\n    subscribe(\"sidebar-compact-mode-change\");\n    subscribe(\"sidebar-compact-request\");\n    subscribe(\"mobile-menu-request\");\n    subscribe(\"mobile-menu-mode-change\");\n    subscribe(\"user-menu-request\");\n    subscribe(\"user-menu-mode-change\");\n\n    this.updateEventStatsDisplay();\n    this.logLayoutEvent(\"✅ Layout event monitoring started\");\n    \n    // Update the layout status display to show monitoring is now active\n    this.updateLayoutStatus();\n    \n    // Show mobile layout constraint info if currently in mobile mode\n    const layoutContext = this.mainContent.getLayoutContext();\n    if (layoutContext.isLayoutMobile()) {\n      this.logLayoutEvent(\"📱 Mobile layout active - compact mode changes will be blocked\");\n    }\n  }\n\n  private stopEventMonitoring(): void {\n    if (!this.eventMonitoringActive) return;\n\n    this.layoutEventUnsubscribers.forEach((fn) => {\n      try { fn(); } catch {\n        // Ignore unsubscriber errors - they may have been cleaned up already\n      }\n    });\n    this.layoutEventUnsubscribers = [];\n    this.eventMonitoringActive = false;\n    this.logLayoutEvent(\"⏹️ Layout event monitoring stopped\");\n    \n    // Update the layout status display to show monitoring is now stopped\n    this.updateLayoutStatus();\n  }\n\n  private handleLayoutEvent(event: LayoutEvent): void {\n    if (!this.eventMonitoringActive) return;\n\n    const now = Date.now();\n    this.eventStats.totalEvents++;\n    this.eventStats.lastEventTime = now;\n    this.eventStats.eventCounts.set(\n      event.type,\n      (this.eventStats.eventCounts.get(event.type) || 0) + 1,\n    );\n\n    // Pretty-print event\n    const dataPreview = this.formatEventData(event);\n    this.logLayoutEvent(\n      `${this.badgeForEvent(event.type)} ${event.type} ${dataPreview}`,\n    );\n\n    this.updateEventStatsDisplay();\n  }\n\n  private formatEventData(event: LayoutEvent): string {\n    try {\n      // Use the factory's formatting method for typed events\n      const typedEvent = event as TypedLayoutEvent;\n      return LayoutEventFactory.formatEventDataForLogging(typedEvent);\n    } catch {\n      // Fallback to generic formatting for non-typed events\n      try {\n        return event.data ? `→ data=${JSON.stringify(event.data)}` : \"\";\n      } catch {\n        return \"→ [complex data]\";\n      }\n    }\n  }\n\n  private badgeForEvent(type: LayoutEventType): string {\n    return LayoutEventFactory.getEventBadge(type);\n  }\n\n  private logLayoutEvent(message: string): void {\n    const consoleEl = document.getElementById(\"layout_events_console\");\n    if (consoleEl) {\n      const timestamp = new Date().toLocaleTimeString();\n      const entry = document.createElement(\"div\");\n      entry.textContent = `[${timestamp}] ${message}`;\n      consoleEl.appendChild(entry);\n      consoleEl.scrollTop = consoleEl.scrollHeight;\n    }\n    // Also mirror to main test console\n    this.logToConsole(message);\n  }\n\n  private updateEventStatsDisplay(): void {\n    const statsEl = document.getElementById(\"event_stats\");\n    if (!statsEl) return;\n\n    if (!this.eventMonitoringActive) {\n      statsEl.textContent = \"Monitoring stopped. Click 'Start Monitor' to begin tracking events.\";\n      return;\n    }\n\n    const durationSec = ((Date.now() - this.eventStats.startTime) / 1000).toFixed(1);\n    const parts = [\n      `⏱️ Duration: ${durationSec}s`,\n      `📈 Total events: ${this.eventStats.totalEvents}`,\n    ];\n\n    const counts: string[] = [];\n    this.eventStats.eventCounts.forEach((count, type) => {\n      counts.push(`${type}: ${count}`);\n    });\n    parts.push(`📊 By type: { ${counts.join(\", \")} }`);\n\n    statsEl.textContent = parts.join(\" | \");\n  }\n\n  private clearLayoutEventsLog(): void {\n    const consoleEl = document.getElementById(\"layout_events_console\");\n    if (consoleEl) consoleEl.innerHTML = \"\";\n    this.logToConsole(\"🧹 Event log cleared\");\n  }\n\n  private triggerLayoutTestEvent(): void {\n    try {\n      const ctx = this.mainContent.getLayoutContext();\n      // Emit a synthetic layout-ready event to verify pipeline\n      ctx.emit(\"layout-ready\", { source: \"DebugPage\", at: Date.now() });\n      this.logToConsole(\"🔄 Triggered synthetic 'layout-ready' event\");\n    } catch {\n      this.logToConsole(\"❌ Failed to trigger test event\");\n    }\n  }\n\n  // =================================================================================\n  // ChainHotkeyProvider Implementation (Debug Page Shortcuts)\n  // =================================================================================\n  \n  /**\n   * Override to provide debug-specific chain hotkeys\n   */\n  getChainHotkeys(): Map<string, ChainHotkeyHandler> | null {\n    const hotkeys = new Map<string, ChainHotkeyHandler>();\n    \n    // Event Monitor Controls - Using browser-compatible key combinations\n    hotkeys.set('Ctrl+Shift+S', {\n      key: 'Ctrl+Shift+S',\n      providerId: this.getHotkeyProviderId(),\n      enabled: true,\n      handler: (ctx: HotkeyExecutionContext) => {\n        this.startEventMonitoring();\n        this.logToConsole('🎯 Hotkey: Started event monitoring (Ctrl+Shift+S)');\n        ctx.preventDefault();\n        ctx.break(); // Debug page exclusive\n      },\n      description: 'Start layout event monitoring',\n      priority: this.getProviderPriority(),\n      enable: () => { /* Always enabled on debug page */ },\n      disable: () => { /* Could disable if needed */ },\n      isEnabled: () => this.initialized && !this.destroyed\n    });\n    \n    hotkeys.set('Ctrl+Shift+X', {\n      key: 'Ctrl+Shift+X',\n      providerId: this.getHotkeyProviderId(),\n      enabled: true,\n      handler: (ctx: HotkeyExecutionContext) => {\n        this.stopEventMonitoring();\n        this.logToConsole('🎯 Hotkey: Stopped event monitoring (Ctrl+Shift+X)');\n        ctx.preventDefault();\n        ctx.break();\n      },\n      description: 'Stop layout event monitoring',\n      priority: this.getProviderPriority(),\n      enable: () => { /* Always enabled */ },\n      disable: () => { /* Could disable */ },\n      isEnabled: () => this.initialized && !this.destroyed\n    });\n    \n    hotkeys.set('Ctrl+Shift+C', {\n      key: 'Ctrl+Shift+C',\n      providerId: this.getHotkeyProviderId(),\n      enabled: true,\n      handler: (ctx: HotkeyExecutionContext) => {\n        this.clearLayoutEventsLog();\n        this.logToConsole('🎯 Hotkey: Cleared event log (Ctrl+Shift+C)');\n        ctx.preventDefault();\n        ctx.break();\n      },\n      description: 'Clear event log',\n      priority: this.getProviderPriority(),\n      enable: () => { /* Always enabled */ },\n      disable: () => { /* Could disable */ },\n      isEnabled: () => this.initialized && !this.destroyed\n    });\n    \n    hotkeys.set('Ctrl+Shift+T', {\n      key: 'Ctrl+Shift+T',\n      providerId: this.getHotkeyProviderId(),\n      enabled: true,\n      handler: (ctx: HotkeyExecutionContext) => {\n        this.triggerLayoutTestEvent();\n        this.logToConsole('🎯 Hotkey: Triggered test event (Ctrl+Shift+T)');\n        ctx.preventDefault();\n        ctx.break();\n      },\n      description: 'Trigger layout test event',\n      priority: this.getProviderPriority(),\n      enable: () => { /* Always enabled */ },\n      disable: () => { /* Could disable */ },\n      isEnabled: () => this.initialized && !this.destroyed\n    });\n    \n    hotkeys.set('Ctrl+Shift+R', {\n      key: 'Ctrl+Shift+R',\n      providerId: this.getHotkeyProviderId(),\n      enabled: true,\n      handler: (ctx: HotkeyExecutionContext) => {\n        this.refreshComponentStatus();\n        this.logToConsole('🎯 Hotkey: Refreshed component status (Ctrl+Shift+R)');\n        ctx.preventDefault();\n        ctx.break();\n      },\n      description: 'Refresh component status',\n      priority: this.getProviderPriority(),\n      enable: () => { /* Always enabled */ },\n      disable: () => { /* Could disable */ },\n      isEnabled: () => this.initialized && !this.destroyed\n    });\n    \n    hotkeys.set('Ctrl+Shift+E', {\n      key: 'Ctrl+Shift+E',\n      providerId: this.getHotkeyProviderId(),\n      enabled: true,\n      handler: (ctx: HotkeyExecutionContext) => {\n        this.toggleAllComponents();\n        this.logToConsole('🎯 Hotkey: Toggled all component details (Ctrl+Shift+E)');\n        ctx.preventDefault();\n        ctx.break();\n      },\n      description: 'Toggle all component details',\n      priority: this.getProviderPriority(),\n      enable: () => { /* Always enabled */ },\n      disable: () => { /* Could disable */ },\n      isEnabled: () => this.initialized && !this.destroyed\n    });\n    \n    // Message Simulation Shortcuts - using actual characters Firefox sends\n    hotkeys.set('Shift+!', {\n      key: 'Shift+!',\n      providerId: this.getHotkeyProviderId(),\n      enabled: true,\n      handler: (ctx: HotkeyExecutionContext) => {\n        this.logger.debug('🎯 DebugPage: Shift+! pressed - Show error message');\n        this.showErrorMessage();\n        this.logToConsole('🎯 Hotkey: Showed error message (Shift+1/!)');\n        ctx.preventDefault();\n        ctx.break();\n      },\n      description: 'Show error message (Shift+1)',\n      priority: this.getProviderPriority(),\n      enable: () => { /* Always enabled */ },\n      disable: () => { /* Could disable */ },\n      isEnabled: () => this.initialized && !this.destroyed\n    });\n    \n    hotkeys.set('Shift+@', {\n      key: 'Shift+@',\n      providerId: this.getHotkeyProviderId(),\n      enabled: true,\n      handler: (ctx: HotkeyExecutionContext) => {\n        this.logger.debug('🎯 DebugPage: Shift+@ pressed - Show warning message');\n        this.showWarningMessage();\n        this.logToConsole('🎯 Hotkey: Showed warning message (Shift+2/@)');\n        ctx.preventDefault();\n        ctx.break();\n      },\n      description: 'Show warning message (Shift+2)',\n      priority: this.getProviderPriority(),\n      enable: () => { /* Always enabled */ },\n      disable: () => { /* Could disable */ },\n      isEnabled: () => this.initialized && !this.destroyed\n    });\n    \n    hotkeys.set('Shift+#', {\n      key: 'Shift+#',\n      providerId: this.getHotkeyProviderId(),\n      enabled: true,\n      handler: (ctx: HotkeyExecutionContext) => {\n        this.logger.debug('🎯 DebugPage: Shift+# pressed - Show info message');\n        this.showInfoMessage();\n        this.logToConsole('🎯 Hotkey: Showed info message (Shift+3/#)');\n        ctx.preventDefault();\n        ctx.break();\n      },\n      description: 'Show info message (Shift+3)',\n      priority: this.getProviderPriority(),\n      enable: () => { /* Always enabled */ },\n      disable: () => { /* Could disable */ },\n      isEnabled: () => this.initialized && !this.destroyed\n    });\n    \n    hotkeys.set('Shift+$', {\n      key: 'Shift+$',\n      providerId: this.getHotkeyProviderId(),\n      enabled: true,\n      handler: (ctx: HotkeyExecutionContext) => {\n        this.logger.debug('🎯 DebugPage: Shift+$ pressed - Show success message');\n        this.showSuccessMessage();\n        this.logToConsole('🎯 Hotkey: Showed success message (Shift+4/$)');\n        ctx.preventDefault();\n        ctx.break();\n      },\n      description: 'Show success message (Shift+4)',\n      priority: this.getProviderPriority(),\n      enable: () => { /* Always enabled */ },\n      disable: () => { /* Could disable */ },\n      isEnabled: () => this.initialized && !this.destroyed\n    });\n    \n    // Clear All Messages\n    hotkeys.set('Shift+Backspace', {\n      key: 'Shift+Backspace',\n      providerId: this.getHotkeyProviderId(),\n      enabled: true,\n      handler: (ctx: HotkeyExecutionContext) => {\n        this.logger.debug('🎯 DebugPage: Shift+Backspace pressed - Clear all messages');\n        this.clearAllMessages();\n        this.logToConsole('🎯 Hotkey: Cleared all messages (Shift+Backspace)');\n        ctx.preventDefault();\n        ctx.break();\n      },\n      description: 'Clear all messages',\n      priority: this.getProviderPriority(),\n      enable: () => { /* Always enabled */ },\n      disable: () => { /* Could disable */ },\n      isEnabled: () => this.initialized && !this.destroyed\n    });\n    \n    // Console Controls\n    hotkeys.set('Ctrl+Shift+L', {\n      key: 'Ctrl+Shift+L',\n      providerId: this.getHotkeyProviderId(),\n      enabled: true,\n      handler: (ctx: HotkeyExecutionContext) => {\n        this.logger.debug('🎯 DebugPage: Ctrl+Shift+L pressed - Clear test console');\n        this.clearTestConsole();\n        this.logToConsole('🎯 Hotkey: Cleared test console (Ctrl+Shift+L)');\n        ctx.preventDefault();\n        ctx.break();\n      },\n      description: 'Clear test console',\n      priority: this.getProviderPriority(),\n      enable: () => { /* Always enabled */ },\n      disable: () => { /* Could disable */ },\n      isEnabled: () => this.initialized && !this.destroyed\n    });\n    \n    // Debug Information\n    hotkeys.set('Ctrl+Shift+H', {\n      key: 'Ctrl+Shift+H',\n      providerId: this.getHotkeyProviderId(),\n      enabled: true,\n      handler: (ctx: HotkeyExecutionContext) => {\n        this.logger.debug('🎯 DebugPage: Ctrl+Shift+H pressed - Show hotkey help');\n        this.showHotkeyHelp();\n        this.logToConsole('🎯 Hotkey: Showed hotkey help (Ctrl+Shift+H)');\n        ctx.preventDefault();\n        ctx.break();\n      },\n      description: 'Show hotkey help',\n      priority: this.getProviderPriority(),\n      enable: () => { /* Always enabled */ },\n      disable: () => { /* Could disable */ },\n      isEnabled: () => this.initialized && !this.destroyed\n    });\n    \n    // Enhanced ESC for debug page - cooperative with parent PageComponent ESC\n    hotkeys.set('Escape', {\n      key: 'Escape',\n      providerId: this.getHotkeyProviderId(),\n      enabled: true,\n      handler: (ctx: HotkeyExecutionContext) => {\n        this.logger.debug('🎯 DebugPage: Escape pressed - Debug page ESC handling');\n        \n        // Debug-specific ESC behavior\n        const handled = this.handleDebugPageEscape(ctx);\n        \n        if (handled) {\n          this.logToConsole('🎯 Hotkey: Debug page handled ESC');\n          // Let other ESC handlers also run (cooperative)\n          ctx.next();\n        } else {\n          // Nothing debug-specific to handle, pass to parent/other handlers\n          ctx.next();\n        }\n      },\n      description: 'Debug page specific ESC handling',\n      priority: this.getProviderPriority(), // Same as PageComponent (200)\n      enable: () => { /* Always enabled */ },\n      disable: () => { /* Could disable */ },\n      isEnabled: () => this.initialized && !this.destroyed\n    });\n    \n    this.logger.debug('🔑 DebugPage: Registered {} chain hotkeys: {}', hotkeys.size, Array.from(hotkeys.keys()));\n    return hotkeys;\n  }\n  \n  // =================================================================================\n  // Debug Hotkey Action Methods\n  // =================================================================================\n  \n  /**\n   * Show error message (triggered by Shift+1)\n   */\n  private showErrorMessage(): void {\n    const ctx = this.mainContent.getLayoutContext();\n    const messages = ctx.getMessages();\n    if (messages) {\n      messages.showError(\n        'Debug Error Message',\n        'This is a test error message triggered by hotkey (Shift+1)',\n        { id: 'debug-error-hotkey' }\n      );\n    }\n  }\n  \n  /**\n   * Show warning message (triggered by Shift+2)\n   */\n  private showWarningMessage(): void {\n    const ctx = this.mainContent.getLayoutContext();\n    const messages = ctx.getMessages();\n    if (messages) {\n      messages.showWarning(\n        'Debug Warning Message', \n        'This is a test warning message triggered by hotkey (Shift+2)',\n        { id: 'debug-warning-hotkey' }\n      );\n    }\n  }\n  \n  /**\n   * Show info message (triggered by Shift+3)\n   */\n  private showInfoMessage(): void {\n    const ctx = this.mainContent.getLayoutContext();\n    const messages = ctx.getMessages();\n    if (messages) {\n      messages.showInfo(\n        'Debug Info Message',\n        'This is a test info message triggered by hotkey (Shift+3)',\n        { id: 'debug-info-hotkey' }\n      );\n    }\n  }\n  \n  /**\n   * Show success message (triggered by Shift+4)\n   */\n  private showSuccessMessage(): void {\n    const ctx = this.mainContent.getLayoutContext();\n    const messages = ctx.getMessages();\n    if (messages) {\n      messages.showSuccess(\n        'Debug Success Message',\n        'This is a test success message triggered by hotkey (Shift+4)',\n        { id: 'debug-success-hotkey' }\n      );\n    }\n  }\n  \n  /**\n   * Clear all messages (triggered by Shift+Backspace)\n   */\n  private clearAllMessages(): void {\n    const ctx = this.mainContent.getLayoutContext();\n    const messages = ctx.getMessages();\n    if (messages) {\n      messages.clearAll();\n    }\n  }\n  \n  /**\n   * Clear test console (triggered by Ctrl+L)\n   */\n  private clearTestConsole(): void {\n    const testConsole = document.getElementById('test_console');\n    if (testConsole) {\n      testConsole.innerHTML = '';\n    }\n  }\n  \n  /**\n   * Show hotkey help (triggered by Ctrl+Shift+H)\n   */\n  private showHotkeyHelp(): void {\n    const helpMessage = `\n🎯 Debug Page Hotkeys (Firefox/Browser-friendly):\n\n📊 Event Monitoring:\n  Ctrl+Shift+S - Start event monitoring\n  Ctrl+Shift+X - Stop event monitoring\n  Ctrl+Shift+C - Clear event log\n  Ctrl+Shift+T - Trigger test event\n\n💬 Message Testing:\n  Shift+1 (!) - Show error message\n  Shift+2 (@) - Show warning message\n  Shift+3 (#) - Show info message\n  Shift+4 ($) - Show success message\n  Shift+Backspace - Clear all messages\n\n🔧 Console Controls:\n  Ctrl+Shift+L - Clear test console\n  Ctrl+Shift+H - Show this help\n\n⌨️ Chain System:\n  ESC - Cooperative escape handling\n  \n🌍 Browser Note: Using Ctrl+Shift+ combinations for\n  maximum compatibility across Firefox, Chrome, and Safari.\n    `;\n    \n    this.logToConsole(helpMessage);\n    \n    // Also show in layout events console\n    this.logLayoutEvent('📖 Hotkey help displayed - see test console for full list');\n  }\n  \n  /**\n   * Handle debug-specific ESC key behavior\n   */\n  private handleDebugPageEscape(_ctx: HotkeyExecutionContext): boolean {\n    let handled = false;\n    \n    // If event monitoring is active, stop it on ESC\n    if (this.eventMonitoringActive) {\n      this.stopEventMonitoring();\n      this.logToConsole('🎯 ESC: Stopped event monitoring');\n      handled = true;\n    }\n    \n    return handled;\n  }\n  \n  /**\n   * Test hotkey system manually - for debugging\n   */\n  public testHotkeySystem(): void {\n    this.logger.debug('🧪 Manual hotkey system test started...');\n    this.logToConsole('🧪 Testing hotkey handlers manually...');\n    \n    // Test if handlers can be called directly\n    try {\n      this.startEventMonitoring();\n      this.logToConsole('✅ Manual start monitoring: SUCCESS');\n      \n      setTimeout(() => {\n        this.stopEventMonitoring();\n        this.logToConsole('✅ Manual stop monitoring: SUCCESS');\n        \n        this.logToConsole('📝 Hotkey system test complete. If you see this, handlers work but key detection may be the issue.');\n        \n        // Show registered hotkeys\n        this.showRegisteredHotkeys();\n        \n        // Add keydown listener to debug key detection\n        this.addDebugKeyListener();\n      }, 1000);\n      \n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      this.logToConsole('❌ Manual hotkey test failed: ' + errorMessage);\n    }\n  }\n  \n  /**\n   * Add temporary keydown listener for debugging\n   */\n  private addDebugKeyListener(): void {\n    this.logToConsole('🔍 Adding debug key listener. Try pressing Ctrl+Shift+S now...');\n    \n    const debugListener = (event: KeyboardEvent) => {\n      // Check for our specific combinations\n      if (event.ctrlKey && event.shiftKey) {\n        // Manually normalize the key the same way the chain manager does\n        const modifiers = [];\n        if (event.ctrlKey) modifiers.push('Ctrl');\n        if (event.metaKey) modifiers.push('Meta');\n        if (event.altKey) modifiers.push('Alt');\n        if (event.shiftKey) modifiers.push('Shift');\n        const normalizedKey = modifiers.length > 0 ? `${modifiers.join('+')}+${event.key}` : event.key;\n        \n        this.logToConsole(`🎯 Key detected: Ctrl+Shift+${event.key}`);\n        this.logToConsole(`🔄 Normalized key: \"${normalizedKey}\"`);\n        this.logger.debug('🎯 Key event details: {}', {\n          key: event.key,\n          code: event.code,\n          ctrlKey: event.ctrlKey,\n          shiftKey: event.shiftKey,\n          altKey: event.altKey,\n          metaKey: event.metaKey,\n          normalizedKey: normalizedKey\n        });\n        \n        if (event.key.toLowerCase() === 's') {\n          this.logToConsole('✅ Detected Ctrl+Shift+S - this should trigger start monitoring!');\n          \n          // Check if our registered hotkey matches\n          const ourHotkeys = this.getChainHotkeys();\n          if (ourHotkeys && ourHotkeys.has(normalizedKey)) {\n            this.logToConsole('✅ Normalized key MATCHES our registered hotkey!');\n          } else {\n            this.logToConsole('❌ Normalized key does NOT match our registered hotkey');\n            this.logToConsole(`🔍 Looking for: \"${normalizedKey}\"`);\n            if (ourHotkeys) {\n              const registeredKeys = Array.from(ourHotkeys.keys()).filter(k => k.includes('Ctrl+Shift'));\n              this.logToConsole(`🔍 Registered Ctrl+Shift keys: ${registeredKeys.join(', ')}`);\n            }\n          }\n        }\n      }\n      \n      // Also check for Shift-only combinations (like Shift+1)\n      if (event.shiftKey && !event.ctrlKey && !event.altKey && !event.metaKey) {\n        const modifiers = [];\n        if (event.shiftKey) modifiers.push('Shift');\n        const normalizedKey = modifiers.length > 0 ? `${modifiers.join('+')}+${event.key}` : event.key;\n        \n        this.logToConsole(`🎯 Shift-only key detected: ${normalizedKey}`);\n        this.logger.debug('🎯 Shift-only key event details: {}', {\n          key: event.key,\n          code: event.code,\n          ctrlKey: event.ctrlKey,\n          shiftKey: event.shiftKey,\n          altKey: event.altKey,\n          metaKey: event.metaKey,\n          normalizedKey: normalizedKey\n        });\n        \n        // Check if our registered hotkey matches\n        const ourHotkeys = this.getChainHotkeys();\n        if (ourHotkeys && ourHotkeys.has(normalizedKey)) {\n          this.logToConsole('✅ Shift-only key MATCHES our registered hotkey!');\n        } else {\n          this.logToConsole('❌ Shift-only key does NOT match our registered hotkey');\n          this.logToConsole(`🔍 Looking for: \"${normalizedKey}\"`);\n          if (ourHotkeys) {\n            const registeredShiftKeys = Array.from(ourHotkeys.keys()).filter(k => k.startsWith('Shift+'));\n            this.logToConsole(`🔍 Registered Shift keys: ${registeredShiftKeys.join(', ')}`);\n          }\n        }\n      }\n    };\n    \n    document.addEventListener('keydown', debugListener);\n    \n    // Remove listener after 30 seconds\n    setTimeout(() => {\n      document.removeEventListener('keydown', debugListener);\n      this.logToConsole('🚪 Debug key listener removed after 30 seconds');\n    }, 30000);\n  }\n  \n  /**\n   * Show what hotkeys are actually registered\n   */\n  private showRegisteredHotkeys(): void {\n    const hotkeys = this.getChainHotkeys();\n    if (hotkeys) {\n      this.logToConsole(`🗺️ Registered hotkeys (${hotkeys.size}):`);\n      for (const [key, handler] of Array.from(hotkeys)) {\n        this.logToConsole(`  - ${key}: ${handler.description}`);\n      }\n    } else {\n      this.logToConsole('❌ No hotkeys registered!');\n    }\n  }\n  \n  /**\n   * Setup breadcrumb test controls\n   */\n  private setupBreadcrumbTestControls(): void {\n    // PageContext breadcrumb tests (hierarchical/scoped)\n    this.setupBasicBreadcrumbTests();\n    this.setupDynamicBreadcrumbTests();\n    \n    // HeaderComponent breadcrumb tests (direct/global)\n    this.setupHeaderComponentBreadcrumbTests();\n  }\n  \n  /**\n   * Setup basic breadcrumb test buttons\n   */\n  private setupBasicBreadcrumbTests(): void {\n    // Single page breadcrumb\n    const breadcrumbSingle = document.getElementById('breadcrumb_single');\n    if (breadcrumbSingle) {\n      breadcrumbSingle.addEventListener('click', () => {\n        this.testSinglePageBreadcrumb();\n      });\n    }\n    \n    // Multi-level breadcrumb\n    const breadcrumbMulti = document.getElementById('breadcrumb_multi');\n    if (breadcrumbMulti) {\n      breadcrumbMulti.addEventListener('click', () => {\n        this.testMultiLevelBreadcrumb();\n      });\n    }\n    \n    // Breadcrumb with links\n    const breadcrumbLinks = document.getElementById('breadcrumb_links');\n    if (breadcrumbLinks) {\n      breadcrumbLinks.addEventListener('click', () => {\n        this.testBreadcrumbsWithLinks();\n      });\n    }\n    \n    // Breadcrumb with actions\n    const breadcrumbActions = document.getElementById('breadcrumb_actions');\n    if (breadcrumbActions) {\n      breadcrumbActions.addEventListener('click', () => {\n        this.testBreadcrumbsWithActions();\n      });\n    }\n    \n    // Clear breadcrumbs\n    const breadcrumbClear = document.getElementById('breadcrumb_clear');\n    if (breadcrumbClear) {\n      breadcrumbClear.addEventListener('click', () => {\n        this.clearBreadcrumbs();\n      });\n    }\n  }\n  \n  /**\n   * Setup dynamic breadcrumb test buttons\n   */\n  private setupDynamicBreadcrumbTests(): void {\n    // Add breadcrumb item\n    const breadcrumbAdd = document.getElementById('breadcrumb_add');\n    if (breadcrumbAdd) {\n      breadcrumbAdd.addEventListener('click', () => {\n        this.addBreadcrumbItem();\n      });\n    }\n    \n    // Remove breadcrumb item\n    const breadcrumbRemove = document.getElementById('breadcrumb_remove');\n    if (breadcrumbRemove) {\n      breadcrumbRemove.addEventListener('click', () => {\n        this.removeBreadcrumbItem();\n      });\n    }\n    \n    // Update breadcrumb item\n    const breadcrumbUpdate = document.getElementById('breadcrumb_update');\n    if (breadcrumbUpdate) {\n      breadcrumbUpdate.addEventListener('click', () => {\n        this.updateBreadcrumbItem();\n      });\n    }\n    \n    // Show breadcrumb status\n    const breadcrumbStatus = document.getElementById('breadcrumb_status');\n    if (breadcrumbStatus) {\n      breadcrumbStatus.addEventListener('click', () => {\n        this.showBreadcrumbStatus();\n      });\n    }\n  }\n  \n  /**\n   * Setup HeaderComponent breadcrumb test buttons (direct access)\n   */\n  private setupHeaderComponentBreadcrumbTests(): void {\n    // Basic HeaderComponent tests\n    const headerBasic = document.getElementById('header_breadcrumb_basic');\n    if (headerBasic) {\n      headerBasic.addEventListener('click', () => {\n        this.testHeaderBreadcrumbBasic();\n      });\n    }\n    \n    const headerComplex = document.getElementById('header_breadcrumb_complex');\n    if (headerComplex) {\n      headerComplex.addEventListener('click', () => {\n        this.testHeaderBreadcrumbComplex();\n      });\n    }\n    \n    const headerInteractive = document.getElementById('header_breadcrumb_interactive');\n    if (headerInteractive) {\n      headerInteractive.addEventListener('click', () => {\n        this.testHeaderBreadcrumbInteractive();\n      });\n    }\n    \n    const headerComponentStatus = document.getElementById('header_breadcrumb_component_status');\n    if (headerComponentStatus) {\n      headerComponentStatus.addEventListener('click', () => {\n        this.showHeaderBreadcrumbComponentStatus();\n      });\n    }\n    \n    // Direct component operations\n    const headerDirectAdd = document.getElementById('header_breadcrumb_direct_add');\n    if (headerDirectAdd) {\n      headerDirectAdd.addEventListener('click', () => {\n        this.testHeaderBreadcrumbDirectAdd();\n      });\n    }\n    \n    const headerDirectRemove = document.getElementById('header_breadcrumb_direct_remove');\n    if (headerDirectRemove) {\n      headerDirectRemove.addEventListener('click', () => {\n        this.testHeaderBreadcrumbDirectRemove();\n      });\n    }\n    \n    const headerDirectUpdate = document.getElementById('header_breadcrumb_direct_update');\n    if (headerDirectUpdate) {\n      headerDirectUpdate.addEventListener('click', () => {\n        this.testHeaderBreadcrumbDirectUpdate();\n      });\n    }\n    \n    const headerDirectClear = document.getElementById('header_breadcrumb_direct_clear');\n    if (headerDirectClear) {\n      headerDirectClear.addEventListener('click', () => {\n        this.testHeaderBreadcrumbDirectClear();\n      });\n    }\n  }\n  \n  /**\n   * Get breadcrumbs manager from PageContext\n   */\n  private async getBreadcrumbsManager(): Promise<import('../interfaces/BreadcrumbsManager').BreadcrumbsManager | null> {\n    try {\n      if (!this.hasPageContext()) {\n        this.logger.warn('🍞 DebugPage - PageContext not available');\n        return null;\n      }\n      const pageContext = await this.getPageContext();\n      return pageContext.breadcrumbs();\n    } catch (error) {\n      this.logger.error('🍞 DebugPage - Error getting PageContext:', error);\n      return null;\n    }\n  }\n  \n  /**\n   * Test single page breadcrumb (with proper hierarchical scoping)\n   */\n  private async testSinglePageBreadcrumb(): Promise<void> {\n    const breadcrumbsManager = await this.getBreadcrumbsManager();\n    if (breadcrumbsManager) {\n      const items: BreadcrumbItem[] = [\n        { id: 'DebugPage', text: 'Debug Page' }  // ← Use actual page ID for proper scoping\n      ];\n      breadcrumbsManager.set(items);\n      this.logToConsole('🍞 PageContext - Single page breadcrumb set');\n    } else {\n      this.logToConsole('❌ PageContext - Breadcrumbs manager not available');\n    }\n  }\n  \n  /**\n   * Test multi-level breadcrumb using PageContext (with proper hierarchical scoping)\n   */\n  private async testMultiLevelBreadcrumb(): Promise<void> {\n    const breadcrumbsManager = await this.getBreadcrumbsManager();\n    if (breadcrumbsManager) {\n      const items: BreadcrumbItem[] = [\n        { id: 'DebugPage', text: 'Debug Page' },      // ← Include page ID for proper scoping\n        { id: 'dashboard', text: 'Dashboard' },\n        { id: 'reports', text: 'Reports' },\n        { id: 'analytics', text: 'Analytics' }\n      ];\n      breadcrumbsManager.set(items);\n      this.logToConsole('🍞 PageContext - Multi-level breadcrumb set');\n    } else {\n      this.logToConsole('❌ PageContext - Breadcrumbs manager not available');\n    }\n  }\n  \n  /**\n   * Test breadcrumbs with links using PageContext (with proper hierarchical scoping)\n   */\n  private async testBreadcrumbsWithLinks(): Promise<void> {\n    const breadcrumbsManager = await this.getBreadcrumbsManager();\n    if (breadcrumbsManager) {\n      const items: BreadcrumbItem[] = [\n        { id: 'DebugPage', text: 'Debug Page' },  // ← Page scope starts here\n        { id: 'home', text: 'Home', href: '/', caption: 'Go to homepage' },\n        { id: 'dashboard', text: 'Dashboard', href: '/dashboard', caption: 'View dashboard' }\n      ];\n      breadcrumbsManager.set(items);\n      this.logToConsole('🍞 PageContext - Breadcrumbs with links set');\n    } else {\n      this.logToConsole('❌ PageContext - Breadcrumbs manager not available');\n    }\n  }\n  \n  /**\n   * Test breadcrumbs with actions using PageContext (with proper hierarchical scoping)\n   */\n  private async testBreadcrumbsWithActions(): Promise<void> {\n    const breadcrumbsManager = await this.getBreadcrumbsManager();\n    if (breadcrumbsManager) {\n      const items: BreadcrumbItem[] = [\n        { id: 'DebugPage', text: 'Debug Page' },  // ← Page scope starts here\n        {\n          id: 'dashboard',\n          text: 'Dashboard',\n          clickHandler: (item) => {\n            this.logToConsole(`🍞 Breadcrumb action clicked: ${item.text}`);\n          },\n          caption: 'Click to test action'\n        },\n        {\n          id: 'settings',\n          text: 'Settings',\n          clickHandler: (item) => {\n            this.logToConsole(`🍞 Settings breadcrumb clicked: ${item.text}`);\n            alert(`Breadcrumb action executed: ${item.text}`);\n          },\n          caption: 'Click to show alert'\n        }\n      ];\n      breadcrumbsManager.set(items);\n      this.logToConsole('🍞 PageContext - Breadcrumbs with actions set');\n    } else {\n      this.logToConsole('❌ PageContext - Breadcrumbs manager not available');\n    }\n  }\n  \n  /**\n   * Clear all breadcrumbs using PageContext\n   */\n  private async clearBreadcrumbs(): Promise<void> {\n    const breadcrumbsManager = await this.getBreadcrumbsManager();\n    if (breadcrumbsManager) {\n      breadcrumbsManager.clear();\n      this.logToConsole('🍞 PageContext - All breadcrumbs cleared');\n    } else {\n      this.logToConsole('❌ PageContext - Breadcrumbs manager not available');\n    }\n  }\n  \n  /**\n   * Add a dynamic breadcrumb item using PageContext\n   */\n  private async addBreadcrumbItem(): Promise<void> {\n    const breadcrumbsManager = await this.getBreadcrumbsManager();\n    if (breadcrumbsManager) {\n      const timestamp = Date.now();\n      const newItem: BreadcrumbItem = {\n        id: `dynamic-${timestamp}`,\n        text: `Item ${timestamp % 1000}`,\n        caption: 'Dynamically added',\n        clickHandler: (item) => {\n          this.logToConsole(`🍞 Dynamic item clicked: ${item.text}`);\n        }\n      };\n      breadcrumbsManager.add(newItem);\n      this.logToConsole(`🍞 PageContext - Added dynamic breadcrumb: ${newItem.text}`);\n    } else {\n      this.logToConsole('❌ PageContext - Breadcrumbs manager not available');\n    }\n  }\n  \n  /**\n   * Remove a breadcrumb item using PageContext\n   */\n  private async removeBreadcrumbItem(): Promise<void> {\n    const breadcrumbsManager = await this.getBreadcrumbsManager();\n    if (breadcrumbsManager) {\n      const currentItems = breadcrumbsManager.get();\n      if (currentItems.length > 0) {\n        const itemToRemove = currentItems[currentItems.length - 1];\n        breadcrumbsManager.remove(itemToRemove.id);\n        this.logToConsole(`🍞 PageContext - Removed breadcrumb: ${itemToRemove.text}`);\n      } else {\n        this.logToConsole('🍞 PageContext - No breadcrumbs to remove');\n      }\n    } else {\n      this.logToConsole('❌ PageContext - Breadcrumbs manager not available');\n    }\n  }\n  \n  /**\n   * Update a breadcrumb item using PageContext\n   */\n  private async updateBreadcrumbItem(): Promise<void> {\n    const breadcrumbsManager = await this.getBreadcrumbsManager();\n    if (breadcrumbsManager) {\n      const currentItems = breadcrumbsManager.get();\n      if (currentItems.length > 0) {\n        const itemToUpdate = currentItems[0];\n        const timestamp = Date.now();\n        breadcrumbsManager.update(itemToUpdate.id, {\n          text: `Updated ${timestamp % 1000}`,\n          caption: 'Recently updated'\n        });\n        this.logToConsole(`🍞 PageContext - Updated breadcrumb: ${itemToUpdate.id}`);\n      } else {\n        this.logToConsole('🍞 PageContext - No breadcrumbs to update');\n      }\n    } else {\n      this.logToConsole('❌ PageContext - Breadcrumbs manager not available');\n    }\n  }\n  \n  /**\n   * Show breadcrumb status via PageContext\n   */\n  private async showBreadcrumbStatus(): Promise<void> {\n    const breadcrumbsManager = await this.getBreadcrumbsManager();\n    if (breadcrumbsManager) {\n      const currentItems = breadcrumbsManager.get();\n      this.logToConsole('🍞 PageContext - Breadcrumb Status:');\n      this.logToConsole(`  Available: ${breadcrumbsManager.isAvailable()}`);\n      this.logToConsole(`  Count: ${currentItems.length}`);\n      if (currentItems.length > 0) {\n        this.logToConsole('  Current breadcrumbs:');\n        currentItems.forEach((item: BreadcrumbItem) => {\n          this.logToConsole(`    - ${item.id}: ${item.text}`);\n        });\n      }\n    } else {\n      this.logToConsole('❌ PageContext - Breadcrumbs manager not available');\n    }\n  }\n  \n  /**\n   * Set initial breadcrumb for debug page using PageContext (with proper hierarchical scoping)\n   */\n  private async setInitialBreadcrumb(): Promise<void> {\n    try {\n      const pageContext = await this.getPageContext();\n      const breadcrumbsManager = pageContext.breadcrumbs();\n      \n      if (breadcrumbsManager && breadcrumbsManager.isAvailable()) {\n        const items: BreadcrumbItem[] = [\n          { id: 'DebugPage', text: 'Debug & Testing', caption: 'Development tools' }  // ← Use proper page ID\n        ];\n        breadcrumbsManager.set(items);\n        this.logger.debug('🍞 DebugPage - Initial breadcrumbs set via PageContext');\n      } else {\n        this.logger.warn('🍞 DebugPage - BreadcrumbsManager not available for initial setup');\n      }\n    } catch (error) {\n      this.logger.error('🍞 DebugPage - Error setting initial breadcrumbs:', error);\n    }\n  }\n  \n  // =============================================================================\n  // HeaderComponent Breadcrumb Tests (Direct/Global Access)\n  // =============================================================================\n  \n  /**\n   * Get BreadcrumbsComponent directly from HeaderComponent\n   */\n  private getBreadcrumbsComponent(): import('../components/BreadcrumbsComponent').BreadcrumbsComponent | null {\n    try {\n      const layoutContext = this.mainContent.getLayoutContext();\n      const header = layoutContext.getHeader();\n      return header?.getBreadcrumbsComponent() || null;\n    } catch (error) {\n      this.logger.error('🍞 DebugPage - Error getting BreadcrumbsComponent:', error);\n      return null;\n    }\n  }\n  \n  /**\n   * Test basic breadcrumb trail via HeaderComponent\n   */\n  private testHeaderBreadcrumbBasic(): void {\n    const breadcrumbsComponent = this.getBreadcrumbsComponent();\n    if (breadcrumbsComponent) {\n      const items: BreadcrumbItem[] = [\n        { id: 'home', text: 'Home', href: '/' },\n        { id: 'admin', text: 'Administration' },\n        { id: 'debug', text: 'Debug Tools' }\n      ];\n      breadcrumbsComponent.setBreadcrumbs(items);\n      this.logToConsole('🏗️ HeaderComponent - Basic trail set');\n    } else {\n      this.logToConsole('❌ HeaderComponent - BreadcrumbsComponent not available');\n    }\n  }\n  \n  /**\n   * Test complex breadcrumb trail via HeaderComponent\n   */\n  private testHeaderBreadcrumbComplex(): void {\n    const breadcrumbsComponent = this.getBreadcrumbsComponent();\n    if (breadcrumbsComponent) {\n      const items: BreadcrumbItem[] = [\n        { id: 'root', text: 'System', href: '/system', caption: 'System root' },\n        { id: 'workspace', text: 'Workspace', href: '/workspace', caption: 'User workspace' },\n        { id: 'projects', text: 'Projects', href: '/projects', caption: 'All projects' },\n        { id: 'current-project', text: 'Opinion Frontend', caption: 'Current project' },\n        { id: 'tools', text: 'Development Tools', caption: 'Development utilities' },\n        { id: 'debug-console', text: 'Debug Console', caption: 'Debug and testing interface' }\n      ];\n      breadcrumbsComponent.setBreadcrumbs(items);\n      this.logToConsole('🌐 HeaderComponent - Complex trail set');\n    } else {\n      this.logToConsole('❌ HeaderComponent - BreadcrumbsComponent not available');\n    }\n  }\n  \n  /**\n   * Test interactive breadcrumbs with actions via HeaderComponent\n   */\n  private testHeaderBreadcrumbInteractive(): void {\n    const breadcrumbsComponent = this.getBreadcrumbsComponent();\n    if (breadcrumbsComponent) {\n      const items: BreadcrumbItem[] = [\n        {\n          id: 'dashboard',\n          text: 'Dashboard',\n          clickHandler: (item) => {\n            this.logToConsole(`🏗️ HeaderComponent - Dashboard clicked: ${item.text}`);\n            alert(`HeaderComponent Direct Access: ${item.text} clicked!`);\n          },\n          caption: 'Click to test dashboard action'\n        },\n        {\n          id: 'analytics',\n          text: 'Analytics',\n          clickHandler: (item) => {\n            this.logToConsole(`📊 HeaderComponent - Analytics clicked: ${item.text}`);\n            const confirmed = confirm('HeaderComponent Test: Open Analytics in new tab?');\n            if (confirmed) {\n              this.logToConsole('📊 Analytics - User confirmed action');\n            }\n          },\n          caption: 'Click to test analytics action'\n        },\n        {\n          id: 'reports',\n          text: 'Reports',\n          href: '/reports',\n          caption: 'Link to reports page'\n        },\n        {\n          id: 'current',\n          text: 'Debug Interface',\n          caption: 'Current page (display only)'\n        }\n      ];\n      breadcrumbsComponent.setBreadcrumbs(items);\n      this.logToConsole('⚡ HeaderComponent - Interactive breadcrumbs set');\n    } else {\n      this.logToConsole('❌ HeaderComponent - BreadcrumbsComponent not available');\n    }\n  }\n  \n  /**\n   * Show HeaderComponent BreadcrumbsComponent status\n   */\n  private showHeaderBreadcrumbComponentStatus(): void {\n    const breadcrumbsComponent = this.getBreadcrumbsComponent();\n    if (breadcrumbsComponent) {\n      const status = breadcrumbsComponent.getStatus();\n      this.logToConsole('🔍 HeaderComponent - BreadcrumbsComponent Status:');\n      this.logToConsole(`  Component Type: ${status.componentType}`);\n      this.logToConsole(`  ID: ${status.id}`);\n      this.logToConsole(`  Initialized: ${status.initialized}`);\n      this.logToConsole(`  Init Time: ${status.initTime ? new Date(status.initTime).toLocaleTimeString() : 'N/A'}`);\n      this.logToConsole(`  Uptime: ${status.uptime ? Math.round(status.uptime / 1000) + 's' : 'N/A'}`);\n      \n      if (status.domElement) {\n        this.logToConsole(`  DOM Element: ${status.domElement.tagName}#${status.domElement.id || 'no-id'}.${status.domElement.className || 'no-class'}`);\n        this.logToConsole(`  Child Elements: ${status.domElement.childCount}`);\n        this.logToConsole(`  Has Content: ${status.domElement.hasContent}`);\n      }\n      \n      if (status.eventListeners) {\n        this.logToConsole(`  Event Listeners: ${(status.eventListeners as any)?.count || 0} (${(status.eventListeners as any)?.types?.join?.(', ') || 'none'})`);\n      }\n      if (status.configuration) {\n        this.logToConsole(`  Has LayoutContext: ${(status.configuration as any)?.hasLayoutContext}`);\n      }\n      if (status.currentState) {\n        this.logToConsole(`  Current Breadcrumbs: ${(status.currentState as any)?.breadcrumbsCount || 0}`);\n      }\n      \n      if ((status.currentState as any)?.breadcrumbs?.length > 0) {\n        this.logToConsole('  Breadcrumb Details:');\n        ((status.currentState as any)?.breadcrumbs as any)?.forEach?.((breadcrumb: { id: string; text: string; hasHref: boolean; hasClickHandler: boolean }) => {\n          this.logToConsole(`    - ${breadcrumb.id}: \"${breadcrumb.text}\" (href: ${breadcrumb.hasHref}, action: ${breadcrumb.hasClickHandler})`);\n        });\n      }\n    } else {\n      this.logToConsole('❌ HeaderComponent - BreadcrumbsComponent not available for status');\n    }\n  }\n  \n  /**\n   * Add breadcrumb directly via HeaderComponent\n   */\n  private testHeaderBreadcrumbDirectAdd(): void {\n    const breadcrumbsComponent = this.getBreadcrumbsComponent();\n    if (breadcrumbsComponent) {\n      const timestamp = Date.now();\n      const newItem: BreadcrumbItem = {\n        id: `header-direct-${timestamp}`,\n        text: `Direct Item ${timestamp % 1000}`,\n        caption: 'Added via HeaderComponent direct access',\n        clickHandler: (item) => {\n          this.logToConsole(`🏗️ HeaderComponent Direct - Item clicked: ${item.text}`);\n        }\n      };\n      breadcrumbsComponent.addBreadcrumb(newItem);\n      this.logToConsole(`🏗️ HeaderComponent (Direct) - Added breadcrumb: ${newItem.text}`);\n    } else {\n      this.logToConsole('❌ HeaderComponent - BreadcrumbsComponent not available for direct add');\n    }\n  }\n  \n  /**\n   * Remove last breadcrumb directly via HeaderComponent\n   */\n  private testHeaderBreadcrumbDirectRemove(): void {\n    const breadcrumbsComponent = this.getBreadcrumbsComponent();\n    if (breadcrumbsComponent) {\n      const currentItems = breadcrumbsComponent.getBreadcrumbs();\n      if (currentItems.length > 0) {\n        const lastItem = currentItems[currentItems.length - 1];\n        breadcrumbsComponent.removeBreadcrumb(lastItem.id);\n        this.logToConsole(`🏗️ HeaderComponent (Direct) - Removed breadcrumb: ${lastItem.text}`);\n      } else {\n        this.logToConsole('🏗️ HeaderComponent (Direct) - No breadcrumbs to remove');\n      }\n    } else {\n      this.logToConsole('❌ HeaderComponent - BreadcrumbsComponent not available for direct remove');\n    }\n  }\n  \n  /**\n   * Update first breadcrumb directly via HeaderComponent\n   */\n  private testHeaderBreadcrumbDirectUpdate(): void {\n    const breadcrumbsComponent = this.getBreadcrumbsComponent();\n    if (breadcrumbsComponent) {\n      const currentItems = breadcrumbsComponent.getBreadcrumbs();\n      if (currentItems.length > 0) {\n        const firstItem = currentItems[0];\n        const timestamp = Date.now();\n        breadcrumbsComponent.updateBreadcrumb(firstItem.id, {\n          text: `Updated ${timestamp % 1000}`,\n          caption: 'Updated via HeaderComponent direct access'\n        });\n        this.logToConsole(`🏗️ HeaderComponent (Direct) - Updated breadcrumb: ${firstItem.id}`);\n      } else {\n        this.logToConsole('🏗️ HeaderComponent (Direct) - No breadcrumbs to update');\n      }\n    } else {\n      this.logToConsole('❌ HeaderComponent - BreadcrumbsComponent not available for direct update');\n    }\n  }\n  \n  /**\n   * Clear all breadcrumbs directly via HeaderComponent\n   */\n  private testHeaderBreadcrumbDirectClear(): void {\n    const breadcrumbsComponent = this.getBreadcrumbsComponent();\n    if (breadcrumbsComponent) {\n      breadcrumbsComponent.clearBreadcrumbs();\n      this.logToConsole('🏗️ HeaderComponent (Direct) - All breadcrumbs cleared');\n    } else {\n      this.logToConsole('❌ HeaderComponent - BreadcrumbsComponent not available for direct clear');\n    }\n  }\n}\n\nexport default DebugPage;\n","import { PageComponent } from '../../components/PageComponent';\nimport MainContentImpl from '../../components/MainContentImpl';\nimport { PageContext } from '../../interfaces/PageContext';\nimport { LoggerFactory } from '../../logging/LoggerFactory';\nimport type { Logger } from '../../logging/Logger';\n\nexport default class AccountRootPage extends PageComponent {\n  protected readonly logger: Logger = LoggerFactory.getInstance().getLogger(AccountRootPage);\n  \n  constructor(mainContent: MainContentImpl, pageContext: PageContext) {\n    super(mainContent, pageContext, {\n      pageTitle: 'Account',\n      pageId: 'account-root'\n    });\n  }\n\n  protected async onInit(): Promise<void> {\n    try {\n      // Wait for DOM to be ready if needed\n      if (document.readyState === 'loading') {\n        await new Promise((resolve) => {\n          document.addEventListener('DOMContentLoaded', resolve);\n        });\n      }\n\n      // Load main content\n      await this.loadMainContent();\n\n      // Set browser tab title\n      document.title = 'Account Overview - Opinion';\n\n      // Breadcrumbs are now managed automatically by RouterService\n    } catch (error) {\n      this.logger.error('❌ AccountRootPage - Initialization failed:', error);\n      throw error;\n    }\n  }\n\n  protected onDestroy(): void {\n    // Clean up any resources, event listeners, etc.\n  }\n\n  protected setupEventListeners(): void {\n    // Set up event delegation for actions\n    this.setupEventDelegation();\n  }\n\n  private async loadMainContent(): Promise<void> {\n    const mainElement = this.mainContent.getElement();\n    if (!mainElement) return;\n\n    mainElement.innerHTML = `\n      <div class=\"account-root-page\">\n        <div class=\"page-header\">\n          <h1>Account Overview</h1>\n        </div>\n        <div class=\"account-content\">\n          <div class=\"account-overview\">\n            <div class=\"profile-section\">\n              <h2>Profile</h2>\n              <div class=\"profile-info loading-placeholder\">\n                Loading profile information...\n              </div>\n              <button class=\"edit-profile-btn\" data-action=\"editProfile\">\n                Edit Profile\n              </button>\n            </div>\n\n            <div class=\"usage-section\">\n              <h2>Account Usage</h2>\n              <div class=\"usage-stats loading-placeholder\">\n                Loading usage statistics...\n              </div>\n            </div>\n\n            <div class=\"billing-section\">\n              <h2>Billing</h2>\n              <div class=\"billing-info loading-placeholder\">\n                Loading billing information...\n              </div>\n              <button class=\"manage-billing-btn\" data-action=\"manageBilling\">\n                Manage Billing\n              </button>\n            </div>\n\n            <div class=\"team-section\">\n              <h2>Team Members</h2>\n              <div class=\"team-list loading-placeholder\">\n                Loading team members...\n              </div>\n              <button class=\"manage-team-btn\" data-action=\"manageTeam\">\n                Manage Team\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Initialize components and load data\n    await this.loadAccountData();\n  }\n\n  private async loadAccountData(): Promise<void> {\n    try {\n      // Simulate API calls\n      await Promise.all([\n        this.loadProfileInfo(),\n        this.loadUsageStats(),\n        this.loadBillingInfo(),\n        this.loadTeamMembers()\n      ]);\n    } catch (error) {\n      this.logger.error('Failed to load account data:', error);\n      // TODO: Show error message to user\n    }\n  }\n\n  private async loadProfileInfo(): Promise<void> {\n    try {\n      // TODO: Implement profile info loading logic\n      await new Promise(resolve => setTimeout(resolve, 800));\n      const profileInfo = this.mainContent.getElement()?.querySelector('.profile-info');\n      if (profileInfo) {\n        profileInfo.innerHTML = `\n          <div class=\"info-row\">\n            <span class=\"label\">Name:</span>\n            <span class=\"value\">John Doe</span>\n          </div>\n          <div class=\"info-row\">\n            <span class=\"label\">Email:</span>\n            <span class=\"value\">john@example.com</span>\n          </div>\n          <div class=\"info-row\">\n            <span class=\"label\">Role:</span>\n            <span class=\"value\">Administrator</span>\n          </div>\n        `;\n      }\n    } catch (error) {\n      console.error('Failed to load profile info:', error);\n    }\n  }\n\n  private async loadUsageStats(): Promise<void> {\n    try {\n      // TODO: Implement usage stats loading logic\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const usageStats = this.mainContent.getElement()?.querySelector('.usage-stats');\n      if (usageStats) {\n        usageStats.innerHTML = `\n          <div class=\"stat-row\">\n            <span class=\"label\">Active Surveys:</span>\n            <span class=\"value\">5</span>\n          </div>\n          <div class=\"stat-row\">\n            <span class=\"label\">Total Responses:</span>\n            <span class=\"value\">1,234</span>\n          </div>\n          <div class=\"stat-row\">\n            <span class=\"label\">Storage Used:</span>\n            <span class=\"value\">45%</span>\n          </div>\n        `;\n      }\n    } catch (error) {\n      console.error('Failed to load usage stats:', error);\n    }\n  }\n\n  private async loadBillingInfo(): Promise<void> {\n    try {\n      // TODO: Implement billing info loading logic\n      await new Promise(resolve => setTimeout(resolve, 1200));\n      const billingInfo = this.mainContent.getElement()?.querySelector('.billing-info');\n      if (billingInfo) {\n        billingInfo.innerHTML = `\n          <div class=\"info-row\">\n            <span class=\"label\">Plan:</span>\n            <span class=\"value\">Professional</span>\n          </div>\n          <div class=\"info-row\">\n            <span class=\"label\">Next Billing:</span>\n            <span class=\"value\">Jan 1, 2024</span>\n          </div>\n          <div class=\"info-row\">\n            <span class=\"label\">Payment Method:</span>\n            <span class=\"value\">•••• 4242</span>\n          </div>\n        `;\n      }\n    } catch (error) {\n      console.error('Failed to load billing info:', error);\n    }\n  }\n\n  private async loadTeamMembers(): Promise<void> {\n    try {\n      // TODO: Implement team members loading logic\n      await new Promise(resolve => setTimeout(resolve, 900));\n      const teamList = this.mainContent.getElement()?.querySelector('.team-list');\n      if (teamList) {\n        teamList.innerHTML = `\n          <div class=\"team-member\">\n            <span class=\"name\">John Doe</span>\n            <span class=\"role\">Owner</span>\n          </div>\n          <div class=\"team-member\">\n            <span class=\"name\">Jane Smith</span>\n            <span class=\"role\">Admin</span>\n          </div>\n          <div class=\"team-member\">\n            <span class=\"name\">Bob Johnson</span>\n            <span class=\"role\">Member</span>\n          </div>\n        `;\n      }\n    } catch (error) {\n      console.error('Failed to load team members:', error);\n    }\n  }\n\n\n  // Action Handlers\n  private handleEditProfile(): void {\n    // TODO: Implement profile editing logic\n    console.log('Edit profile clicked');\n    window.location.href = '/account/profile';\n  }\n\n  private handleManageBilling(): void {\n    // TODO: Implement billing management logic\n    console.log('Manage billing clicked');\n    window.location.href = '/account/billing';\n  }\n\n  private handleManageTeam(): void {\n    // TODO: Implement team management logic\n    console.log('Manage team clicked');\n    window.location.href = '/account/team';\n  }\n}\n","import { PageComponent } from '../../components/PageComponent';\nimport MainContentImpl from '../../components/MainContentImpl';\nimport { PageContext } from '../../interfaces/PageContext';\n\nexport default class AccountSettingsPage extends PageComponent {\n  constructor(mainContent: MainContentImpl, pageContext: PageContext) {\n    super(mainContent, pageContext, {\n      pageTitle: 'Account Settings',\n      pageId: 'account-settings'\n    });\n  }\n\n  protected async onInit(): Promise<void> {\n    try {\n      // Wait for DOM to be ready if needed\n      if (document.readyState === 'loading') {\n        await new Promise((resolve) => {\n          document.addEventListener('DOMContentLoaded', resolve);\n        });\n      }\n\n      // Load main content\n      await this.loadMainContent();\n\n      // Set browser tab title\n      document.title = 'Account Settings - Opinion';\n\n      // Breadcrumbs are now managed automatically by RouterService\n    } catch (error) {\n      console.error('❌ AccountSettingsPage - Initialization failed:', error);\n      throw error;\n    }\n  }\n\n  protected onDestroy(): void {\n    // Clean up any resources, event listeners, etc.\n  }\n\n  protected setupEventListeners(): void {\n    // Set up event delegation for actions\n    this.setupEventDelegation();\n  }\n\n  private async loadMainContent(): Promise<void> {\n    const mainElement = this.mainContent.getElement();\n    if (!mainElement) return;\n\n    mainElement.innerHTML = `\n      <div class=\"account-settings-page\">\n        <div class=\"page-header\">\n          <h1>Account Settings</h1>\n          <button class=\"save-settings-btn\" data-action=\"saveSettings\">\n            Save Changes\n          </button>\n        </div>\n        <div class=\"settings-content\">\n          <form class=\"settings-form\" data-action=\"submitSettings\">\n            <div class=\"settings-section\">\n              <h2>Profile Information</h2>\n              <div class=\"form-group\">\n                <label for=\"name\">Name</label>\n                <input type=\"text\" id=\"name\" name=\"name\" />\n              </div>\n              <div class=\"form-group\">\n                <label for=\"email\">Email</label>\n                <input type=\"email\" id=\"email\" name=\"email\" />\n              </div>\n            </div>\n\n            <div class=\"settings-section\">\n              <h2>Password</h2>\n              <div class=\"form-group\">\n                <label for=\"current-password\">Current Password</label>\n                <input type=\"password\" id=\"current-password\" name=\"currentPassword\" />\n              </div>\n              <div class=\"form-group\">\n                <label for=\"new-password\">New Password</label>\n                <input type=\"password\" id=\"new-password\" name=\"newPassword\" />\n              </div>\n              <div class=\"form-group\">\n                <label for=\"confirm-password\">Confirm New Password</label>\n                <input type=\"password\" id=\"confirm-password\" name=\"confirmPassword\" />\n              </div>\n            </div>\n\n            <div class=\"settings-section\">\n              <h2>Preferences</h2>\n              <div class=\"form-group\">\n                <label>\n                  <input type=\"checkbox\" name=\"emailNotifications\" />\n                  Receive email notifications\n                </label>\n              </div>\n              <div class=\"form-group\">\n                <label>Time Zone</label>\n                <select name=\"timezone\" id=\"timezone\">\n                  <option value=\"UTC\">UTC</option>\n                  <!-- Add more timezone options -->\n                </select>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    `;\n\n    // Initialize components and load data\n    await this.loadAccountSettings();\n  }\n\n  private async loadAccountSettings(): Promise<void> {\n    // TODO: Implement settings loading logic\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock data\n      const settings = {\n        name: 'John Doe',\n        email: 'john@example.com',\n        emailNotifications: true,\n        timezone: 'UTC'\n      };\n\n      // Populate form\n      const form = this.mainContent.getElement()?.querySelector('.settings-form') as HTMLFormElement;\n      if (form) {\n        const nameInput = form.elements.namedItem('name') as HTMLInputElement | null;\n        const emailInput = form.elements.namedItem('email') as HTMLInputElement | null;\n        const emailNotifications = form.elements.namedItem('emailNotifications') as HTMLInputElement | null;\n        const timezoneSelect = form.elements.namedItem('timezone') as HTMLSelectElement | null;\n        \n        if (nameInput) nameInput.value = settings.name;\n        if (emailInput) emailInput.value = settings.email;\n        if (emailNotifications) emailNotifications.checked = settings.emailNotifications;\n        if (timezoneSelect) timezoneSelect.value = settings.timezone;\n      }\n    } catch (error) {\n      console.error('Failed to load account settings:', error);\n      // TODO: Show error message to user\n    }\n  }\n\n\n  // Action Handlers\n  private async handleSubmitSettings(form: HTMLFormElement, event: Event): Promise<void> {\n    event.preventDefault();\n\n    try {\n      const formData = new FormData(form);\n      const settings = {\n        name: formData.get('name'),\n        email: formData.get('email'),\n        emailNotifications: formData.get('emailNotifications') === 'on',\n        timezone: formData.get('timezone'),\n        // Only include password fields if new password is provided\n        ...(formData.get('newPassword') ? {\n          currentPassword: formData.get('currentPassword'),\n          newPassword: formData.get('newPassword'),\n          confirmPassword: formData.get('confirmPassword')\n        } : {})\n      };\n\n      // TODO: Implement settings update logic\n      console.log('Updating settings:', settings);\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Show success message\n      // TODO: Implement proper notification system\n      alert('Settings updated successfully');\n    } catch (error) {\n      console.error('Failed to update settings:', error);\n      // TODO: Show error message to user\n    }\n  }\n}\n","import { PageComponent } from '../../components/PageComponent';\nimport MainContentImpl from '../../components/MainContentImpl';\nimport type { PageContext } from '../../interfaces/PageContext';\n\nexport default class LoginPage extends PageComponent {\n  constructor(mainContent: MainContentImpl, pageContext: PageContext) {\n    super(mainContent, pageContext, {\n      pageTitle: 'Login',\n      pageId: 'login'\n    });\n  }\n\n  protected async onInit(): Promise<void> {\n    try {\n      // Wait for DOM to be ready if needed\n      if (document.readyState === 'loading') {\n        await new Promise((resolve) => {\n          document.addEventListener('DOMContentLoaded', resolve);\n        });\n      }\n\n      // Load main content\n      await this.loadMainContent();\n\n      // Set browser tab title\n      document.title = 'Login - Opinion';\n    } catch (error) {\n      this.logger.error('❌ LoginPage - Initialization failed:', error);\n      throw error;\n    }\n  }\n\n  protected onDestroy(): void {\n    // Clean up any resources, event listeners, etc.\n  }\n\n  protected setupEventListeners(): void {\n    // Set up event delegation for actions\n    this.setupEventDelegation();\n  }\n\n  private async loadMainContent(): Promise<void> {\n    const mainElement = this.mainContent.getElement();\n    if (!mainElement) return;\n\n    mainElement.innerHTML = `\n      <div class=\"login-page\">\n        <div class=\"login-container\">\n          <h1>Login</h1>\n          <form class=\"login-form\" data-action=\"submitLogin\">\n            <div class=\"form-group\">\n              <label for=\"email\">Email</label>\n              <input type=\"email\" id=\"email\" name=\"email\" required />\n            </div>\n            <div class=\"form-group\">\n              <label for=\"password\">Password</label>\n              <input type=\"password\" id=\"password\" name=\"password\" required />\n            </div>\n            <div class=\"form-actions\">\n              <button type=\"submit\" class=\"login-btn\">Login</button>\n              <a href=\"/forgot-password\" class=\"forgot-password-link\">Forgot Password?</a>\n            </div>\n          </form>\n          <div class=\"signup-prompt\">\n            <p>Don't have an account? <a href=\"/signup\">Sign Up</a></p>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  // Action Handlers\n  private async handleSubmitLogin(form: HTMLFormElement, event: Event): Promise<void> {\n    event.preventDefault();\n\n    // Get form data\n    const formData = new FormData(form);\n    const email = formData.get('email') as string;\n    // const password = formData.get('password') as string; // TODO: Use when implementing actual login\n\n    try {\n      // TODO: Implement login logic\n      this.logger.info('Login attempted with:', email);\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // On success, redirect to dashboard\n      window.location.href = '/dashboard';\n    } catch (error) {\n      this.logger.error('Login failed:', error);\n      // TODO: Show error message to user\n    }\n  }\n}\n","import { Service } from '../interfaces/Service';\nimport { LayoutContext } from '../contexts/LayoutContext';\nimport { RouteDefinition, RouteResult, RouteContext } from './types';\nimport { LoggerFactory } from '../logging/LoggerFactory';\nimport { Logger } from '../logging/Logger';\n\nexport abstract class EntityRouter implements Service {\n  protected routes: RouteDefinition[] = [];\n  protected serviceId: string;\n  protected logger: Logger;\n\n  getServiceId(): string {\n    return this.serviceId;\n  }\n\n  constructor(\n    protected layoutContext: LayoutContext,\n    protected entityName: string\n  ) {\n    this.serviceId = `${entityName}.router`;\n    this.logger = LoggerFactory.getInstance().getLogger(`EntityRouter(${entityName})`);\n  }\n\n  protected _isInitialized = false;\n  \n  async init(): Promise<void> {\n    this.registerRoutes();\n    await this.mount();\n    this._isInitialized = true;\n  }\n\n  async destroy(): Promise<void> {\n    // EntityRouter cleanup - no external dependencies to unmount\n    this._isInitialized = false;\n  }\n\n  protected abstract registerRoutes(): void;\n\n  protected async mount() {\n    // EntityRouter is self-contained and handles its own routes\n    // Routes are registered internally and handled via the handle() method\n    this.logger.info(`EntityRouter '${this.entityName}' mounted with ${this.routes.length} routes`);\n  }\n\n\n  /**\n   * Handle route delegation - finds matching route and executes its action\n   */\n  public async handle(context: RouteContext): Promise<RouteResult> {\n    if (!this._isInitialized) {\n      throw new Error(`${this.entityName} router not initialized`);\n    }\n\n    const path = context.getPath();\n    const matchingRoute = this.findMatchingRoute(path, this.routes);\n    \n    if (!matchingRoute) {\n      throw new Error(`No route found for path: ${path} in ${this.entityName} router`);\n    }\n\n    return await matchingRoute.action(context);\n  }\n\n  /**\n   * Find a route that matches the given path\n   */\n  private findMatchingRoute(path: string, routes: RouteDefinition[]): RouteDefinition | null {\n    for (const route of routes) {\n      if (this.matchesPath(path, route.path)) {\n        return route;\n      }\n      \n      // Check children routes recursively\n      if (route.children && route.children.length > 0) {\n        const childMatch = this.findMatchingRoute(path, route.children);\n        if (childMatch) {\n          return childMatch;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Check if a path matches a route pattern\n   */\n  private matchesPath(path: string, routePattern: string): boolean {\n    // Convert route pattern to regex (simplified implementation)\n    const pattern = routePattern\n      .replace(/:[^/]+/g, '[^/]+') // Replace :param with regex\n      .replace(/\\*/g, '.*');       // Replace * with catch-all\n    \n    const regex = new RegExp(`^${pattern}$`);\n    return regex.test(path);\n  }\n\n}","import { PageComponent } from '../../components/PageComponent';\nimport MainContentImpl from '../../components/MainContentImpl';\nimport type { PageContext } from '../../interfaces/PageContext';\n\nexport default class SurveyListPage extends PageComponent {\n  constructor(mainContent: MainContentImpl, pageContext: PageContext) {\n    super(mainContent, pageContext, {\n      pageTitle: 'Surveys',\n      pageId: 'surveys'\n    });\n  }\n\n  protected async onInit(): Promise<void> {\n    try {\n      // Wait for DOM to be ready if needed\n      if (document.readyState === 'loading') {\n        await new Promise((resolve) => {\n          document.addEventListener('DOMContentLoaded', resolve);\n        });\n      }\n\n      // Load main content\n      await this.loadMainContent();\n\n      // Set browser tab title\n      document.title = 'Surveys - Opinion';\n\n      // Note: Breadcrumbs are now handled centrally by RouterService\n    } catch (error) {\n      this.logger.error('Initialization failed', error);\n      throw error;\n    }\n  }\n\n  protected onDestroy(): void {\n    // Clean up any resources, event listeners, etc.\n  }\n\n  protected setupEventListeners(): void {\n    // Set up event delegation for actions\n    this.setupEventDelegation();\n  }\n\n  private async loadMainContent(): Promise<void> {\n    const mainElement = this.mainContent.getElement();\n    if (!mainElement) return;\n\n    mainElement.innerHTML = `\n      <div class=\"survey-list-page\">\n        <div class=\"content-center\" style=\"\n          height: 80vh;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          text-align: center;\n          padding: 2rem;\n        \">\n          <h1 style=\"\n            font-size: 2.5rem;\n            margin-bottom: 1rem;\n            color: #2d3748;\n          \">Survey List Page</h1>\n          <p style=\"\n            font-size: 1.25rem;\n            color: #4a5568;\n            max-width: 600px;\n            line-height: 1.6;\n          \">This page will display the list of all surveys. The implementation is coming soon.</p>\n          <div style=\"margin-top: 2rem;\">\n            <button class=\"create-survey-btn\" data-action=\"createSurvey\" style=\"\n              padding: 0.75rem 1.5rem;\n              background-color: #4299e1;\n              color: white;\n              border: none;\n              border-radius: 0.375rem;\n              font-size: 1rem;\n              cursor: pointer;\n              transition: background-color 0.2s;\n            \">\n              Create New Survey\n            </button>\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Initialize components and load data\n    await this.loadSurveyList();\n  }\n\n  private async loadSurveyList(): Promise<void> {\n    // TODO: Implement survey list loading logic\n    const listContainer = this.mainContent.getElement()?.querySelector('.survey-list');\n    if (!listContainer) return;\n\n    // For now, show a placeholder message\n    listContainer.innerHTML = '<p>Survey list implementation coming soon</p>';\n  }\n\n\n  // Action Handlers\n  private handleCreateSurvey(): void {\n    // TODO: Implement survey creation logic\n    this.logger.debug('Create survey clicked');\n  }\n}\n","import { PageComponent } from '../../components/PageComponent';\nimport MainContentImpl from '../../components/MainContentImpl';\nimport type { PageContext } from '../../interfaces/PageContext';\nimport { LoggerFactory } from '../../logging/LoggerFactory';\nimport type { Logger } from '../../logging/Logger';\n\nexport default class SurveyDetailPage extends PageComponent {\n  protected readonly logger: Logger = LoggerFactory.getInstance().getLogger(SurveyDetailPage);\n  private surveyId: string;\n\n  constructor(mainContent: MainContentImpl, pageContext: PageContext) {\n    super(mainContent, pageContext, {\n      pageTitle: 'Survey Details',\n      pageId: 'surveys'\n    });\n    \n    // Get surveyId from route parameters\n    const routeContext = pageContext.getRouteContext();\n    this.surveyId = routeContext.getParam('surveyId') || 'unknown';\n  }\n\n  protected async onInit(): Promise<void> {\n    try {\n      // Wait for DOM to be ready if needed\n      if (document.readyState === 'loading') {\n        await new Promise((resolve) => {\n          document.addEventListener('DOMContentLoaded', resolve);\n        });\n      }\n\n      // Load main content\n      await this.loadMainContent();\n\n      // Set browser tab title\n      document.title = 'Survey Details - Opinion';\n\n      // Breadcrumbs are now managed automatically by RouterService\n    } catch (error) {\n      this.logger.error('❌ SurveyDetailPage - Initialization failed:', error);\n      throw error;\n    }\n  }\n\n  protected onDestroy(): void {\n    // Clean up any resources, event listeners, etc.\n  }\n\n  protected setupEventListeners(): void {\n    // Set up event delegation for actions\n    this.setupEventDelegation();\n  }\n\n  private async loadMainContent(): Promise<void> {\n    const mainElement = this.mainContent.getElement();\n    if (!mainElement) return;\n\n    mainElement.innerHTML = `\n      <div class=\"survey-detail-page\">\n        <div class=\"page-header\">\n          <h1>Survey Details</h1>\n          <div class=\"header-actions\">\n            <button class=\"edit-btn\" data-action=\"editSurvey\">\n              Edit Survey\n            </button>\n            <button class=\"preview-btn\" data-action=\"previewSurvey\">\n              Preview\n            </button>\n            <button class=\"collectors-btn\" data-action=\"manageCollectors\">\n              Collectors\n            </button>\n            <button class=\"delete-btn\" data-action=\"deleteSurvey\">\n              Delete Survey\n            </button>\n          </div>\n        </div>\n        <div class=\"survey-content\">\n          <!-- Survey details will be loaded here -->\n          <div class=\"loading-placeholder\">Loading survey details...</div>\n        </div>\n      </div>\n    `;\n\n    // Initialize components and load data\n    await this.loadSurveyDetails();\n  }\n\n  private async loadSurveyDetails(): Promise<void> {\n    // TODO: Implement survey details loading logic\n    const contentContainer = this.mainContent.getElement()?.querySelector('.survey-content');\n    if (!contentContainer) return;\n\n    // For now, show a placeholder message\n    contentContainer.innerHTML = `<p>Survey ${this.surveyId} details implementation coming soon</p>`;\n  }\n\n\n  // Action Handlers\n  private handleEditSurvey(): void {\n    // TODO: Implement survey editing logic\n    this.logger.debug('Edit survey {} clicked', this.surveyId);\n  }\n\n  private handlePreviewSurvey(): void {\n    // TODO: Implement survey preview logic\n    this.logger.debug('Preview survey {} clicked', this.surveyId);\n    window.open(`/surveys/${this.surveyId}/preview`, '_blank');\n  }\n\n  private handleManageCollectors(): void {\n    // TODO: Implement collectors management logic\n    this.logger.debug('Manage collectors for survey {} clicked', this.surveyId);\n    window.location.href = `/surveys/${this.surveyId}/collectors`;\n  }\n\n  private handleDeleteSurvey(): void {\n    // TODO: Implement survey deletion logic\n    this.logger.debug('Delete survey {} clicked', this.surveyId);\n  }\n}\n","import { EntityRouter } from './EntityRouter';\nimport { PageProvider } from './types';\nimport { LayoutContext } from '../contexts/LayoutContext';\nimport SurveyListPage from '../pages/surveys/SurveyListPage';\nimport SurveyDetailPage from '../pages/surveys/SurveyDetailPage';\n\nexport class SurveysRouter extends EntityRouter {\n  public static readonly SERVICE_ID = 'surveys.router';\n\n  constructor(layoutContext: LayoutContext, entityName: string) {\n    super(layoutContext, entityName);\n    this.serviceId = SurveysRouter.SERVICE_ID;\n  }\n\n  protected registerRoutes(): void {\n    this.logger.info('🔍 SURVEYS ROUTER - Starting route registration...');\n    \n    this.routes = [\n      {\n        path: '/',\n        action: async (context) => {\n          const pageProvider: PageProvider = (mainContent, pageContext) => \n            new SurveyListPage(mainContent, pageContext);\n          \n          return {\n            pageProvider,\n            routeInfo: {\n              path: context.getPath(),\n              params: context.getParams()\n            }\n          };\n        }\n      },\n      {\n        path: '/:surveyId',\n        action: async (context) => {\n          const pageProvider: PageProvider = (mainContent, pageContext) => \n            new SurveyDetailPage(mainContent, pageContext);\n          \n          return {\n            pageProvider,\n            routeInfo: {\n              path: context.getPath(),\n              params: context.getParams()\n            }\n          };\n        }\n      }\n    ];\n  }\n}","/**\n * RouteContextWrapper - Wraps an existing RouteContext to modify path and basePath\n * while delegating all other operations to the original context\n */\n\nimport { RouteContext, ErrorParams } from './RouteContext';\nimport { LayoutContext } from '../contexts/LayoutContext';\n\nexport class RouteContextWrapper implements RouteContext {\n  constructor(\n    private originalContext: RouteContext,\n    private wrappedPath: string,\n    private wrappedBasePath: string\n  ) {}\n\n  /**\n   * Get the wrapped route path\n   */\n  getPath(): string {\n    return this.wrappedPath;\n  }\n\n  /**\n   * Get the wrapped base path\n   */\n  getBasePath(): string {\n    return this.wrappedBasePath;\n  }\n\n  /**\n   * Delegate to original context - route parameters are the same\n   */\n  getParams(): Record<string, string> {\n    return this.originalContext.getParams();\n  }\n\n  /**\n   * Delegate to original context\n   */\n  getParam(key: string): string | undefined {\n    return this.originalContext.getParam(key);\n  }\n\n  /**\n   * Delegate to original context\n   */\n  hasParam(key: string): boolean {\n    return this.originalContext.hasParam(key);\n  }\n\n  /**\n   * Delegate to original context\n   */\n  getAccountId(): string | undefined {\n    return this.originalContext.getAccountId();\n  }\n\n  /**\n   * Delegate to original context\n   */\n  getLayoutContext(): LayoutContext {\n    return this.originalContext.getLayoutContext();\n  }\n\n  /**\n   * Delegate to original context - error state is shared\n   */\n  fail(error: ErrorParams): void {\n    return this.originalContext.fail(error);\n  }\n\n  /**\n   * Delegate to original context\n   */\n  failed(): boolean {\n    return this.originalContext.failed();\n  }\n\n  /**\n   * Delegate to original context\n   */\n  failure(): ErrorParams | null {\n    return this.originalContext.failure();\n  }\n}","import { RouteDefinition, PageProvider } from './types';\nimport DashboardPage from \"../pages/DashboardPage\";\nimport DebugPage from \"../pages/DebugPage\";\nimport AccountRootPage from \"../pages/account/AccountRootPage\";\nimport AccountSettingsPage from \"../pages/account/AccountSettingsPage\";\nimport LoginPage from \"../pages/auth/LoginPage\";\nimport { SurveysRouter } from \"./SurveysRouter\";\nimport { LoggerFactory } from '../logging/LoggerFactory';\n\n// Import RouteContextWrapper at the top level\nimport { RouteContextWrapper } from './RouteContextWrapper';\n\n// Create logger for route handling\nconst logger = LoggerFactory.getInstance().getLogger('Routes');\n\n// Public routes (no authentication required)\nexport const PUBLIC_ROUTES: RouteDefinition[] = [\n  {\n    path: \"/login\",\n    action: async (context) => {\n      const pageProvider: PageProvider = (mainContent, pageContext) =>\n        new LoginPage(mainContent, pageContext);\n\n      return {\n        pageProvider,\n        routeInfo: {\n          path: context.getPath(),\n          params: context.getParams(),\n        },\n      };\n    },\n  },\n];\n\n// Feature routes (available after authentication)\nexport const FEATURE_ROUTES: RouteDefinition[] = [\n  {\n    path: \"/dashboard\",\n    action: async (context) => {\n      const pageProvider: PageProvider = (mainContent, pageContext) =>\n        new DashboardPage(mainContent, pageContext);\n\n      return {\n        pageProvider,\n        routeInfo: {\n          path: context.getPath(),\n          params: context.getParams(),\n        },\n      };\n    },\n  },\n  {\n    path: \"/debug\",\n    action: async (context) => {\n      const pageProvider: PageProvider = (mainContent, pageContext) =>\n        new DebugPage(mainContent, pageContext);\n\n      return {\n        pageProvider,\n        routeInfo: {\n          path: context.getPath(),\n          params: context.getParams(),\n        },\n      };\n    },\n  },\n  {\n    path: \"/surveys\",\n    children: [], // This makes it catch all routes under /surveys\n    action: async (context) => {\n      try {\n        const serviceRef = context\n          .getLayoutContext()\n          .getServiceReference(SurveysRouter.SERVICE_ID);\n        \n        const surveysRouter = await serviceRef.get();\n        if (!surveysRouter) {\n          throw new Error(\"SurveysRouter service not found\");\n        }\n        \n        const fullPath = context.getPath();\n        const subPath = fullPath.replace(/^\\/surveys/, '') || '/';\n        \n        const wrappedContext = new RouteContextWrapper(\n          context,\n          subPath,       // relative path\n          '/surveys'     // basePath\n        );\n        \n        const result = await (surveysRouter as any).handle(wrappedContext);\n        return result;\n      } catch (error) {\n        logger.error('❌ Surveys routing error:', (error as Error)?.message);\n        \n        // Return fallback error page\n        const ErrorPage = (await import('../pages/ErrorPage')).default;\n        const pageProvider: PageProvider = (mainContent, pageContext) => {\n          const errorPage = new ErrorPage(mainContent, pageContext);\n          errorPage.setParams({\n            code: '500',\n            message: 'Surveys Service Error',\n            details: `Error in surveys routing: ${(error as Error)?.message}`\n          });\n          return errorPage;\n        };\n\n        return {\n          pageProvider,\n          routeInfo: {\n            path: context.getPath(),\n            params: context.getParams(),\n          },\n        };\n      }\n    },\n  },\n];\n\n// Account routes with explicit paths instead of nesting\n// NOTE: More specific routes must come first!\nexport const ACCOUNT_ROUTES: RouteDefinition[] = [\n  {\n    path: \"/account/:accountId/settings\",\n    action: async (context) => {\n      const pageProvider: PageProvider = (mainContent, pageContext) =>\n        new AccountSettingsPage(mainContent, pageContext);\n\n      return {\n        pageProvider,\n        routeInfo: {\n          path: context.getPath(),\n          params: context.getParams(),\n        },\n      };\n    },\n  },\n  {\n    path: \"/account/:accountId\",\n    action: async (context) => {\n      const pageProvider: PageProvider = (mainContent, pageContext) =>\n        new AccountRootPage(mainContent, pageContext);\n\n      return {\n        pageProvider,\n        routeInfo: {\n          path: context.getPath(),\n          params: context.getParams(),\n        },\n      };\n    },\n  },\n];\n\nexport const ALL_ROUTES: RouteDefinition[] = [\n  // Authentication routes first\n  ...PUBLIC_ROUTES,\n\n  ...FEATURE_ROUTES,\n\n  // Account routes with their nested structure\n  ...ACCOUNT_ROUTES,\n\n  // Root route last (catch-all) - Homepage\n  {\n    path: \"/\",\n    action: async (context) => {\n      const pageProvider: PageProvider = (mainContent, pageContext) =>\n        new DashboardPage(mainContent, pageContext);\n\n      return {\n        pageProvider,\n        routeInfo: {\n          path: context.getPath(),\n          params: context.getParams(),\n        },\n      };\n    },\n  },\n];\n","import { RouteResult } from '../types';\nimport { PUBLIC_ROUTES } from '../routes';\n\n/**\n * Authentication middleware for the router\n * Ensures that non-public routes require authentication\n */\nexport async function authMiddleware(\n  context: any,\n  next: () => Promise<RouteResult>\n): Promise<RouteResult> {\n  const { pathname } = context;\n  \n  // Check if this is a public route\n  const isPublicRoute = PUBLIC_ROUTES.some(route => {\n    if (route.path.endsWith('*')) {\n      // Handle wildcard paths (e.g. /assets/*)\n      const basePath = route.path.slice(0, -1);\n      return pathname.startsWith(basePath);\n    }\n    return route.path === pathname;\n  });\n\n  if (isPublicRoute) {\n    return next();\n  }\n\n  // TEMP: allow all routes for now; integrate auth later\n  return next();\n}","import UniversalRouter, { RouteContext as UniversalRouteContext } from 'universal-router';\nimport { LayoutContext } from '../contexts/LayoutContext';\nimport { EventBus } from '../lib/EventBus';\nimport { Service } from '../interfaces/Service';\nimport { RouteDefinition, RouteResult } from './types';\nimport { RouteContextImpl } from './RouteContextImpl';\nimport { PageContextImpl } from '../contexts/PageContextImpl';\nimport { authMiddleware } from './middleware/auth';\nimport { ALL_ROUTES } from './routes';\nimport { getFullPath, getRoutePath, appConfig, isHomepage } from '../config/app';\nimport type { ActivePage } from '../interfaces/ActivePage';\nimport type { PageProvider } from './types';\nimport type { BreadcrumbItem } from '../interfaces/BreadcrumbItem';\nimport { LoggerFactory } from '../logging/LoggerFactory';\nimport { Logger } from '../logging/Logger';\n\n/**\n * Internal router types\n */\ninterface ProcessedRoute {\n  path: string;\n  action: (context: UniversalRouteContext, params: Record<string, string | string[]>) => Promise<RouteResult>;\n  children?: ProcessedRoute[];\n}\ninterface NavigationState {\n  currentPath: string;\n  currentPage: ActivePage | null;\n  isNavigating: boolean;\n}\n\nexport class RouterService implements Service {\n  public static readonly SERVICE_ID = 'router';\n  private router: UniversalRouter<RouteResult> | null = null;\n  private serviceId: string;\n  private eventBus: EventBus;\n  private logger: Logger;\n  private navigationState: NavigationState = {\n    currentPath: '/',\n    currentPage: null,\n    isNavigating: false\n  };\n\n  constructor(private layoutContext: LayoutContext) {\n    this.serviceId = RouterService.SERVICE_ID;\n    this.eventBus = layoutContext.getEventBus();\n    this.logger = LoggerFactory.getInstance().getLogger('RouterService');\n  }\n\n  async init(): Promise<void> {\n    // Initialize router with routes directly\n    this.initializeRouter(ALL_ROUTES);\n\n    // Handle initial route (skip during tests to avoid JSDOM URL issues)\n    if (process.env.NODE_ENV !== 'test') {\n      let currentPath = getRoutePath(window.location.pathname);\n      \n      // Handle SPA routing encoded as query parameter (e.g., ?/surveys) if enabled\n      if (appConfig.enableSpaRouting && window.location.search.startsWith('?/')) {\n        // Extract the route from query parameter and clean up URL\n        const encodedRoute = window.location.search.slice(2); // Remove '?/'\n        const decodedRoute = '/' + encodedRoute.replace(/~and~/g, '&');\n        currentPath = decodedRoute;\n        \n        // Clean up the URL by replacing it with the proper route\n        const fullPath = getFullPath(currentPath);\n        window.history.replaceState(null, '', fullPath);\n        \n      }\n      \n      \n      try {\n        await this.handleRoute(currentPath);\n      } catch (error) {\n        this.logger.error('RouterService - Initial route failed:', error);\n        throw error;\n      }\n    }\n\n    // Observe URL changes\n    window.addEventListener('popstate', this.handlePopState);\n  }\n\n  async destroy(): Promise<void> {\n    window.removeEventListener('popstate', this.handlePopState);\n  }\n\n  getServiceId(): string {\n    return this.serviceId;\n  }\n\n  private handlePopState = (): void => {\n    const routePath = getRoutePath(window.location.pathname);\n    this.handleRoute(routePath);\n  };\n\n  private initializeRouter(routes: RouteDefinition[]): void {\n    // Ensure all routes have a leading slash\n    const normalizedRoutes = routes.map(route => ({\n      ...route,\n      path: route.path.startsWith('/') ? route.path : `/${route.path}`,\n    }));\n\n    // Process route tree recursively  \n    const processRoute = (route: RouteDefinition): ProcessedRoute => ({\n      // Ensure paths start with '/' for UniversalRouter\n      path: route.path.startsWith('/') ? route.path : `/${route.path}`,\n      action: async (context: UniversalRouteContext, params: Record<string, string | string[]>) => {\n        // Create proper RouteContext from UniversalRouter context - use pathname as primary source\n        const routePath = context.pathname || context.path || '/';\n        // Convert params to Record<string, string> format\n        const stringParams: Record<string, string> = {};\n        if (params) {\n          for (const [key, value] of Object.entries(params)) {\n            stringParams[key] = Array.isArray(value) ? value[0] : String(value);\n          }\n        }\n        const routeContext = new RouteContextImpl(routePath, stringParams, this.layoutContext);\n        return authMiddleware(context, async () => route.action(routeContext));\n      },\n      children: route.children?.map(processRoute)\n    });\n\n    // Create router with processed routes\n    const processedRoutes = normalizedRoutes.map(processRoute);\n    this.router = new UniversalRouter(processedRoutes);\n  }\n\n  /**\n   * Handle route changes and page lifecycle\n   */\n  public async handleRoute(path: string): Promise<void> {\n    if (!this.router || !this.layoutContext) {\n      throw new Error('Router or Layout not initialized');\n    }\n\n    // Set navigation state\n    this.navigationState.isNavigating = true;\n    \n    try {\n      // Clean up current page if exists\n      if (this.navigationState.currentPage && 'destroy' in this.navigationState.currentPage && typeof (this.navigationState.currentPage as { destroy?: () => Promise<void> }).destroy === 'function') {\n        await (this.navigationState.currentPage as { destroy: () => Promise<void> }).destroy();\n      }\n      this.navigationState.currentPage = null;\n\n      // Navigate to new page\n      const result = await this.navigate(path);\n\n      if (!result || !result.pageProvider) {\n        throw new Error(`No page provider found for route ${path}`);\n      }\n\n      // Create RouteContext and PageContext using consistent path from result\n      // The result.routeInfo contains the actual resolved path and params from the router\n      // Extract basePath from the route path (e.g., '/surveys/123' -> basePath: '/surveys')\n      const basePath = this.extractBasePath(result.routeInfo.path);\n      const routeContext = new RouteContextImpl(result.routeInfo.path, result.routeInfo.params, this.layoutContext, undefined, basePath);\n      \n      // If this is an error page result, mark the route as failed\n      if (result.routeInfo.params && 'errorCode' in result.routeInfo.params) {\n        routeContext.fail({\n          code: result.routeInfo.params.errorCode as string,\n          message: result.routeInfo.params.errorMessage as string,\n          details: result.routeInfo.params.errorDetails as string\n        });\n      }\n      \n      const pageContext = new PageContextImpl(routeContext, this.layoutContext);\n\n      // Create and initialize new page component using PageProvider\n      const mainContent = this.layoutContext.getMainContent();\n      if (!mainContent) {\n        throw new Error('MainContent not available from LayoutContext');\n      }\n      // Cast to MainContentImpl since PageProvider expects concrete implementation\n      const newPage = result.pageProvider(mainContent as any, pageContext);\n\n      // Associate page with context (one-time association)\n      pageContext.setPage(newPage);\n\n      // Set up breadcrumbs based on current route before page initialization\n      this.setupRouteBreadcrumbs(pageContext);\n\n      await newPage.init();\n      \n      // Update navigation state with resolved path from routeContext (most accurate)\n      this.navigationState.currentPage = newPage;\n      this.navigationState.currentPath = routeContext.getPath();\n    } catch (error) {\n      this.logger.error('Failed to load page for route: ' + path, error);\n      \n      // Reset navigation state on error\n      this.navigationState.isNavigating = false;\n      throw error;\n    } finally {\n      this.navigationState.isNavigating = false;\n    }\n  }\n\n  /**\n   * Navigate to a route and return the route result\n   */\n  private async navigate(path: string): Promise<RouteResult> {\n    if (!this.router) throw new Error('Router not initialized');\n\n    // Ensure path starts with /\n    const normalizedPath = path.startsWith('/') ? path : `/${path}`;\n\n    try {\n      // Notify about navigation start\n      this.eventBus.publish('router:navigationStart', { \n        from: this.navigationState.currentPath, \n        to: normalizedPath \n      });\n\n      try {\n        // Resolve the route\n        const resolveResult = await this.router.resolve(normalizedPath);\n        const result = resolveResult as RouteResult;\n\n        // Update browser history with full path and current path with route path\n        const fullPath = getFullPath(normalizedPath);\n        window.history.pushState(null, '', fullPath);\n        this.navigationState.currentPath = normalizedPath;\n\n        // Notify about successful navigation\n        this.eventBus.publish('router:navigationEnd', { path: normalizedPath });\n\n        return result;\n      } catch (routeError) {\n        // If route not found, return 404 page\n        if (routeError instanceof Error && routeError.message.includes('Route not found')) {\n          return await this.createErrorPageResult(\n            normalizedPath,\n            '404',\n            'Page Not Found',\n            `The page '${normalizedPath}' does not exist.`\n          );\n        }\n        \n        // For other router errors, return a generic error page\n        if (routeError instanceof Error) {\n          return await this.createErrorPageResult(\n            normalizedPath,\n            '503',\n            'Service Unavailable',\n            `Routing service is temporarily unavailable: ${routeError.message}`\n          );\n        }\n        \n        throw routeError;\n      }\n    } catch (error) {\n      // Handle navigation errors\n      this.eventBus.publish('router:error', { error: error as Error });\n      throw error;\n    }\n  }\n\n  getCurrentPath(): string {\n    return this.navigationState.currentPath;\n  }\n\n  public getCurrentPage(): ActivePage | null {\n    return this.navigationState.currentPage;\n  }\n  \n  public isNavigating(): boolean {\n    return this.navigationState.isNavigating;\n  }\n  \n  // =====================================================================================\n  // PROGRAMMATIC NAVIGATION METHODS\n  // =====================================================================================\n  \n  /**\n   * Navigate to a new route (pushes new state to history)\n   */\n  public async push(path: string): Promise<void> {\n    await this.handleRoute(path);\n  }\n  \n  /**\n   * Navigate to a route from a full URL (handles base URL extraction)\n   */\n  public async navigateToUrl(url: string | URL): Promise<void> {\n    const urlObj = typeof url === 'string' ? new URL(url) : url;\n    const routePath = getRoutePath(urlObj.pathname);\n    await this.push(routePath);\n  }\n  \n  /**\n   * Check if a URL should be handled by SPA routing (internal links)\n   */\n  public isInternalUrl(url: string | URL): boolean {\n    try {\n      const urlObj = typeof url === 'string' ? new URL(url) : url;\n      return urlObj.origin === window.location.origin;\n    } catch {\n      // Invalid URL\n      return false;\n    }\n  }\n  \n  /**\n   * Replace current route (replaces current state in history)\n   */\n  public async replace(path: string): Promise<void> {\n    // Temporarily disable history push in navigate()\n    const originalPush = window.history.pushState;\n    window.history.pushState = (state: any, title: string, url?: string | URL | null) => {\n      return window.history.replaceState(state, title, url);\n    };\n    \n    try {\n      await this.handleRoute(path);\n    } finally {\n      // Restore original pushState\n      window.history.pushState = originalPush;\n    }\n  }\n  \n  /**\n   * Go back in history\n   */\n  public back(): void {\n    window.history.back();\n  }\n  \n  /**\n   * Go forward in history\n   */\n  public forward(): void {\n    window.history.forward();\n  }\n  \n  /**\n   * Go to specific history entry\n   */\n  public go(delta: number): void {\n    window.history.go(delta);\n  }\n  \n  /**\n   * Reload current page\n   */\n  public async reload(): Promise<void> {\n    await this.handleRoute(this.navigationState.currentPath);\n  }\n  \n  // =====================================================================================\n  // PATH HANDLING HELPERS\n  // =====================================================================================\n\n  /**\n   * Extract base path from a full route path\n   * Examples:\n   *   '/surveys' -> '/surveys'\n   *   '/surveys/123' -> '/surveys'\n   *   '/surveys/123/collectors' -> '/surveys'\n   *   '/account/456' -> '/account'\n   *   '/' -> '/'\n   */\n  private extractBasePath(fullPath: string): string {\n    // Handle root path\n    if (fullPath === '/') {\n      return '/';\n    }\n    \n    // Split path into segments\n    const segments = fullPath.split('/').filter(segment => segment.length > 0);\n    \n    if (segments.length === 0) {\n      return '/';\n    }\n    \n    // For now, use the first segment as basePath\n    // This handles common patterns like:\n    //   /surveys/123 -> /surveys\n    //   /account/456 -> /account\n    return '/' + segments[0];\n  }\n\n  // =====================================================================================\n  // ERROR HANDLING HELPERS\n  // =====================================================================================\n  \n  /**\n   * Setup breadcrumbs based on current route and page details\n   */\n  private setupRouteBreadcrumbs(pageContext: PageContextImpl): void {\n    try {\n      const breadcrumbsManager = pageContext.breadcrumbs();\n      if (!breadcrumbsManager?.isAvailable()) {\n        return;\n      }\n\n      const page = pageContext.getPage();\n      if (!page) {\n        return;\n      }\n\n      const pageInfo = page.getPageInfo();\n      \n      const breadcrumbs: BreadcrumbItem[] = [];\n      const isHomePageAccess = isHomepage(pageInfo.id);\n      \n      // Add Home breadcrumb for non-homepage pages (except debug)\n      if (!isHomePageAccess && pageInfo.id !== 'debug') {\n        breadcrumbs.push({ id: 'home', text: 'Home', href: '/' });\n      }\n      \n      // Add current page breadcrumb\n      // Skip for debug page only\n      if (pageInfo.id !== 'debug') {\n        breadcrumbs.push({\n          id: pageInfo.id,\n          text: pageInfo.name.replace(' - Opinion', ''),\n          caption: this.getBreadcrumbCaption(pageInfo.id)\n        });\n      }\n      \n      if (breadcrumbs.length > 0) {\n        breadcrumbsManager.set(breadcrumbs);\n        this.logger.info(`🍞 RouterService - Set breadcrumbs for ${pageInfo.id}:`, breadcrumbs.map(b => b.text));\n      }\n    } catch (error) {\n      this.logger.error('🍞 RouterService - Error setting up breadcrumbs:', error);\n    }\n  }\n\n  private getBreadcrumbCaption(pageId: string): string | undefined {\n    const captions: Record<string, string> = {\n      'dashboard': 'Main dashboard view',\n      'surveys': 'Survey management',\n      'account': 'Account settings',\n      'error-page': 'Error information'\n    };\n    return captions[pageId];\n  }\n\n  /**\n   * Create a standardized error page RouteResult\n   */\n  private async createErrorPageResult(\n    path: string,\n    errorCode: string = '404',\n    errorMessage: string = 'Page Not Found',\n    errorDetails?: string\n  ): Promise<RouteResult> {\n    const ErrorPage = (await import('../pages/ErrorPage')).default;\n    \n    // Put error info in route params so ErrorPage can access them\n    const errorParams = {\n      errorCode,\n      errorMessage,\n      errorDetails: errorDetails || `The page '${path}' could not be found.`\n    };\n    \n    const pageProvider: PageProvider = (mainContent, pageContext) => {\n      return new ErrorPage(mainContent, pageContext);\n    };\n    \n    return {\n      pageProvider,\n      routeInfo: {\n        path,\n        params: errorParams\n      }\n    };\n  }\n}\n","import { NavigationItem } from '../components/Sidebar';\n\n/**\n * Default navigation structure for the application\n * Note: href values are route paths, not full URLs. The SidebarComponent will apply getFullPath() when rendering.\n */\nexport const DEFAULT_NAVIGATION_ITEMS: NavigationItem[] = [\n    {\n        id: \"dashboard\",\n        text: \"Dashboard\",\n        icon: \"dashboard\",\n        href: \"/dashboard\",\n        caption: \"Main dashboard - view analytics, reports and key metrics\",\n        active: false,\n    },\n    {\n        id: \"surveys\",\n        text: \"Surveys\",\n        icon: \"poll\",\n        href: \"/surveys\",\n        caption: \"Create and manage survey questionnaires\",\n        active: false,\n    },\n    {\n        id: \"debug\",\n        text: \"Debug\",\n        icon: \"bug_report\",\n        href: \"/debug\",\n        caption: \"Development tools and troubleshooting\",\n        active: false,\n    },\n];\n","/**\n * Sidebar interface and related types\n * Defines the contract for sidebar components\n */\n\nimport { ComponentReference, ComponentReferenceConfig } from './ComponentReference';\nimport type { LayoutContext } from '../contexts/LayoutContext';\n\n/**\n * Configuration interface for sidebar dimensions and behavior\n */\nexport interface SidebarConfig {\n  defaultWidth?: number; // Default expanded width (default: 280px)\n  compactWidth?: number; // Compact mode width (default: 80px)\n  footer?: {\n    text?: string; // Footer text (default: \"© 2025 Opinion\")\n    showFooter?: boolean; // Whether to show footer (default: true)\n  };\n}\n\n/**\n * Sidebar interface - defines the contract for sidebar components\n */\nexport interface Sidebar {\n  // Core properties\n  isCompactMode(): boolean;\n  isLocked(): boolean;\n  getDimensions(): Dimensions;\n  isVisible(): boolean;\n\n  // State management\n  toggleCompactMode(): void;\n  expandSidebar(): void;\n  compactSidebar(): void;\n  lockExpanded(): void;\n  unlockSidebar(): void;\n\n  // Mobile behavior\n  toggleMobileVisibility(trigger?: \"close-button\" | \"backdrop\" | \"menu-button\" | \"programmatic\"): void;\n  showMobileMenu(trigger?: \"close-button\" | \"backdrop\" | \"menu-button\" | \"programmatic\"): void;\n  hideMobileMenu(trigger?: \"close-button\" | \"backdrop\" | \"menu-button\" | \"programmatic\"): void;\n\n  // Navigation\n  updateNavigation(items: NavigationItem[]): void;\n  setActivePage(navId: string): void;\n\n  // Footer management\n  updateFooterText(text: string): void;\n  setFooterVisibility(show: boolean): void;\n\n  // Lifecycle\n  init(): Promise<void>;\n  destroy(): void;\n\n  // Event handling\n  onCompactModeChange(handler: CompactModeChangeHandler): () => void;\n\n  /**\n   * Set the toggle compact mode handler\n   */\n  setToggleCompactModeHandler(handler?: (compactMode: boolean) => void): void;\n}\n\n/**\n * Navigation item interface\n */\nexport interface NavigationItem {\n  id: string;\n  text: string;\n  icon: string;\n  href: string;\n  caption?: string; // Optional caption/description for menu items\n  badge?: string;\n  active?: boolean;\n  expandable?: boolean;\n  expanded?: boolean;\n  children?: NavigationItem[];\n}\n\n/**\n * Compact mode change handler function type\n */\nexport type CompactModeChangeHandler = (isCompact: boolean) => void;\n\n/**\n * Sidebar dimensions interface - pure dimensional data\n * Behavioral state should be accessed via dedicated methods or layout mode\n */\nexport interface Dimensions {\n  width: number; // Current width in pixels\n  isVisible: boolean; // Whether sidebar is visible\n}\n\n/**\n * Sidebar reference utilities\n */\nexport class SidebarRef {\n  static readonly COMPONENT_ID = 'Sidebar' as const;\n  \n  /**\n   * Get a ComponentReference for safely accessing registered Sidebar\n   * \n   * @param context - The LayoutContext to resolve from\n   * @param config - Optional configuration for the ComponentReference\n   * @returns ComponentReference<Sidebar> for lazy resolution\n   * \n   * @example\n   * ```typescript\n   * const sidebarRef = SidebarRef.getRegisteredReference(layoutContext);\n   * const sidebar = await sidebarRef.get(); // Returns Sidebar | null\n   * ```\n   */\n  static getRegisteredReference(\n    context: LayoutContext,\n    config?: ComponentReferenceConfig\n  ): ComponentReference<Sidebar> {\n    return new ComponentReference<Sidebar>(\n      context,\n      SidebarRef.COMPONENT_ID,\n      () => context.getSidebar(),\n      config\n    );\n  }\n}\n\n// Export concrete implementation (imported separately to avoid circular dependencies)\n// Use: import { SidebarComponent } from './Sidebar';\nexport { default as SidebarComponent } from './SidebarComponent';\n","import { BaseService } from \"../BaseService\";\nimport { ServiceReference, ServiceReferenceConfig } from \"../ServiceReference\";\nimport { SelfIdentifyingService } from \"../../core/ServiceIdentity\";\nimport { DEFAULT_NAVIGATION_ITEMS } from \"../../config/navigation\";\nimport { LayoutContext } from \"../../contexts/LayoutContext\";\nimport { NavigationItem, Sidebar, SidebarRef } from \"../../components/Sidebar\";\nimport {\n  NavigationService,\n  NavigationServiceConfig,\n} from \"./NavigationService\";\nimport { ActivePage, ActivePageConsumer } from \"../../interfaces/ActivePage\";\n\n/**\n * Navigation service implementation\n */\nexport class NavigationServiceImpl\n  extends BaseService\n  implements NavigationService, SelfIdentifyingService, ActivePageConsumer\n{\n  public static getRegisteredReference(\n    context: LayoutContext,\n    config?: ServiceReferenceConfig,\n  ): ServiceReference<NavigationService> {\n    return new ServiceReference<NavigationService>(\n      context,\n      NavigationServiceImpl.SERVICE_ID,\n      config,\n    );\n  }\n  public static readonly SERVICE_ID = \"navigation.service\" as const;\n\n  private items: NavigationItem[] = [];\n  private activeId: string | null = null;\n  private expandedIds: Set<string> = new Set();\n  private activePageConsumerUnsubscriber: (() => void) | null = null;\n\n  constructor(context: LayoutContext, config?: NavigationServiceConfig) {\n    super(context, config);\n  }\n\n  public static register(\n    context: LayoutContext,\n    config?: NavigationServiceConfig,\n  ): NavigationService {\n    const service = new NavigationServiceImpl(context, config);\n    context.registerService(NavigationServiceImpl.SERVICE_ID, service);\n    return service;\n  }\n\n  getServiceId(): string {\n    return NavigationServiceImpl.SERVICE_ID;\n  }\n\n  protected async onInit(): Promise<void> {\n    const config = this.getConfig() as NavigationServiceConfig;\n\n    // Initialize with config items or defaults\n    const initialItems = config.initialItems || DEFAULT_NAVIGATION_ITEMS;\n\n    // Initialize items first\n    this.items = [...initialItems];\n\n    // Set active ID after items to ensure it exists in the list\n    if (config.activeId && this.findItemById(config.activeId)) {\n      this.activeId = config.activeId;\n    }\n\n    // Ensure valid state by running sync\n    this.syncState();\n\n    // Register as active page consumer to receive page change notifications\n    this.activePageConsumerUnsubscriber =\n      this.getContext().registerActivePageConsumer(this);\n    this.log(\"✅\", \"Registered as active page consumer\");\n\n    // Check if there's already an active page and update navigation accordingly\n    const currentActivePage = this.getContext().getActivePage();\n    if (currentActivePage) {\n      this.onActivePageChanged(currentActivePage, null);\n    }\n\n    try {\n      // Get the sidebar reference (single attempt - no retries)\n      const sidebarRef = SidebarRef.getRegisteredReference(this.getContext(), {\n        maxRetries: 1,\n        retryInterval: 0,\n        timeout: 0,\n      });\n      const sidebar = await sidebarRef.get();\n      if (sidebar) {\n        sidebar.updateNavigation(this.getSidebarStructure());\n        this.log(\"✅\", \"Synchronized with sidebar\");\n      }\n    } catch (error) {\n      this.log(\"⚠️\", \"Failed to sync with sidebar:\", error);\n    }\n\n    this.log(\"✅\", \"NavigationService initialized\");\n  }\n\n  protected async onDestroy(): Promise<void> {\n    this.log(\"👋\", \"Destroying NavigationService\");\n\n    // Unregister from active page consumer\n    if (this.activePageConsumerUnsubscriber) {\n      this.activePageConsumerUnsubscriber();\n      this.activePageConsumerUnsubscriber = null;\n      this.log(\"✅\", \"Unregistered from active page consumer\");\n    }\n  }\n\n  // Core state management\n  getItems(): NavigationItem[] {\n    return [...this.items];\n  }\n\n  setItems(items: NavigationItem[]): void {\n    this.items = [...items];\n    // After setting items, ensure active and expanded states are preserved\n    this.syncState();\n  }\n\n  // Active state management\n  setActiveItem(id: string): void {\n    const validItem = this.findItemById(id);\n    if (!validItem) {\n      throw new Error(\n        `NavigationService.setActiveItem: Item with id '${id}' not found in navigation items. Available items: ${this.items.map((i) => i.id).join(\", \")}`,\n      );\n    }\n\n    this.log(\"🎯\", `Setting active item: ${id}`);\n    this.activeId = id;\n    this.syncState();\n\n    // Immediately sync with sidebar when active item changes - synchronously for UI responsiveness\n    try {\n      const sidebarRef = SidebarRef.getRegisteredReference(this.getContext(), {\n        maxRetries: 0,\n        retryInterval: 0,\n        timeout: 0,\n      });\n\n      // Try to get sidebar synchronously first\n      sidebarRef\n        .get()\n        .then((sidebar) => {\n          if (sidebar) {\n            this.syncWithSidebar(sidebar);\n          }\n        })\n        .catch((error) => {\n          this.log(\"⚠️\", \"Failed to sync with sidebar immediately:\", error);\n        });\n    } catch (error) {\n      this.log(\n        \"⚠️\",\n        \"Failed to get sidebar reference for immediate sync:\",\n        error,\n      );\n    }\n  }\n\n  getActiveItem(): string | null {\n    return this.activeId;\n  }\n\n  isActive(id: string): boolean {\n    return this.activeId === id;\n  }\n\n  // Expanded state management\n  toggleExpanded(id: string): void {\n    if (this.expandedIds.has(id)) {\n      this.expandedIds.delete(id);\n    } else {\n      this.expandedIds.add(id);\n    }\n    this.syncState();\n  }\n\n  isExpanded(id: string): boolean {\n    return this.expandedIds.has(id);\n  }\n\n  // SidebarComponent integration\n  getSidebarStructure(): NavigationItem[] {\n    return this.items.map((item) => ({\n      ...item,\n      active: item.id === this.activeId,\n      expanded: this.expandedIds.has(item.id),\n      children: item.children?.map((child) => ({\n        ...child,\n        active: child.id === this.activeId,\n      })),\n    }));\n  }\n\n  public syncWithSidebar(sidebar: Sidebar): void {\n    if (!this.isReady()) {\n      throw new Error(\n        \"NavigationService.syncWithSidebar: Service is not ready. Call init() first.\",\n      );\n    }\n\n    if (!sidebar) {\n      throw new Error(\n        \"NavigationService.syncWithSidebar: Sidebar parameter is null or undefined\",\n      );\n    }\n\n    this.log(\"🔄\", \"Syncing with sidebar...\", {\n      activeId: this.activeId,\n      itemsCount: this.items.length,\n      expandedCount: this.expandedIds.size,\n    });\n\n    // Update navigation structure based on sidebar state\n    const structure = this.getSidebarStructure();\n    sidebar.updateNavigation(structure);\n\n    // Also explicitly set the active page on the sidebar\n    if (this.activeId) {\n      sidebar.setActivePage(this.activeId);\n      this.log(\"📍\", `Set active page on sidebar: ${this.activeId}`);\n    } else {\n      this.log(\"⚠️\", \"No active ID to set on sidebar\");\n    }\n\n    this.log(\"✅\", \"Synchronized state with sidebar\", {\n      activeId: this.activeId,\n    });\n  }\n\n  private async syncWithSidebarAsync(): Promise<void> {\n    try {\n      const sidebarRef = SidebarRef.getRegisteredReference(this.getContext(), {\n        maxRetries: 1,\n        retryInterval: 0,\n        timeout: 0,\n      });\n      const sidebar = await sidebarRef.get();\n      if (sidebar) {\n        this.syncWithSidebar(sidebar);\n      }\n    } catch (error) {\n      this.log(\"⚠️\", \"Failed to sync with sidebar async:\", error);\n    }\n  }\n\n  // Private helpers\n  private findItemById(id: string): NavigationItem | null {\n    // Search in root items\n    const rootItem = this.items.find((item) => item.id === id);\n    if (rootItem) return rootItem;\n\n    // Search in child items\n    for (const item of this.items) {\n      if (item.children) {\n        const childItem = item.children.find((child) => child.id === id);\n        if (childItem) return childItem;\n      }\n    }\n\n    return null;\n  }\n\n  // ActivePageConsumer implementation\n  public onActivePageChanged(\n    activePage: ActivePage | null,\n    previousPage: ActivePage | null,\n  ): void {\n    this.log(\"🔄\", \"Active page changed:\", {\n      current: activePage?.getPageId() || \"none\",\n      previous: previousPage?.getPageId() || \"none\",\n    });\n\n    if (!activePage) {\n      // No active page - clear active navigation item\n      this.activeId = null;\n      this.log(\"📍\", \"Cleared active navigation item (no active page)\");\n    } else {\n      // Map active page to navigation item\n      const pageId = activePage.getPageId();\n      const navigationItemId = this.mapPageIdToNavigationItem(pageId);\n\n      if (navigationItemId && this.findItemById(navigationItemId)) {\n        this.activeId = navigationItemId;\n        this.log(\n          \"📍\",\n          `Mapped active page '${pageId}' to navigation item '${navigationItemId}'`,\n        );\n      } else {\n        // No matching navigation item found\n        this.activeId = null;\n        this.log(\"⚠️\", `No navigation item found for active page '${pageId}'`);\n      }\n    }\n\n    // Sync state and update sidebar\n    this.syncState();\n    this.syncWithSidebarAsync();\n  }\n\n  /**\n   * Map a page ID to a navigation item ID\n   * This method handles the mapping between page identifiers and navigation menu items\n   */\n  private mapPageIdToNavigationItem(pageId: string): string | null {\n    // Direct mapping for known page types\n    const pageToNavMap: Record<string, string> = {\n      DashboardPage: \"dashboard\",\n      SurveyListPage: \"surveys\",\n      SurveyDetailPage: \"surveys\",\n      AccountRootPage: \"account\",\n      AccountSettingsPage: \"account\",\n      LoginPage: \"auth\",\n      DebugPage: \"debug\",\n      ErrorPage: \"debug\", // Error pages typically fall under debug/troubleshooting\n    };\n\n    // Try direct mapping first\n    if (pageToNavMap[pageId]) {\n      return pageToNavMap[pageId];\n    }\n\n    // Try partial matching for pages that might have dynamic suffixes\n    for (const [pageName, navId] of Object.entries(pageToNavMap)) {\n      if (\n        pageId\n          .toLowerCase()\n          .includes(pageName.toLowerCase().replace(\"page\", \"\"))\n      ) {\n        return navId;\n      }\n    }\n\n    // Fallback: check if pageId directly matches any navigation item ID\n    if (this.findItemById(pageId)) {\n      return pageId;\n    }\n\n    // No mapping found\n    return null;\n  }\n\n  private syncState(): void {\n    // Ensure active ID exists somewhere in the tree (root or children)\n    if (this.activeId && !this.findItemById(this.activeId)) {\n      this.activeId = null;\n    }\n\n    // Clean up expanded IDs for non-existent items\n    const validIds = new Set(this.items.map((item) => item.id));\n    for (const id of this.expandedIds) {\n      if (!validIds.has(id)) {\n        this.expandedIds.delete(id);\n      }\n    }\n  }\n}\n","import { Service } from '../interfaces/Service';\nimport { LayoutContext } from '../contexts/LayoutContext';\nimport { LoggerFactory } from '../logging/LoggerFactory';\nimport { Logger } from '../logging/Logger';\n\n/**\n * LinkInterceptionService\n * \n * Handles intercepting navigation link clicks and delegating to RouterService\n * for SPA navigation. This service sits at the layout layer and provides\n * a clean separation between link interception and routing logic.\n */\nexport class LinkInterceptionService implements Service {\n  public static readonly SERVICE_ID = 'linkInterception';\n  \n  private serviceId: string;\n  private layoutContext: LayoutContext;\n  private logger: Logger;\n  private isInitialized: boolean = false;\n\n  constructor(layoutContext: LayoutContext) {\n    this.serviceId = LinkInterceptionService.SERVICE_ID;\n    this.layoutContext = layoutContext;\n    this.logger = LoggerFactory.getInstance().getLogger('LinkInterceptionService');\n  }\n\n  async init(): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n\n    // Set up global click listener for link interception\n    document.addEventListener('click', this.handleClick, true);\n    this.isInitialized = true;\n    \n    this.logger.info('LinkInterceptionService - Initialized');\n  }\n\n  async destroy(): Promise<void> {\n    if (!this.isInitialized) {\n      return;\n    }\n\n    document.removeEventListener('click', this.handleClick, true);\n    this.isInitialized = false;\n    \n    this.logger.info('LinkInterceptionService - Destroyed');\n  }\n\n  getServiceId(): string {\n    return this.serviceId;\n  }\n\n  /**\n   * Global click handler for link interception\n   */\n  private handleClick = (event: Event): void => {\n    const mouseEvent = event as MouseEvent;\n    const target = mouseEvent.target as HTMLElement;\n    const link = target.closest('a[href]') as HTMLAnchorElement;\n\n    // Only process navigation links\n    if (!link) {\n      return;\n    }\n\n    // Skip if modifier keys are pressed (user wants new tab/window)\n    if (mouseEvent.ctrlKey || mouseEvent.metaKey || mouseEvent.shiftKey || mouseEvent.altKey) {\n      return;\n    }\n\n    // Skip if not left click\n    if (mouseEvent.button !== 0) {\n      return;\n    }\n\n    // Skip if link has attributes that indicate external handling\n    if (this.shouldSkipLink(link)) {\n      return;\n    }\n\n    // Get router service and check if this is an internal link\n    const router = this.layoutContext.getService('router');\n    if (!router || !('navigateToUrl' in router) || !('isInternalUrl' in router)) {\n      return; // Router not available or doesn't support SPA navigation\n    }\n\n    const routerService = router as any;\n    \n    // Check if it's an internal URL that should be handled by SPA routing\n    if (!routerService.isInternalUrl(link.href)) {\n      return; // Let browser handle external links\n    }\n\n    // Prevent default browser navigation\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.logger.info('LinkInterceptionService - Intercepted navigation to:', link.href);\n\n    // Delegate to RouterService for SPA navigation\n    routerService.navigateToUrl(link.href).catch((error: Error) => {\n      this.logger.error('LinkInterceptionService - Navigation failed:', error);\n      // Fallback to regular navigation\n      window.location.href = link.href;\n    });\n  };\n\n  /**\n   * Check if a link should be skipped (not handled by SPA routing)\n   */\n  private shouldSkipLink(link: HTMLAnchorElement): boolean {\n    // Skip if link has download attribute\n    if (link.hasAttribute('download')) {\n      return true;\n    }\n\n    // Skip if link has target attribute (opens in new window/tab)\n    if (link.target && link.target !== '_self') {\n      return true;\n    }\n\n    // Skip if link has rel=\"external\"\n    if (link.rel && link.rel.includes('external')) {\n      return true;\n    }\n\n    // Skip if link has data-no-spa attribute\n    if (link.hasAttribute('data-no-spa')) {\n      return true;\n    }\n\n    return false;\n  }\n}\n\nexport default LinkInterceptionService;","import { AsyncLogConsumer } from '../logging/AsyncConsumerLogChannel';\nimport { LogMessage } from '../logging/ChannelTypes';\nimport { Messages, MessageType } from '../interfaces/Messages';\n\n/**\n * Adapter that converts logging messages to user-visible messages\n * Implements AsyncLogConsumer to bridge LoggerFactory with Messages component\n */\nexport class MessagesLogAdapter implements AsyncLogConsumer {\n    private messages: Messages;\n    private readonly levelMapping: { [key: string]: MessageType } = {\n        // DEBUG and TRACE are filtered out before this mapping is used\n        'INFO': 'info',\n        'WARN': 'warning', \n        'ERROR': 'error',\n        'FATAL': 'error'\n    };\n\n    constructor(messages: Messages) {\n        this.messages = messages;\n    }\n\n    /**\n     * Process a log message and convert it to a user message\n     */\n    async consume(logMessage: LogMessage): Promise<void> {\n        \n        // IMPORTANT: Filter out logs from messaging/logging components to prevent circular dependency\n        // If these components log something, and we try to show it as a message,\n        // it creates an infinite loop/deadlock\n        const excludedComponents = [\n            'MessagesComponent',\n            'MessagesLogAdapter', \n            'LoggerFactory',\n            'AsyncConsumerLogChannel',\n            'ChannelFactory'\n        ];\n        \n        if (excludedComponents.includes(logMessage.logName)) {\n            return; // Skip processing logs from messaging/logging infrastructure\n        }\n        \n        // Filter out DEBUG and TRACE messages - these are for developers, not end users\n        const debugLevels = ['DEBUG', 'TRACE'];\n        if (debugLevels.includes(logMessage.level.toUpperCase())) {\n            return; // Skip debug messages - don't show to users\n        }\n        \n        // Map log level to message type\n        const messageType = this.levelMapping[logMessage.level.toUpperCase()] || 'info';\n        \n        // Create a user-friendly title from logger name\n        const title = this.formatTitle(logMessage.logName, logMessage.level);\n        \n        // Format the message content\n        const description = this.formatDescription(logMessage);\n        \n        // Determine message options based on log level\n        const options = this.getMessageOptions(logMessage.level);\n        \n        // Show the message via the Messages interface\n        switch (messageType) {\n            case 'error':\n                this.messages.showError(title, description, options);\n                break;\n            case 'warning':\n                this.messages.showWarning(title, description, options);\n                break;\n            case 'info':\n                this.messages.showInfo(title, description, options);\n                break;\n            case 'success':\n                // Success type not typical for logs, but handle it\n                this.messages.showSuccess(title, description, options);\n                break;\n        }\n    }\n\n    /**\n     * Error handler for when consume() fails\n     */\n    onError(error: Error, logMessage: LogMessage): void {\n        console.error('MessagesLogAdapter: Failed to process log message:', error);\n        console.error('Original log message:', logMessage);\n        \n        // Try to show a fallback error message\n        try {\n            this.messages.showError(\n                'Logging Error', \n                'Failed to display a log message. See console for details.',\n                { autoHide: true, autoHideDelay: 3000 }\n            );\n        } catch (fallbackError) {\n            console.error('MessagesLogAdapter: Even fallback message failed:', fallbackError);\n        }\n    }\n\n    /**\n     * Format a user-friendly title from logger name and level\n     */\n    private formatTitle(logName: string, level: string): string {\n        const levelUpper = level.toUpperCase();\n        \n        // Clean up logger name for display\n        const cleanName = logName\n            .replace(/([A-Z])/g, ' $1') // Add spaces before capitals\n            .replace(/^\\s+/, '') // Remove leading space\n            .replace(/\\b\\w/g, l => l.toUpperCase()); // Capitalize first letter of each word\n        \n        switch (levelUpper) {\n            case 'ERROR':\n            case 'FATAL':\n                return `Error in ${cleanName}`;\n            case 'WARN':\n                return `Warning from ${cleanName}`;\n            case 'INFO':\n                return `Info: ${cleanName}`;\n            // DEBUG and TRACE are filtered out, so no cases needed\n            default:\n                return `${cleanName}: ${levelUpper}`;\n        }\n    }\n\n    /**\n     * Format the description from log message content\n     */\n    private formatDescription(logMessage: LogMessage): string {\n        let description = logMessage.message || '';\n        \n        // Include exception details if present\n        if (logMessage.exception) {\n            description += `\\n\\nError details: ${logMessage.exception}`;\n        }\n        \n        // Include args if present and useful\n        if (logMessage.args && logMessage.args.length > 0) {\n            const argsStr = logMessage.args\n                .map((arg: unknown) => {\n                    if (typeof arg === 'object' && arg !== null) {\n                        try {\n                            return JSON.stringify(arg, null, 2);\n                        } catch {\n                            return String(arg);\n                        }\n                    }\n                    return String(arg);\n                })\n                .join(', ');\n            \n            if (argsStr.length < 200) { // Only include if not too long\n                description += `\\n\\nDetails: ${argsStr}`;\n            }\n        }\n        \n        return description || 'No message details available';\n    }\n\n    /**\n     * Get message options based on log level\n     */\n    private getMessageOptions(level: string) {\n        const levelUpper = level.toUpperCase();\n        \n        switch (levelUpper) {\n            case 'ERROR':\n            case 'FATAL':\n                return {\n                    dismissible: true,\n                    autoHide: false, // Errors should stay visible\n                    persistent: true // Errors are permanent until manually dismissed\n                };\n            case 'WARN':\n                return {\n                    dismissible: true,\n                    autoHide: false, // Warnings should stay visible\n                    persistent: true // Warnings are permanent until manually dismissed\n                };\n            case 'INFO':\n                return {\n                    dismissible: true,\n                    autoHide: true,\n                    autoHideDelay: 5000,\n                    persistent: false\n                };\n            // DEBUG and TRACE are filtered out, so no cases needed\n            default:\n                return {\n                    dismissible: true,\n                    autoHide: true,\n                    autoHideDelay: 4000,\n                    persistent: false\n                };\n        }\n    }\n}","/**\n * Main application class for Opinion Front UI\n * Handles routing and page management with global layout\n */\n\nimport { MockApiService } from \"./services/MockApiService\";\nimport { AppHeaderImpl } from \"./components/AppHeaderImpl\";\nimport AppFooterImpl from \"./components/AppFooterImpl\";\nimport { MainContentImpl } from \"./components/MainContentImpl\";\nimport Layout from \"./components/Layout\";\nimport { AuthService, MockSessionAuthProvider } from \"./auth\";\nimport { AppHeaderBinderService } from \"./services/AppHeaderBinderService\";\nimport { UserService } from \"./services/UserService\";\nimport { registerService } from \"./core/ServiceIdentity\";\nimport type { LayoutContext } from \"./contexts/LayoutContext\";\nimport { RouterService } from \"./router/RouterService\";\nimport { SurveysRouter } from \"./router/SurveysRouter\";\nimport { NavigationServiceImpl } from \"./services/navigation/NavigationServiceImpl\";\nimport { LinkInterceptionService } from \"./services/LinkInterceptionService\";\nimport { LoggerFactory } from \"./logging/LoggerFactory\";\nimport { MessagesLogAdapter } from \"./adapters/MessagesLogAdapter\";\nimport { Logger } from \"./logging/Logger\";\n\nexport class OpinionApp {\n  // Trusted origins for postMessage, adjust as needed\n  private static readonly TRUSTED_MESSAGE_ORIGINS: string[] = [\n    'http://localhost:3000', // Add your development URL(s)\n    'https://your-production-domain.com' // Add production URL(s)\n  ];\n\n  private initialized: boolean = false;\n  private apiService: MockApiService;\n  private routerService: RouterService | null = null;\n  private errorHandler: (ex: Error | unknown) => void;\n  private logger: Logger;\n\n  /**\n   * Default error handler implementation - private static const that outputs to console\n   */\n  private static readonly DEFAULT_ERROR_HANDLER = (ex: Error | unknown): void => {\n    // Placeholder; constructor overrides with logger-based handler\n    const err = ex instanceof Error ? ex : new Error(String(ex));\n    // Fallback to console to avoid recursive dependency before logger is ready\n    // This will only be used if someone calls OpinionApp.DEFAULT_ERROR_HANDLER directly\n    // Normal flow replaces errorHandler in constructor\n    console.error('OpinionApp error (default handler):', err);\n  };\n\n  // Global layout components\n  private appHeader: AppHeaderImpl | null = null;\n  private appFooter: AppFooterImpl | null = null;\n  private mainContent: MainContentImpl | null = null;\n  private layout: Layout | null = null;\n\n  constructor() {\n    this.apiService = new MockApiService();\n    // Initialize logger for OpinionApp using string name to avoid typescript-logging conflicts\n    this.logger = LoggerFactory.getInstance().getLogger('OpinionApp');\n    // Default error handler uses logger\n    this.errorHandler = (ex: Error | unknown) => {\n      const err = ex instanceof Error ? ex : new Error(String(ex));\n      this.logger.error('OpinionApp error', err);\n    };\n  }\n\n  public async init(): Promise<void> {\n    if (this.initialized) {\n      return;\n    }\n    \n    try {\n      this.setupEventListeners();\n      await this.initializeGlobalLayout();\n      this.initialized = true;\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n\n  private setupEventListeners(): void {\n    // Handle postMessage events for testing (e.g., from test-positioning.html iframe)\n    window.addEventListener(\"message\", (event) => {\n      // Verify the origin of the message\n      if (!OpinionApp.TRUSTED_MESSAGE_ORIGINS.includes(event.origin)) {\n        this.logger.warn('Blocked postMessage from untrusted origin:', event.origin);\n        return;\n      }\n\n      if (event.data && event.data.action) {\n        switch (event.data.action) {\n          case \"showErrorMessage\":\n            this.handleTestErrorMessage(event.data);\n            break;\n          case \"clearErrorMessages\":\n            this.handleClearMessages();\n            break;\n          default:\n            this.logger.warn('Unknown postMessage action:', event.data.action);\n        }\n      }\n    });\n  }\n\n  /**\n   * Initialize global layout components in semantic order (header, main, footer)\n   * Note: Sidebar is self-contained and initialized by AppHeader\n   */\n  private async initializeGlobalLayout(): Promise<void> {\n    // Initialize Layout component first (manages CSS classes and coordination)\n    this.layout = new Layout();\n    \n    // Set LayoutContext.fail as the error handler as soon as possible\n    this.layout.onContextReady((ctx) => {\n      this.setErrorHandler((error) => {\n        ctx.fail(error instanceof Error ? error : String(error));\n      });\n      \n      // Integrate LoggerFactory with Messages system\n      const messages = ctx.getMessages();\n      if (messages) {\n        const adapter = new MessagesLogAdapter(messages);\n        LoggerFactory.getInstance().messagesConsumer(adapter);\n        this.logger.info('LoggerFactory integrated with Messages system');\n      } else {\n        this.logger.warn('Messages system not available for LoggerFactory integration');\n      }\n    });\n\n    // Register formal handlers using the new handler system\n    await this.layout\n      .setContextHandler(\n        {\n          id: \"app-layout-configuration\",\n          priority: 700, // Lower priority, runs after service registration\n          onContextReady: async (context) => {\n            await this.configureLayout(context);\n          },\n        },\n        {\n          enableLogging: true,\n          continueOnError: false, // Layout configuration is critical\n          timeout: 5000,\n        },\n      )\n      .setContextHandler(\n        {\n          id: \"app-service-registration\",\n          priority: 800, // High priority - services must be registered first\n          onContextReady: async (context) => {\n            await this.registerServices(context);\n            await this.validateInitialAuthentication(context);\n          },\n        },\n        {\n          enableLogging: true,\n          continueOnError: false, // Service registration is critical\n          timeout: 15000, // More time for service initialization\n        },\n      )\n      .init();\n  }\n\n  /**\n   * Register services using the formal handler pattern\n   * This method creates a LifecycleHandler for service registration\n   */\n  private async registerServices(context: LayoutContext): Promise<void> {\n    // Register MockApiService first (other services depend on it)\n    registerService(context, MockApiService, this.apiService);\n    \n    // Create MockSessionAuthProvider instance\n    const mockAuthProvider = new MockSessionAuthProvider(this.apiService, {\n      authDelay: 300, // Shorter delay for development\n      enableAccountSwitching: true,\n      mockAccountCount: 3,\n    });\n\n    // Register MockSessionAuthProvider using type-safe registration\n    registerService(context, MockSessionAuthProvider, mockAuthProvider);\n\n    // Register AuthService using type-safe registration and configuration\n    const authService = new AuthService(context, {\n      authProviderServiceId: MockSessionAuthProvider.SERVICE_ID, // Type-safe reference!\n      autoValidate: false,\n    });\n    registerService(context, AuthService, authService);\n    // Register UserService using type-safe registration and configuration\n    const userService = new UserService(context, {\n      authServiceId: AuthService.SERVICE_ID, // Type-safe reference!\n      sessionAuthProviderServiceId: MockSessionAuthProvider.SERVICE_ID, // Type-safe reference!\n    });\n    registerService(context, UserService, userService);\n\n    // Register AppHeaderBinderService with type-safe service references\n    const authServiceRef = AuthService.getRegisteredReference(context);\n    const appHeaderBinderService = new AppHeaderBinderService(\n      authServiceRef,\n      context,\n      { updateOnInit: true },\n    );\n    // Use self-identifying service ID for registration\n    registerService(context, AppHeaderBinderService, appHeaderBinderService);\n\n    // Register NavigationService using service reference pattern\n    const navigationService = new NavigationServiceImpl(context);\n    registerService(context, NavigationServiceImpl, navigationService);\n    \n    // Register SurveysRouter as a service\n    const surveysRouter = new SurveysRouter(context, 'surveys');\n    registerService(context, SurveysRouter, surveysRouter);\n    \n    // Register LinkInterceptionService\n    const linkInterceptionService = new LinkInterceptionService(context);\n    registerService(context, LinkInterceptionService, linkInterceptionService);\n\n    // Initialize services in dependency order (dependencies first)\n    await this.apiService.init(); // Initialize MockApiService first\n    await mockAuthProvider.init();\n    await authService.init(); // AuthService depends on mockAuthProvider\n    await userService.init(); // UserService depends on authService and mockAuthProvider\n    await appHeaderBinderService.init(); // AppHeaderBinderService depends on authService\n    await navigationService.init(); // Initialize NavigationService\n    await surveysRouter.init(); // Initialize SurveysRouter\n\n    // Instantiate and initialize RouterService as part of service registration\n    this.routerService = new RouterService(context);\n    await this.routerService.init();\n    \n    // Initialize LinkInterceptionService after RouterService (depends on router)\n    await linkInterceptionService.init();\n  }\n\n  /**\n   * Configure layout components using the formal handler pattern\n   * This method handles sidebar navigation and user menu setup\n   */\n  private async configureLayout(context: LayoutContext): Promise<void> {\n\n    // Sync sidebar navigation via NavigationService using ServiceReference for lazy resolution\n    try {\n      const navServiceRef = NavigationServiceImpl.getRegisteredReference(context);\n      const navService = await navServiceRef.get();\n      const sidebar = context.getSidebar();\n      \n      if (!navService) {\n        throw new Error(\"NavigationService not available after registration\");\n      }\n      \n      if (!sidebar) {\n        throw new Error(\"Sidebar not available in LayoutContext\");\n      }\n      \n      navService.syncWithSidebar(sidebar);\n      // Set active item through NavigationService - it will handle sidebar sync\n      navService.setActiveItem(\"dashboard\");\n    } catch (error) {\n      this.handleError(error);\n      throw error; // Re-throw to trigger error handling\n    }\n\n    // Setup user menu handler\n    context.getHeader()?.setUserMenuHandler((user) => {\n      user.updateMenuItems([\n        {\n          id: \"account\",\n          text: \"Account Settings\",\n          icon: \"settings\",\n          href: \"/account\",\n          type: \"link\",\n        },\n        {\n          id: \"feedback\",\n          text: \"Send Feedback\",\n          icon: \"feedback\",\n          action: \"feedback\",\n          type: \"action\",\n        },\n        {\n          id: \"divider1\",\n          text: \"\",\n          icon: \"\",\n          type: \"divider\",\n        },\n        {\n          id: \"logout\",\n          text: \"Sign Out\",\n          icon: \"logout\",\n          action: \"logout\",\n          type: \"action\",\n          className: \"user-menu-signout\",\n          style: \"color: #dc3545;\",\n        },\n      ]);\n    });\n\n    // Note: User data will be set by AppHeaderBinderService after authentication\n    // No hardcoded user data here\n  }\n\n  /**\n   * Handle test error message from postMessage (for iframe testing)\n   */\n  private handleTestErrorMessage(messageData: { type?: string; title?: string; description?: string }): void {\n\n    if (!this.layout) {\n      this.logger.warn('Layout not initialized, cannot show error message');\n      return;\n    }\n\n    const { type, title, description } = messageData;\n\n    // Use the layout's error message system via onContextReady pattern (legacy for test messages)\n    this.layout.onContextReady((ctx) => {\n      switch (type) {\n        case \"error\":\n          ctx\n            .getMessages()\n            ?.showError(\n              title || \"Test Error\",\n              description ||\n                \"This is a test error message from iframe testing.\",\n            );\n          break;\n        case \"warning\":\n          ctx\n            .getMessages()\n            ?.showWarning(\n              title || \"Test Warning\",\n              description ||\n                \"This is a test warning message from iframe testing.\",\n            );\n          break;\n        case \"info\":\n          ctx\n            .getMessages()\n            ?.showInfo(\n              title || \"Test Info\",\n              description || \"This is a test info message from iframe testing.\",\n            );\n          break;\n        case \"success\":\n          ctx\n            .getMessages()\n            ?.showSuccess(\n              title || \"Test Success\",\n              description ||\n                \"This is a test success message from iframe testing.\",\n            );\n          break;\n        default:\n          this.logger.warn('Unknown message type:', type);\n          ctx\n            .getMessages()\n            ?.showInfo(\"Test Message\", \"Unknown message type: \" + type);\n      }\n    });\n  }\n\n  /**\n   * Handle clearing all error messages (for iframe testing)\n   */\n  private handleClearMessages(): void {\n\n    if (!this.layout) {\n      this.logger.warn('Layout not initialized, cannot clear messages');\n      return;\n    }\n\n    // Legacy onContextReady for test message handling\n    this.layout.onContextReady((ctx) => {\n      ctx.getMessages()?.clearAll();\n    });\n  }\n  /**\n   * Perform initial authentication validation (runs after registerServices)\n   */\n  private async validateInitialAuthentication(\n    context: LayoutContext,\n  ): Promise<void> {\n    const authServiceRef = AuthService.getRegisteredReference(context);\n    await authServiceRef\n      .get()\n      .then((service) => service.validateAuthentication(\"app-startup\"));\n  }\n\n  /**\n   * Set custom error handler\n   */\n  public setErrorHandler(handler: (ex: Error | unknown) => void): void {\n    this.errorHandler = handler;\n  }\n\n  /**\n   * Handle error using the configured error handler\n   */\n  public handleError(ex: Error | unknown): void {\n    this.errorHandler(ex);\n  }\n\n  /**\n   * Get the current error handler function\n   */\n  public getErrorHandler(): (ex: Error | unknown) => void {\n    return this.errorHandler;\n  }\n\n}\n","/**\n * Main entry point for Opinion Front UI\n * TypeScript migration from servlet-based application\n */\n\nimport './assets/styles/app-layout.css';\nimport './assets/styles/main.scss';\nimport './assets/styles/dashboard.scss';\nimport { OpinionApp } from './app';\nimport { LoggerFactory } from './logging/LoggerFactory';\n\n// Initialize logger for main module\nconst logger = LoggerFactory.getInstance().getLogger('Main');\n\n// Add temporary global error handlers (will be replaced after app init)\nconst globalErrorHandler = (event: ErrorEvent) => {\n  logger.error('Global JavaScript error (before app init)', event.error);\n};\n\nconst globalRejectionHandler = (event: PromiseRejectionEvent) => {\n  logger.error('Unhandled promise rejection (before app init)', event.reason);\n};\n\nwindow.addEventListener('error', globalErrorHandler);\nwindow.addEventListener('unhandledrejection', globalRejectionHandler);\n\n// Initialize the application when DOM and resources are ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', waitForResourcesAndInit);\n} else if (document.readyState === 'interactive') {\n  waitForResourcesAndInit();\n} else {\n  // Document is already complete\n  initApp();\n}\n\n// Wait for critical resources to load before initializing\nfunction waitForResourcesAndInit() {\n  // Wait a bit for stylesheets to load and apply\n  if (document.readyState !== 'complete') {\n    window.addEventListener('load', () => {\n      // Give an additional moment for layout to stabilize\n      setTimeout(initApp, 50);\n    });\n  } else {\n    // Already loaded, but give a moment for layout to stabilize\n    setTimeout(initApp, 10);\n  }\n}\n\nasync function initApp() {\n  const app = new OpinionApp();\n  await app.init();\n  \n  // Expose app instance globally for DebugPage access to Layout\n  (window as any).app = app;\n  \n  // Update global error handlers to use OpinionApp's error handler\n  const appErrorHandler = app.getErrorHandler();\n  \n  window.removeEventListener('error', globalErrorHandler);\n  window.removeEventListener('unhandledrejection', globalRejectionHandler);\n  \n  window.addEventListener('error', (event) => {\n    appErrorHandler(event.error);\n  });\n  \n  window.addEventListener('unhandledrejection', (event) => {\n    appErrorHandler(event.reason);\n  });\n}\n\nexport { OpinionApp };\n"],"file":"assets/index-3opOjjJi.js"}